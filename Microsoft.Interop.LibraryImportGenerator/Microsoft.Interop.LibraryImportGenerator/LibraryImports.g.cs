// <auto-generated/>
namespace System
{
    public abstract unsafe partial class Array
    {
        private sealed unsafe partial class ArrayInitializeCache
        {
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Array_GetElementConstructorEntrypoint", ExactSpelling = true)]
            private static extern partial delegate*<ref byte, void> GetElementConstructorEntrypoint(global::System.Runtime.CompilerServices.QCallTypeHandle arrayType);
        }
    }
}
namespace System
{
    public unsafe partial class Buffer
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Buffer_Clear", ExactSpelling = true)]
        private static unsafe extern partial void __ZeroMemory(void* b, nuint byteLength);
    }
}
namespace System
{
    public unsafe partial class Buffer
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Buffer_MemMove", ExactSpelling = true)]
        private static unsafe extern partial void __Memmove(byte* dest, byte* src, nuint len);
    }
}
namespace System
{
    internal static unsafe partial class CLRConfig
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool GetConfigBoolValue(string configSwitchName, out bool exist)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out exist);
            int __exist_native;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __configSwitchName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(configSwitchName))
            {
                __retVal_native = __PInvoke((ushort*)__configSwitchName_native, &__exist_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            exist = __exist_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ClrConfig_GetConfigBoolValue", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __configSwitchName_native, int* __exist_native);
        }
    }
}
namespace System
{
    internal sealed unsafe partial class ComAwareWeakReference
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWeakRefToObject", ExactSpelling = true)]
        private static extern partial void ComWeakRefToObject(nint pComWeakRef, long wrapperId, global::System.Runtime.CompilerServices.ObjectHandleOnStack retRcw);
    }
}
namespace System
{
    internal sealed unsafe partial class ComAwareWeakReference
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial nint ObjectToComWeakRef(global::System.Runtime.CompilerServices.ObjectHandleOnStack retRcw, out long wrapperId)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out wrapperId);
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (long* __wrapperId_native = &wrapperId)
            {
                __retVal = __PInvoke(retRcw, __wrapperId_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ObjectToComWeakRef", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(global::System.Runtime.CompilerServices.ObjectHandleOnStack __retRcw_native, long* __wrapperId_native);
        }
    }
}
namespace System.Diagnostics
{
    public static unsafe partial class Debugger
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool LaunchInternal()
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "DebugDebugger_Launch", ExactSpelling = true)]
            static extern unsafe int __PInvoke();
        }
    }
}
namespace System.Diagnostics
{
    public static unsafe partial class Debugger
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void LogInternal(int level, string category, string message)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __message_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(message))
            fixed (void* __category_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(category))
            {
                __PInvoke(level, (ushort*)__category_native, (ushort*)__message_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "DebugDebugger_Log", ExactSpelling = true)]
            static extern unsafe void __PInvoke(int __level_native, ushort* __category_native, ushort* __message_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_Enable", ExactSpelling = true)]
        private static unsafe extern partial ulong Enable(char* outputFile, global::System.Diagnostics.Tracing.EventPipeSerializationFormat format, uint circularBufferSizeInMB, global::System.Diagnostics.Tracing.EventPipeInternal.EventPipeProviderConfigurationNative* providers, uint numProviders);
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_Disable", ExactSpelling = true)]
        internal static extern partial void Disable(ulong sessionID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial nint CreateProvider(string providerName, delegate* unmanaged<byte*, int, byte, long, long, global::Interop.Advapi32.EVENT_FILTER_DESCRIPTOR*, void*, void> callbackFunc, void* callbackContext)
        {
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __providerName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(providerName))
            {
                __retVal = __PInvoke((ushort*)__providerName_native, callbackFunc, callbackContext);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_CreateProvider", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __providerName_native, delegate* unmanaged<byte*, int, byte, long, long, global::Interop.Advapi32.EVENT_FILTER_DESCRIPTOR*, void*, void> __callbackFunc_native, void* __callbackContext_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_DefineEvent", ExactSpelling = true)]
        internal static unsafe extern partial nint DefineEvent(nint provHandle, uint eventID, long keywords, uint eventVersion, uint level, void* pMetadata, uint metadataLength);
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint GetProvider(string providerName)
        {
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __providerName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(providerName))
            {
                __retVal = __PInvoke((ushort*)__providerName_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_GetProvider", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __providerName_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_DeleteProvider", ExactSpelling = true)]
        internal static extern partial void DeleteProvider(nint provHandle);
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int EventActivityIdControl(uint controlCode, ref global::System.Guid activityId)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::System.Guid* __activityId_native = &activityId)
            {
                __retVal = __PInvoke(controlCode, __activityId_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_EventActivityIdControl", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __controlCode_native, global::System.Guid* __activityId_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_WriteEventData", ExactSpelling = true)]
        internal static unsafe extern partial void WriteEventData(nint eventHandle, global::System.Diagnostics.Tracing.EventProvider.EventData* pEventData, uint dataCount, global::System.Guid* activityId, global::System.Guid* relatedActivityId);
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetSessionInfo(ulong sessionID, global::System.Diagnostics.Tracing.EventPipeSessionInfo* pSessionInfo)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sessionID, pSessionInfo);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_GetSessionInfo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ulong __sessionID_native, global::System.Diagnostics.Tracing.EventPipeSessionInfo* __pSessionInfo_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetNextEvent(ulong sessionID, global::System.Diagnostics.Tracing.EventPipeEventInstanceData* pInstance)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sessionID, pInstance);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_GetNextEvent", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ulong __sessionID_native, global::System.Diagnostics.Tracing.EventPipeEventInstanceData* __pInstance_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool SignalSession(ulong sessionID)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sessionID);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_SignalSession", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ulong __sessionID_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal static unsafe partial class EventPipeInternal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool WaitForSessionSignal(ulong sessionID, int timeoutMs)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sessionID, timeoutMs);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "EventPipeInternal_WaitForSessionSignal", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ulong __sessionID_native, int __timeoutMs_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogContentionLockCreated", ExactSpelling = true)]
        private static extern partial void LogContentionLockCreated(nint LockID, nint AssociatedObjectID, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogContentionStart", ExactSpelling = true)]
        private static extern partial void LogContentionStart(global::System.Diagnostics.Tracing.NativeRuntimeEventSource.ContentionFlagsMap ContentionFlags, ushort ClrInstanceID, nint LockID, nint AssociatedObjectID, ulong LockOwnerThreadID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogContentionStop", ExactSpelling = true)]
        private static extern partial void LogContentionStop(global::System.Diagnostics.Tracing.NativeRuntimeEventSource.ContentionFlagsMap ContentionFlags, ushort ClrInstanceID, double DurationNs);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadStart", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadStart(uint ActiveWorkerThreadCount, uint RetiredWorkerThreadCount, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadStop", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadStop(uint ActiveWorkerThreadCount, uint RetiredWorkerThreadCount, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadWait", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadWait(uint ActiveWorkerThreadCount, uint RetiredWorkerThreadCount, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolMinMaxThreads", ExactSpelling = true)]
        private static extern partial void LogThreadPoolMinMaxThreads(ushort MinWorkerThreads, ushort MaxWorkerThreads, ushort MinIOCompletionThreads, ushort MaxIOCompletionThreads, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadAdjustmentSample", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadAdjustmentSample(double Throughput, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadAdjustmentAdjustment", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadAdjustmentAdjustment(double AverageThroughput, uint NewWorkerThreadCount, global::System.Diagnostics.Tracing.NativeRuntimeEventSource.ThreadAdjustmentReasonMap Reason, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkerThreadAdjustmentStats", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkerThreadAdjustmentStats(double Duration, double Throughput, double ThreadPoolWorkerThreadWait, double ThroughputWave, double ThroughputErrorEstimate, double AverageThroughputErrorEstimate, double ThroughputRatio, double Confidence, double NewControlSetting, ushort NewThreadWaveMagnitude, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void LogThreadPoolIOEnqueue(nint NativeOverlapped, nint Overlapped, bool MultiDequeues, ushort ClrInstanceID)
        {
            int __MultiDequeues_native;
            // Marshal - Convert managed data to native data.
            __MultiDequeues_native = (int)(MultiDequeues ? 1 : 0);
            {
                __PInvoke(NativeOverlapped, Overlapped, __MultiDequeues_native, ClrInstanceID);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolIOEnqueue", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __NativeOverlapped_native, nint __Overlapped_native, int __MultiDequeues_native, ushort __ClrInstanceID_native);
        }
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolIODequeue", ExactSpelling = true)]
        private static extern partial void LogThreadPoolIODequeue(nint NativeOverlapped, nint Overlapped, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolWorkingThreadCount", ExactSpelling = true)]
        private static extern partial void LogThreadPoolWorkingThreadCount(uint Count, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics.Tracing
{
    internal sealed unsafe partial class NativeRuntimeEventSource
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LogThreadPoolIOPack", ExactSpelling = true)]
        private static extern partial void LogThreadPoolIOPack(nint NativeOverlapped, nint Overlapped, ushort ClrInstanceID);
    }
}
namespace System.Diagnostics
{
    public unsafe partial class StackFrame
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "StackFrame_GetMethodDescFromNativeIP", ExactSpelling = true)]
        private static extern partial global::System.RuntimeMethodHandleInternal GetMethodDescFromNativeIP(nint ip);
    }
}
namespace System
{
    public abstract unsafe partial class Enum
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Enum_GetValuesAndNames", ExactSpelling = true)]
        private static extern partial void GetEnumValuesAndNames(global::System.Runtime.CompilerServices.QCallTypeHandle enumType, global::System.Runtime.CompilerServices.ObjectHandleOnStack values, global::System.Runtime.CompilerServices.ObjectHandleOnStack names, global::Interop.BOOL getNames);
    }
}
namespace System
{
    public static unsafe partial class Environment
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Environment_Exit", ExactSpelling = true)]
        private static extern partial void _Exit(int exitCode);
    }
}
namespace System
{
    public static unsafe partial class Environment
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Environment_GetProcessorCount", ExactSpelling = true)]
        private static extern partial int GetProcessorCount();
    }
}
namespace System
{
    public unsafe partial class Exception
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ExceptionNative_GetMessageFromNativeResources", ExactSpelling = true)]
        private static extern partial void GetMessageFromNativeResources(global::System.Exception.ExceptionMessageKind kind, global::System.Runtime.CompilerServices.StringHandleOnStack retMesg);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int _StartNoGCRegion(long totalSize, bool lohSizeKnown, long lohSize, bool disallowFullBlockingGC)
        {
            int __lohSizeKnown_native;
            int __disallowFullBlockingGC_native;
            int __retVal;
            // Marshal - Convert managed data to native data.
            __disallowFullBlockingGC_native = (int)(disallowFullBlockingGC ? 1 : 0);
            __lohSizeKnown_native = (int)(lohSizeKnown ? 1 : 0);
            {
                __retVal = __PInvoke(totalSize, __lohSizeKnown_native, lohSize, __disallowFullBlockingGC_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_StartNoGCRegion", ExactSpelling = true)]
            static extern unsafe int __PInvoke(long __totalSize_native, int __lohSizeKnown_native, long __lohSize_native, int __disallowFullBlockingGC_native);
        }
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_EndNoGCRegion", ExactSpelling = true)]
        internal static extern partial int _EndNoGCRegion();
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_GetTotalMemory", ExactSpelling = true)]
        private static extern partial long GetTotalMemory();
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_Collect", ExactSpelling = true)]
        private static extern partial void _Collect(int generation, int mode);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_AddMemoryPressure", ExactSpelling = true)]
        private static extern partial void _AddMemoryPressure(ulong bytesAllocated);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_RemoveMemoryPressure", ExactSpelling = true)]
        private static extern partial void _RemoveMemoryPressure(ulong bytesAllocated);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_WaitForPendingFinalizers", ExactSpelling = true)]
        private static extern partial void _WaitForPendingFinalizers();
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_RegisterFrozenSegment", ExactSpelling = true)]
        private static extern partial nint _RegisterFrozenSegment(nint sectionAddress, nint sectionSize);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_UnregisterFrozenSegment", ExactSpelling = true)]
        private static extern partial void _UnregisterFrozenSegment(nint segmentHandle);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_EnableNoGCRegionCallback", ExactSpelling = true)]
        private static unsafe extern partial global::System.GC.EnableNoGCRegionCallbackStatus _EnableNoGCRegionCallback(global::System.GC.NoGCRegionCallbackFinalizerWorkItem* callback, long totalSize);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_EnumerateConfigurationValues", ExactSpelling = true)]
        internal static unsafe extern partial void _EnumerateConfigurationValues(void* configurationDictionary, delegate* unmanaged<void*, void*, void*, global::System.GC.GCConfigurationType, long, void> callback);
    }
}
namespace System
{
    public static unsafe partial class GC
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GCInterface_RefreshMemoryLimit", ExactSpelling = true)]
        internal static extern partial int _RefreshMemoryLimit(global::System.GC.GCHeapHardLimitInfo heapHardLimitInfo);
    }
}
namespace System.IO
{
    public unsafe partial class FileLoadException
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GetFileLoadExceptionMessage", ExactSpelling = true)]
        private static extern partial void GetFileLoadExceptionMessage(int hResult, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.IO
{
    public unsafe partial class FileLoadException
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "FileLoadException_GetMessageForHR", ExactSpelling = true)]
        private static extern partial void GetMessageForHR(int hresult, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    public abstract unsafe partial class Assembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetExecutingAssembly", ExactSpelling = true)]
        private static extern partial void GetExecutingAssemblyNative(global::System.Runtime.CompilerServices.StackCrawlMarkHandle stackMark, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly);
    }
}
namespace System.Reflection
{
    public abstract unsafe partial class Assembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetEntryAssembly", ExactSpelling = true)]
        private static extern partial void GetEntryAssemblyNative(global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly);
    }
}
namespace System.Reflection
{
    public abstract unsafe partial class Assembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetAssemblyCount", ExactSpelling = true)]
        internal static extern partial uint GetAssemblyCount();
    }
}
namespace System.Reflection
{
    public sealed unsafe partial class AssemblyName
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyName_InitializeAssemblySpec", ExactSpelling = true)]
        private static unsafe extern partial void InitializeAssemblySpec(global::System.Reflection.NativeAssemblyNameParts* pAssemblyNameParts, void* pAssemblySpec);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeAssemblyBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AppDomain_CreateDynamicAssembly", ExactSpelling = true)]
        private static unsafe extern partial void CreateDynamicAssembly(global::System.Runtime.CompilerServices.ObjectHandleOnStack assemblyLoadContext, global::System.Reflection.NativeAssemblyNameParts* pAssemblyName, global::System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgId, global::System.Reflection.Emit.AssemblyBuilderAccess access, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetTypeRef(global::System.Runtime.CompilerServices.QCallModule module, string strFullName, global::System.Runtime.CompilerServices.QCallModule refedModule, int tkResolution)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __strFullName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(strFullName))
            {
                __retVal = __PInvoke(module, (ushort*)__strFullName_native, refedModule, tkResolution);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetTypeRef", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __strFullName_native, global::System.Runtime.CompilerServices.QCallModule __refedModule_native, int __tkResolution_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetMemberRef", ExactSpelling = true)]
        private static extern partial int GetMemberRef(global::System.Runtime.CompilerServices.QCallModule module, global::System.Runtime.CompilerServices.QCallModule refedModule, int tr, int defToken);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetMemberRefFromSignature(global::System.Runtime.CompilerServices.QCallModule module, int tr, string methodName, byte[] signature, int length)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            fixed (void* __methodName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(methodName))
            {
                __retVal = __PInvoke(module, tr, (ushort*)__methodName_native, (byte*)__signature_native, length);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetMemberRefFromSignature", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tr_native, ushort* __methodName_native, byte* __signature_native, int __length_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetMemberRefOfMethodInfo", ExactSpelling = true)]
        private static extern partial int GetMemberRefOfMethodInfo(global::System.Runtime.CompilerServices.QCallModule module, int tr, global::System.RuntimeMethodHandleInternal method);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetMemberRefOfFieldInfo", ExactSpelling = true)]
        private static extern partial int GetMemberRefOfFieldInfo(global::System.Runtime.CompilerServices.QCallModule module, int tkType, global::System.Runtime.CompilerServices.QCallTypeHandle declaringType, int tkField);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetTokenFromTypeSpec(global::System.Runtime.CompilerServices.QCallModule pModule, byte[] signature, int length)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            {
                __retVal = __PInvoke(pModule, (byte*)__signature_native, length);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetTokenFromTypeSpec", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __pModule_native, byte* __signature_native, int __length_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetArrayMethodToken(global::System.Runtime.CompilerServices.QCallModule module, int tkTypeSpec, string methodName, byte[] signature, int sigLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            fixed (void* __methodName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(methodName))
            {
                __retVal = __PInvoke(module, tkTypeSpec, (ushort*)__methodName_native, (byte*)__signature_native, sigLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetArrayMethodToken", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkTypeSpec_native, ushort* __methodName_native, byte* __signature_native, int __sigLength_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetStringConstant(global::System.Runtime.CompilerServices.QCallModule module, string str, int length)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __str_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(str))
            {
                __retVal = __PInvoke(module, (ushort*)__str_native, length);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_GetStringConstant", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __str_native, int __length_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeModuleBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void SetFieldRVAContent(global::System.Runtime.CompilerServices.QCallModule module, int fdToken, byte[] data, int length)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __data_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(data))
            {
                __PInvoke(module, fdToken, (byte*)__data_native, length);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleBuilder_SetFieldRVAContent", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __fdToken_native, byte* __data_native, int __length_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetParentType", ExactSpelling = true)]
        private static extern partial void SetParentType(global::System.Runtime.CompilerServices.QCallModule module, int tdTypeDef, int tkParent);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_AddInterfaceImpl", ExactSpelling = true)]
        private static extern partial void AddInterfaceImpl(global::System.Runtime.CompilerServices.QCallModule module, int tdTypeDef, int tkInterface);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int DefineMethod(global::System.Runtime.CompilerServices.QCallModule module, int tkParent, string name, byte[] signature, int sigLength, global::System.Reflection.MethodAttributes attributes)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __retVal = __PInvoke(module, tkParent, (ushort*)__name_native, (byte*)__signature_native, sigLength, attributes);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineMethod", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkParent_native, ushort* __name_native, byte* __signature_native, int __sigLength_native, global::System.Reflection.MethodAttributes __attributes_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int DefineMethodSpec(global::System.Runtime.CompilerServices.QCallModule module, int tkParent, byte[] signature, int sigLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            {
                __retVal = __PInvoke(module, tkParent, (byte*)__signature_native, sigLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineMethodSpec", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkParent_native, byte* __signature_native, int __sigLength_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int DefineField(global::System.Runtime.CompilerServices.QCallModule module, int tkParent, string name, byte[] signature, int sigLength, global::System.Reflection.FieldAttributes attributes)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __retVal = __PInvoke(module, tkParent, (ushort*)__name_native, (byte*)__signature_native, sigLength, attributes);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineField", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkParent_native, ushort* __name_native, byte* __signature_native, int __sigLength_native, global::System.Reflection.FieldAttributes __attributes_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void SetMethodIL(global::System.Runtime.CompilerServices.QCallModule module, int tk, bool isInitLocals, byte[] body, int bodyLength, byte[] LocalSig, int sigLength, int maxStackSize, global::System.Reflection.Emit.ExceptionHandler[] exceptions, int numExceptions, int[] tokenFixups, int numTokenFixups)
        {
            int __isInitLocals_native;
            // Marshal - Convert managed data to native data.
            __isInitLocals_native = (int)(isInitLocals ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __tokenFixups_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(tokenFixups))
            fixed (void* __exceptions_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::System.Reflection.Emit.ExceptionHandler, global::System.Reflection.Emit.ExceptionHandler>.ManagedToUnmanagedIn.GetPinnableReference(exceptions))
            fixed (void* __LocalSig_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(LocalSig))
            fixed (void* __body_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(body))
            {
                __PInvoke(module, tk, __isInitLocals_native, (byte*)__body_native, bodyLength, (byte*)__LocalSig_native, sigLength, maxStackSize, (global::System.Reflection.Emit.ExceptionHandler*)__exceptions_native, numExceptions, (int*)__tokenFixups_native, numTokenFixups);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetMethodIL", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tk_native, int __isInitLocals_native, byte* __body_native, int __bodyLength_native, byte* __LocalSig_native, int __sigLength_native, int __maxStackSize_native, global::System.Reflection.Emit.ExceptionHandler* __exceptions_native, int __numExceptions_native, int* __tokenFixups_native, int __numTokenFixups_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void DefineCustomAttribute(global::System.Runtime.CompilerServices.QCallModule module, int tkAssociate, int tkConstructor, global::System.ReadOnlySpan<byte> attr, int attrLength)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __attr_native = &global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(attr))
            {
                __PInvoke(module, tkAssociate, tkConstructor, (byte*)__attr_native, attrLength);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineCustomAttribute", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkAssociate_native, int __tkConstructor_native, byte* __attr_native, int __attrLength_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int DefineProperty(global::System.Runtime.CompilerServices.QCallModule module, int tkParent, string name, global::System.Reflection.PropertyAttributes attributes, byte[] signature, int sigLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __retVal = __PInvoke(module, tkParent, (ushort*)__name_native, attributes, (byte*)__signature_native, sigLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineProperty", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkParent_native, ushort* __name_native, global::System.Reflection.PropertyAttributes __attributes_native, byte* __signature_native, int __sigLength_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int DefineEvent(global::System.Runtime.CompilerServices.QCallModule module, int tkParent, string name, global::System.Reflection.EventAttributes attributes, int tkEventType)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __retVal = __PInvoke(module, tkParent, (ushort*)__name_native, attributes, tkEventType);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineEvent", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkParent_native, ushort* __name_native, global::System.Reflection.EventAttributes __attributes_native, int __tkEventType_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineMethodSemantics", ExactSpelling = true)]
        internal static extern partial void DefineMethodSemantics(global::System.Runtime.CompilerServices.QCallModule module, int tkAssociation, global::System.Reflection.MethodSemanticsAttributes semantics, int tkMethod);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineMethodImpl", ExactSpelling = true)]
        internal static extern partial void DefineMethodImpl(global::System.Runtime.CompilerServices.QCallModule module, int tkType, int tkBody, int tkDecl);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetMethodImpl", ExactSpelling = true)]
        internal static extern partial void SetMethodImpl(global::System.Runtime.CompilerServices.QCallModule module, int tkMethod, global::System.Reflection.MethodImplAttributes MethodImplAttributes);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int SetParamInfo(global::System.Runtime.CompilerServices.QCallModule module, int tkMethod, int iSequence, global::System.Reflection.ParameterAttributes iParamAttributes, string strParamName)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __strParamName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(strParamName))
            {
                __retVal = __PInvoke(module, tkMethod, iSequence, iParamAttributes, (ushort*)__strParamName_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetParamInfo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, int __tkMethod_native, int __iSequence_native, global::System.Reflection.ParameterAttributes __iParamAttributes_native, ushort* __strParamName_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetTokenFromSig(global::System.Runtime.CompilerServices.QCallModule module, byte[] signature, int sigLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __signature_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(signature))
            {
                __retVal = __PInvoke(module, (byte*)__signature_native, sigLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_GetTokenFromSig", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, byte* __signature_native, int __sigLength_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetFieldLayoutOffset", ExactSpelling = true)]
        internal static extern partial void SetFieldLayoutOffset(global::System.Runtime.CompilerServices.QCallModule module, int fdToken, int iOffset);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetClassLayout", ExactSpelling = true)]
        internal static extern partial void SetClassLayout(global::System.Runtime.CompilerServices.QCallModule module, int tk, global::System.Reflection.Emit.PackingSize iPackingSize, int iTypeSize);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetConstantValue", ExactSpelling = true)]
        private static unsafe extern partial void SetConstantValue(global::System.Runtime.CompilerServices.QCallModule module, int tk, int corType, void* pValue);
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void SetPInvokeData(global::System.Runtime.CompilerServices.QCallModule module, string DllName, string name, int token, int linkFlags)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            fixed (void* __DllName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(DllName))
            {
                __PInvoke(module, (ushort*)__DllName_native, (ushort*)__name_native, token, linkFlags);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_SetPInvokeData", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __DllName_native, ushort* __name_native, int __token_native, int __linkFlags_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int DefineType(global::System.Runtime.CompilerServices.QCallModule module, string fullname, int tkParent, global::System.Reflection.TypeAttributes attributes, int tkEnclosingType, int[] interfaceTokens)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __interfaceTokens_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(interfaceTokens))
            fixed (void* __fullname_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(fullname))
            {
                __retVal = __PInvoke(module, (ushort*)__fullname_native, tkParent, attributes, tkEnclosingType, (int*)__interfaceTokens_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineType", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __fullname_native, int __tkParent_native, global::System.Reflection.TypeAttributes __attributes_native, int __tkEnclosingType_native, int* __interfaceTokens_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int DefineGenericParam(global::System.Runtime.CompilerServices.QCallModule module, string name, int tkParent, global::System.Reflection.GenericParameterAttributes attributes, int position, int[] constraints)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __constraints_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(constraints))
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __retVal = __PInvoke(module, (ushort*)__name_native, tkParent, attributes, position, (int*)__constraints_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_DefineGenericParam", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __name_native, int __tkParent_native, global::System.Reflection.GenericParameterAttributes __attributes_native, int __position_native, int* __constraints_native);
        }
    }
}
namespace System.Reflection.Emit
{
    internal sealed unsafe partial class RuntimeTypeBuilder
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "TypeBuilder_TermCreateClass", ExactSpelling = true)]
        private static extern partial void TermCreateClass(global::System.Runtime.CompilerServices.QCallModule module, int tk, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class LoaderAllocatorScout
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool Destroy(nint nativeLoaderAllocator)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(nativeLoaderAllocator);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "LoaderAllocator_Destroy", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __nativeLoaderAllocator_native);
        }
    }
}
namespace System.Reflection.Metadata
{
    public static unsafe partial class AssemblyExtensions
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial bool InternalTryGetRawMetadata(global::System.Runtime.CompilerServices.QCallAssembly assembly, ref byte* blob, ref int length)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __length_native = &length)
            fixed (byte** __blob_native = &blob)
            {
                __retVal_native = __PInvoke(assembly, __blob_native, __length_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_InternalTryGetRawMetadata", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, byte** __blob_native, int* __length_native);
        }
    }
}
namespace System.Reflection.Metadata
{
    public static unsafe partial class MetadataUpdater
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_ApplyUpdate", ExactSpelling = true)]
        private static unsafe extern partial void ApplyUpdate(global::System.Runtime.CompilerServices.QCallAssembly assembly, byte* metadataDelta, int metadataDeltaLength, byte* ilDelta, int ilDeltaLength, byte* pdbDelta, int pdbDeltaLength);
    }
}
namespace System.Reflection.Metadata
{
    public static unsafe partial class MetadataUpdater
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial bool IsApplyUpdateSupported()
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_IsApplyUpdateSupported", ExactSpelling = true)]
            static extern unsafe int __PInvoke();
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool GetCodeBase(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retString)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(assembly, retString);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetCodeBase", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, global::System.Runtime.CompilerServices.StringHandleOnStack __retString_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetFullName", ExactSpelling = true)]
        private static extern partial void GetFullName(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetEntryPoint", ExactSpelling = true)]
        private static extern partial void GetEntryPoint(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.ObjectHandleOnStack retMethod);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetTypeCore(global::System.Runtime.CompilerServices.QCallAssembly assembly, string typeName, global::System.ReadOnlySpan<string> nestedTypeNames, int nestedTypeNamesLength, global::System.Runtime.CompilerServices.ObjectHandleOnStack retType)
        {
            byte* __typeName_native = default;
            System.IntPtr* __nestedTypeNames_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __nestedTypeNames_native__marshaller = new();
            int __nestedTypeNames_native__numElements;
            int __nestedTypeNames_native__lastIndexMarshalled = 0;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out __nestedTypeNames_native__numElements);
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __typeName_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __nestedTypeNames_native__marshaller.FromManaged(nestedTypeNames, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                {
                    System.ReadOnlySpan<string> __nestedTypeNames_native__managedSpan = __nestedTypeNames_native__marshaller.GetManagedValuesSource();
                    System.Span<System.IntPtr> __nestedTypeNames_native__nativeSpan = __nestedTypeNames_native__marshaller.GetUnmanagedValuesDestination();
                    for (int __i0 = 0; __i0 < __nestedTypeNames_native__managedSpan.Length; ++__i0, ++__nestedTypeNames_native__lastIndexMarshalled)
                    {
                        __nestedTypeNames_native__nativeSpan[__i0] = (System.IntPtr)(byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(__nestedTypeNames_native__managedSpan[__i0]);
                    }
                }

                __typeName_native__marshaller.FromManaged(typeName, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __nestedTypeNames_native__unused = __nestedTypeNames_native__marshaller)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __nestedTypeNames_native = __nestedTypeNames_native__marshaller.ToUnmanaged();
                    __typeName_native = __typeName_native__marshaller.ToUnmanaged();
                    __PInvoke(assembly, __typeName_native, __nestedTypeNames_native, nestedTypeNamesLength, retType);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                {
                    System.ReadOnlySpan<System.IntPtr> __nestedTypeNames_native__nativeSpan = __nestedTypeNames_native__marshaller.GetUnmanagedValuesDestination();
                    for (int __i0 = 0; __i0 < __nestedTypeNames_native__lastIndexMarshalled; ++__i0)
                    {
                        global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free((byte*)__nestedTypeNames_native__nativeSpan[__i0]);
                    }
                }

                __nestedTypeNames_native__marshaller.Free();
                __typeName_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetTypeCore", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, byte* __typeName_native, System.IntPtr* __nestedTypeNames_native, int __nestedTypeNamesLength_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retType_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetTypeCoreIgnoreCase(global::System.Runtime.CompilerServices.QCallAssembly assembly, string typeName, global::System.ReadOnlySpan<string> nestedTypeNames, int nestedTypeNamesLength, global::System.Runtime.CompilerServices.ObjectHandleOnStack retType)
        {
            System.IntPtr* __nestedTypeNames_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __nestedTypeNames_native__marshaller = new();
            int __nestedTypeNames_native__numElements;
            int __nestedTypeNames_native__lastIndexMarshalled = 0;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out __nestedTypeNames_native__numElements);
            try
            {
                // Marshal - Convert managed data to native data.
                __nestedTypeNames_native__marshaller.FromManaged(nestedTypeNames, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                {
                    System.ReadOnlySpan<string> __nestedTypeNames_native__managedSpan = __nestedTypeNames_native__marshaller.GetManagedValuesSource();
                    System.Span<System.IntPtr> __nestedTypeNames_native__nativeSpan = __nestedTypeNames_native__marshaller.GetUnmanagedValuesDestination();
                    for (int __i0 = 0; __i0 < __nestedTypeNames_native__managedSpan.Length; ++__i0, ++__nestedTypeNames_native__lastIndexMarshalled)
                    {
                        __nestedTypeNames_native__nativeSpan[__i0] = (System.IntPtr)(ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(__nestedTypeNames_native__managedSpan[__i0]);
                    }
                }

                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __nestedTypeNames_native__unused = __nestedTypeNames_native__marshaller)
                fixed (void* __typeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(typeName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __nestedTypeNames_native = __nestedTypeNames_native__marshaller.ToUnmanaged();
                    __PInvoke(assembly, (ushort*)__typeName_native, __nestedTypeNames_native, nestedTypeNamesLength, retType);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                {
                    System.ReadOnlySpan<System.IntPtr> __nestedTypeNames_native__nativeSpan = __nestedTypeNames_native__marshaller.GetUnmanagedValuesDestination();
                    for (int __i0 = 0; __i0 < __nestedTypeNames_native__lastIndexMarshalled; ++__i0)
                    {
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__nestedTypeNames_native__nativeSpan[__i0]);
                    }
                }

                __nestedTypeNames_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetTypeCoreIgnoreCase", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, ushort* __typeName_native, System.IntPtr* __nestedTypeNames_native, int __nestedTypeNamesLength_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retType_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetExportedTypes", ExactSpelling = true)]
        private static extern partial void GetExportedTypes(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.ObjectHandleOnStack retTypes);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetIsCollectible", ExactSpelling = true)]
        internal static extern partial global::Interop.BOOL GetIsCollectible(global::System.Runtime.CompilerServices.QCallAssembly assembly);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial byte* GetResource(global::System.Runtime.CompilerServices.QCallAssembly assembly, string resourceName, out uint length)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out length);
            byte* __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (uint* __length_native = &length)
            fixed (void* __resourceName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resourceName))
            {
                __retVal = __PInvoke(assembly, (ushort*)__resourceName_native, __length_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetResource", ExactSpelling = true)]
            static extern unsafe byte* __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, ushort* __resourceName_native, uint* __length_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial void InternalLoad(global::System.Reflection.NativeAssemblyNameParts* pAssemblyNameParts, global::System.Runtime.CompilerServices.ObjectHandleOnStack requestingAssembly, global::System.Runtime.CompilerServices.StackCrawlMarkHandle stackMark, bool throwOnFileNotFound, global::System.Runtime.CompilerServices.ObjectHandleOnStack assemblyLoadContext, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly)
        {
            int __throwOnFileNotFound_native;
            // Marshal - Convert managed data to native data.
            __throwOnFileNotFound_native = (int)(throwOnFileNotFound ? 1 : 0);
            {
                __PInvoke(pAssemblyNameParts, requestingAssembly, stackMark, __throwOnFileNotFound_native, assemblyLoadContext, retAssembly);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_InternalLoad", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Reflection.NativeAssemblyNameParts* __pAssemblyNameParts_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __requestingAssembly_native, global::System.Runtime.CompilerServices.StackCrawlMarkHandle __stackMark_native, int __throwOnFileNotFound_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __assemblyLoadContext_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retAssembly_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetModule(global::System.Runtime.CompilerServices.QCallAssembly assembly, string name, global::System.Runtime.CompilerServices.ObjectHandleOnStack retModule)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __PInvoke(assembly, (ushort*)__name_native, retModule);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetModule", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, ushort* __name_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retModule_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int GetManifestResourceInfo(global::System.Runtime.CompilerServices.QCallAssembly assembly, string resourceName, global::System.Runtime.CompilerServices.ObjectHandleOnStack assemblyRef, global::System.Runtime.CompilerServices.StringHandleOnStack retFileName)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __resourceName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resourceName))
            {
                __retVal = __PInvoke(assembly, (ushort*)__resourceName_native, assemblyRef, retFileName);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetManifestResourceInfo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, ushort* __resourceName_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __assemblyRef_native, global::System.Runtime.CompilerServices.StringHandleOnStack __retFileName_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetLocation", ExactSpelling = true)]
        private static extern partial void GetLocation(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetImageRuntimeVersion", ExactSpelling = true)]
        private static extern partial void GetImageRuntimeVersion(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetVersion(global::System.Runtime.CompilerServices.QCallAssembly assembly, out int majVer, out int minVer, out int buildNum, out int revNum)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out majVer);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out minVer);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out buildNum);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out revNum);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __revNum_native = &revNum)
            fixed (int* __buildNum_native = &buildNum)
            fixed (int* __minVer_native = &minVer)
            fixed (int* __majVer_native = &majVer)
            {
                __PInvoke(assembly, __majVer_native, __minVer_native, __buildNum_native, __revNum_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetVersion", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, int* __majVer_native, int* __minVer_native, int* __buildNum_native, int* __revNum_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetLocale", ExactSpelling = true)]
        private static extern partial void GetLocale(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetSimpleName", ExactSpelling = true)]
        private static extern partial void GetSimpleName(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.StringHandleOnStack retSimpleName);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetHashAlgorithm", ExactSpelling = true)]
        private static extern partial global::System.Configuration.Assemblies.AssemblyHashAlgorithm GetHashAlgorithm(global::System.Runtime.CompilerServices.QCallAssembly assembly);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetFlags", ExactSpelling = true)]
        private static extern partial global::System.Reflection.AssemblyNameFlags GetFlags(global::System.Runtime.CompilerServices.QCallAssembly assembly);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetPublicKey", ExactSpelling = true)]
        private static extern partial void GetPublicKey(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Runtime.CompilerServices.ObjectHandleOnStack retPublicKey);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetModules(global::System.Runtime.CompilerServices.QCallAssembly assembly, bool loadIfNotFound, bool getResourceModules, global::System.Runtime.CompilerServices.ObjectHandleOnStack retModuleHandles)
        {
            int __loadIfNotFound_native;
            int __getResourceModules_native;
            // Marshal - Convert managed data to native data.
            __getResourceModules_native = (int)(getResourceModules ? 1 : 0);
            __loadIfNotFound_native = (int)(loadIfNotFound ? 1 : 0);
            {
                __PInvoke(assembly, __loadIfNotFound_native, __getResourceModules_native, retModuleHandles);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetModules", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallAssembly __assembly_native, int __loadIfNotFound_native, int __getResourceModules_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retModuleHandles_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeAssembly
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetForwardedType", ExactSpelling = true)]
        private static extern partial void GetForwardedType(global::System.Runtime.CompilerServices.QCallAssembly assembly, global::System.Reflection.MetadataToken mdtExternalType, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeModule
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetType(global::System.Runtime.CompilerServices.QCallModule module, string className, bool throwOnError, bool ignoreCase, global::System.Runtime.CompilerServices.ObjectHandleOnStack type, global::System.Runtime.CompilerServices.ObjectHandleOnStack keepAlive)
        {
            int __throwOnError_native;
            int __ignoreCase_native;
            // Marshal - Convert managed data to native data.
            __ignoreCase_native = (int)(ignoreCase ? 1 : 0);
            __throwOnError_native = (int)(throwOnError ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __className_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(className))
            {
                __PInvoke(module, (ushort*)__className_native, __throwOnError_native, __ignoreCase_native, type, keepAlive);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeModule_GetType", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Runtime.CompilerServices.QCallModule __module_native, ushort* __className_native, int __throwOnError_native, int __ignoreCase_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __type_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __keepAlive_native);
        }
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeModule
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeModule_GetScopeName", ExactSpelling = true)]
        private static extern partial void GetScopeName(global::System.Runtime.CompilerServices.QCallModule module, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Reflection
{
    internal sealed unsafe partial class RuntimeModule
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeModule_GetFullyQualifiedName", ExactSpelling = true)]
        private static extern partial void GetFullyQualifiedName(global::System.Runtime.CompilerServices.QCallModule module, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ReflectionInvocation_RunClassConstructor", ExactSpelling = true)]
        private static extern partial void RunClassConstructor(global::System.Runtime.CompilerServices.QCallTypeHandle type);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ReflectionInvocation_RunModuleConstructor", ExactSpelling = true)]
        private static extern partial void RunModuleConstructor(global::System.Runtime.CompilerServices.QCallModule module);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ReflectionInvocation_CompileMethod", ExactSpelling = true)]
        internal static extern partial void CompileMethod(global::System.RuntimeMethodHandleInternal method);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ReflectionInvocation_PrepareMethod", ExactSpelling = true)]
        private static unsafe extern partial void PrepareMethod(global::System.RuntimeMethodHandleInternal method, nint* pInstantiation, int cInstantiation);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ReflectionSerialization_GetUninitializedObject", ExactSpelling = true)]
        private static extern partial void GetUninitializedObject(global::System.Runtime.CompilerServices.QCallTypeHandle type, global::System.Runtime.CompilerServices.ObjectHandleOnStack retObject);
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool AreTypesEquivalent(global::System.Runtime.CompilerServices.MethodTable* pMTa, global::System.Runtime.CompilerServices.MethodTable* pMTb)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(pMTa, pMTb);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MethodTable_AreTypesEquivalent", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.MethodTable* __pMTa_native, global::System.Runtime.CompilerServices.MethodTable* __pMTb_native);
        }
    }
}
namespace System.Runtime.CompilerServices
{
    public static unsafe partial class RuntimeHelpers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_AllocateTypeAssociatedMemory", ExactSpelling = true)]
        private static extern partial nint AllocateTypeAssociatedMemory(global::System.Runtime.CompilerServices.QCallTypeHandle type, uint size);
    }
}
namespace System.Runtime
{
    public static unsafe partial class ControlledExecution
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_Abort", ExactSpelling = true)]
        private static extern partial void AbortThread(global::System.Threading.ThreadHandle thread);
    }
}
namespace System.Runtime
{
    public static unsafe partial class ControlledExecution
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_ResetAbort", ExactSpelling = true)]
        private static extern partial void ResetAbortThread();
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MarshalNative_Prelink", ExactSpelling = true)]
        private static extern partial void InternalPrelink(global::System.RuntimeMethodHandleInternal m);
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool IsBuiltInComSupportedInternal()
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MarshalNative_IsBuiltInComSupported", ExactSpelling = true)]
            static extern unsafe int __PInvoke();
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MarshalNative_GetHINSTANCE", ExactSpelling = true)]
        private static extern partial nint GetHINSTANCE(global::System.Runtime.CompilerServices.QCallModule m);
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetTypeFromCLSID(in global::System.Guid clsid, string server, global::System.Runtime.CompilerServices.ObjectHandleOnStack retType)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __server_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(server))
            fixed (global::System.Guid* __clsid_native = &clsid)
            {
                __PInvoke(__clsid_native, (ushort*)__server_native, retType);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MarshalNative_GetTypeFromCLSID", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Guid* __clsid_native, ushort* __server_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retType_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int CreateBindCtx(uint reserved, out nint ppbc)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ppbc);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __ppbc_native = &ppbc)
            {
                __retVal = __PInvoke(reserved, __ppbc_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CreateBindCtx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __reserved_native, nint* __ppbc_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int MkParseDisplayName(nint pbc, string szUserName, out uint pchEaten, out nint ppmk)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out pchEaten);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ppmk);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __ppmk_native = &ppmk)
            fixed (uint* __pchEaten_native = &pchEaten)
            fixed (void* __szUserName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(szUserName))
            {
                __retVal = __PInvoke(pbc, (ushort*)__szUserName_native, __pchEaten_native, __ppmk_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "MkParseDisplayName", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __pbc_native, ushort* __szUserName_native, uint* __pchEaten_native, nint* __ppmk_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int BindMoniker(nint pmk, uint grfOpt, ref global::System.Guid iidResult, out nint ppvResult)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ppvResult);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __ppvResult_native = &ppvResult)
            fixed (global::System.Guid* __iidResult_native = &iidResult)
            {
                __retVal = __PInvoke(pmk, grfOpt, __iidResult_native, __ppvResult_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "BindMoniker", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __pmk_native, uint __grfOpt_native, global::System.Guid* __iidResult_native, nint* __ppvResult_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class Marshal
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MarshalNative_GetIsInCooperativeGCModeFunctionPointer", ExactSpelling = true)]
        internal static unsafe extern partial delegate* unmanaged<int> GetIsInCooperativeGCModeFunctionPointer();
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class NativeLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint LoadFromPath(string libraryName, bool throwOnError)
        {
            int __throwOnError_native;
            nint __retVal;
            // Marshal - Convert managed data to native data.
            __throwOnError_native = (int)(throwOnError ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __libraryName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(libraryName))
            {
                __retVal = __PInvoke((ushort*)__libraryName_native, __throwOnError_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "NativeLibrary_LoadFromPath", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __libraryName_native, int __throwOnError_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class NativeLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint LoadByName(string libraryName, global::System.Runtime.CompilerServices.QCallAssembly callingAssembly, bool hasDllImportSearchPathFlag, uint dllImportSearchPathFlag, bool throwOnError)
        {
            int __hasDllImportSearchPathFlag_native;
            int __throwOnError_native;
            nint __retVal;
            // Marshal - Convert managed data to native data.
            __throwOnError_native = (int)(throwOnError ? 1 : 0);
            __hasDllImportSearchPathFlag_native = (int)(hasDllImportSearchPathFlag ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __libraryName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(libraryName))
            {
                __retVal = __PInvoke((ushort*)__libraryName_native, callingAssembly, __hasDllImportSearchPathFlag_native, dllImportSearchPathFlag, __throwOnError_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "NativeLibrary_LoadByName", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __libraryName_native, global::System.Runtime.CompilerServices.QCallAssembly __callingAssembly_native, int __hasDllImportSearchPathFlag_native, uint __dllImportSearchPathFlag_native, int __throwOnError_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class NativeLibrary
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "NativeLibrary_FreeLib", ExactSpelling = true)]
        internal static extern partial void FreeLib(nint handle);
    }
}
namespace System.Runtime.InteropServices
{
    public static unsafe partial class NativeLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint GetSymbol(nint handle, string symbolName, bool throwOnError)
        {
            int __throwOnError_native;
            nint __retVal;
            // Marshal - Convert managed data to native data.
            __throwOnError_native = (int)(throwOnError ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __symbolName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(symbolName))
            {
                __retVal = __PInvoke(handle, (ushort*)__symbolName_native, __throwOnError_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "NativeLibrary_GetSymbol", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __handle_native, ushort* __symbolName_native, int __throwOnError_native);
        }
    }
}
namespace System.Runtime.Intrinsics.X86
{
    public abstract unsafe partial class X86Base
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "X86BaseCpuId", ExactSpelling = true)]
        private static unsafe extern partial void __cpuidex(int* cpuInfo, int functionId, int subFunctionId);
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial nint InitializeAssemblyLoadContext(nint ptrAssemblyLoadContext, bool fRepresentsTPALoadContext, bool isCollectible)
        {
            int __fRepresentsTPALoadContext_native;
            int __isCollectible_native;
            nint __retVal;
            // Marshal - Convert managed data to native data.
            __isCollectible_native = (int)(isCollectible ? 1 : 0);
            __fRepresentsTPALoadContext_native = (int)(fRepresentsTPALoadContext ? 1 : 0);
            {
                __retVal = __PInvoke(ptrAssemblyLoadContext, __fRepresentsTPALoadContext_native, __isCollectible_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_InitializeAssemblyLoadContext", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __ptrAssemblyLoadContext_native, int __fRepresentsTPALoadContext_native, int __isCollectible_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_PrepareForAssemblyLoadContextRelease", ExactSpelling = true)]
        private static extern partial void PrepareForAssemblyLoadContextRelease(nint ptrNativeAssemblyBinder, nint ptrAssemblyLoadContextStrong);
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_LoadFromStream", ExactSpelling = true)]
        private static extern partial void LoadFromStream(nint ptrNativeAssemblyBinder, nint ptrAssemblyArray, int iAssemblyArrayLen, nint ptrSymbols, int iSymbolArrayLen, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly);
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void InternalSetProfileRoot(string directoryPath)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __directoryPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(directoryPath))
            {
                __PInvoke((ushort*)__directoryPath_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MultiCoreJIT_InternalSetProfileRoot", ExactSpelling = true)]
            static extern unsafe void __PInvoke(ushort* __directoryPath_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void InternalStartProfile(string profile, nint ptrNativeAssemblyBinder)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __profile_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(profile))
            {
                __PInvoke((ushort*)__profile_native, ptrNativeAssemblyBinder);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MultiCoreJIT_InternalStartProfile", ExactSpelling = true)]
            static extern unsafe void __PInvoke(ushort* __profile_native, nint __ptrNativeAssemblyBinder_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void LoadFromPath(nint ptrNativeAssemblyBinder, string ilPath, string niPath, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __niPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(niPath))
            fixed (void* __ilPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(ilPath))
            {
                __PInvoke(ptrNativeAssemblyBinder, (ushort*)__ilPath_native, (ushort*)__niPath_native, retAssembly);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_LoadFromPath", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __ptrNativeAssemblyBinder_native, ushort* __ilPath_native, ushort* __niPath_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retAssembly_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool TraceResolvingHandlerInvoked(string assemblyName, string handlerName, string alcName, string resultAssemblyName, string resultAssemblyPath)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __resultAssemblyPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resultAssemblyPath))
            fixed (void* __resultAssemblyName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resultAssemblyName))
            fixed (void* __alcName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(alcName))
            fixed (void* __handlerName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(handlerName))
            fixed (void* __assemblyName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(assemblyName))
            {
                __retVal_native = __PInvoke((ushort*)__assemblyName_native, (ushort*)__handlerName_native, (ushort*)__alcName_native, (ushort*)__resultAssemblyName_native, (ushort*)__resultAssemblyPath_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_TraceResolvingHandlerInvoked", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __assemblyName_native, ushort* __handlerName_native, ushort* __alcName_native, ushort* __resultAssemblyName_native, ushort* __resultAssemblyPath_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool TraceAssemblyResolveHandlerInvoked(string assemblyName, string handlerName, string resultAssemblyName, string resultAssemblyPath)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __resultAssemblyPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resultAssemblyPath))
            fixed (void* __resultAssemblyName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(resultAssemblyName))
            fixed (void* __handlerName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(handlerName))
            fixed (void* __assemblyName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(assemblyName))
            {
                __retVal_native = __PInvoke((ushort*)__assemblyName_native, (ushort*)__handlerName_native, (ushort*)__resultAssemblyName_native, (ushort*)__resultAssemblyPath_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_TraceAssemblyResolveHandlerInvoked", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __assemblyName_native, ushort* __handlerName_native, ushort* __resultAssemblyName_native, ushort* __resultAssemblyPath_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool TraceAssemblyLoadFromResolveHandlerInvoked(string assemblyName, bool isTrackedAssembly, string requestingAssemblyPath, string requestedAssemblyPath)
        {
            int __isTrackedAssembly_native;
            bool __retVal;
            int __retVal_native;
            // Marshal - Convert managed data to native data.
            __isTrackedAssembly_native = (int)(isTrackedAssembly ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __requestedAssemblyPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(requestedAssemblyPath))
            fixed (void* __requestingAssemblyPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(requestingAssemblyPath))
            fixed (void* __assemblyName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(assemblyName))
            {
                __retVal_native = __PInvoke((ushort*)__assemblyName_native, __isTrackedAssembly_native, (ushort*)__requestingAssemblyPath_native, (ushort*)__requestedAssemblyPath_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_TraceAssemblyLoadFromResolveHandlerInvoked", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __assemblyName_native, int __isTrackedAssembly_native, ushort* __requestingAssemblyPath_native, ushort* __requestedAssemblyPath_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool TraceSatelliteSubdirectoryPathProbed(string filePath, int hResult)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __filePath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(filePath))
            {
                __retVal_native = __PInvoke((ushort*)__filePath_native, hResult);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_TraceSatelliteSubdirectoryPathProbed", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __filePath_native, int __hResult_native);
        }
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_LoadFromInMemoryModule", ExactSpelling = true)]
        private static extern partial nint LoadFromInMemoryModuleInternal(nint ptrNativeAssemblyBinder, nint hModule, global::System.Runtime.CompilerServices.ObjectHandleOnStack retAssembly);
    }
}
namespace System.Runtime.Loader
{
    public unsafe partial class AssemblyLoadContext
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "AssemblyNative_GetLoadContextForAssembly", ExactSpelling = true)]
        private static extern partial nint GetLoadContextForAssembly(global::System.Runtime.CompilerServices.QCallAssembly assembly);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_CreateInstanceForAnotherGenericParameter", ExactSpelling = true)]
        private static extern partial void CreateInstanceForAnotherGenericParameter(global::System.Runtime.CompilerServices.QCallTypeHandle baseType, nint* pTypeHandles, int cTypeHandles, global::System.Runtime.CompilerServices.ObjectHandleOnStack instantiatedObject);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_GetActivationInfo", ExactSpelling = true)]
        private static extern partial void GetActivationInfo(global::System.Runtime.CompilerServices.ObjectHandleOnStack pRuntimeType, delegate*<void*, object> * ppfnAllocator, void** pvAllocatorFirstArg, delegate*<object, void> * ppfnCtor, global::Interop.BOOL* pfCtorIsPublic);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_GetConstraints", ExactSpelling = true)]
        private static extern partial void GetConstraints(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.ObjectHandleOnStack types);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "QCall_GetGCHandleForTypeHandle", ExactSpelling = true)]
        private static extern partial nint GetGCHandle(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.InteropServices.GCHandleType type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "QCall_FreeGCHandleForTypeHandle", ExactSpelling = true)]
        private static extern partial nint FreeGCHandle(global::System.Runtime.CompilerServices.QCallTypeHandle typeHandle, nint objHandle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_VerifyInterfaceIsImplemented", ExactSpelling = true)]
        private static extern partial void VerifyInterfaceIsImplemented(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.QCallTypeHandle interfaceHandle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_GetInterfaceMethodImplementation", ExactSpelling = true)]
        private static extern partial global::System.RuntimeMethodHandleInternal GetInterfaceMethodImplementation(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.QCallTypeHandle interfaceHandle, global::System.RuntimeMethodHandleInternal interfaceMethodHandle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool _IsVisible(global::System.Runtime.CompilerServices.QCallTypeHandle typeHandle)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(typeHandle);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_IsVisible", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.QCallTypeHandle __typeHandle_native);
        }
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_ConstructName", ExactSpelling = true)]
        private static extern partial void ConstructName(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.TypeNameFormatFlags formatFlags, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_GetInstantiation", ExactSpelling = true)]
        internal static extern partial void GetInstantiation(global::System.Runtime.CompilerServices.QCallTypeHandle type, global::System.Runtime.CompilerServices.ObjectHandleOnStack types, global::Interop.BOOL fAsRuntimeTypeArray);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_Instantiate", ExactSpelling = true)]
        private static extern partial void Instantiate(global::System.Runtime.CompilerServices.QCallTypeHandle handle, nint* pInst, int numGenericArgs, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_MakeArray", ExactSpelling = true)]
        private static extern partial void MakeArray(global::System.Runtime.CompilerServices.QCallTypeHandle handle, int rank, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_MakeSZArray", ExactSpelling = true)]
        private static extern partial void MakeSZArray(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_MakeByRef", ExactSpelling = true)]
        private static extern partial void MakeByRef(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_MakePointer", ExactSpelling = true)]
        private static extern partial void MakePointer(global::System.Runtime.CompilerServices.QCallTypeHandle handle, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_IsCollectible", ExactSpelling = true)]
        internal static extern partial global::Interop.BOOL IsCollectible(global::System.Runtime.CompilerServices.QCallTypeHandle handle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_GetGenericTypeDefinition", ExactSpelling = true)]
        internal static extern partial void GetGenericTypeDefinition(global::System.Runtime.CompilerServices.QCallTypeHandle type, global::System.Runtime.CompilerServices.ObjectHandleOnStack retType);
    }
}
namespace System
{
    public unsafe partial struct RuntimeTypeHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeTypeHandle_RegisterCollectibleTypeDependency", ExactSpelling = true)]
        private static extern partial void RegisterCollectibleTypeDependency(global::System.Runtime.CompilerServices.QCallTypeHandle type, global::System.Runtime.CompilerServices.QCallAssembly assembly);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_GetFunctionPointer", ExactSpelling = true)]
        internal static extern partial nint GetFunctionPointer(global::System.RuntimeMethodHandleInternal handle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_GetIsCollectible", ExactSpelling = true)]
        internal static extern partial global::Interop.BOOL GetIsCollectible(global::System.RuntimeMethodHandleInternal handle);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_IsCAVisibleFromDecoratedType", ExactSpelling = true)]
        internal static extern partial global::Interop.BOOL IsCAVisibleFromDecoratedType(global::System.Runtime.CompilerServices.QCallTypeHandle attrTypeHandle, global::System.RuntimeMethodHandleInternal attrCtor, global::System.Runtime.CompilerServices.QCallTypeHandle sourceTypeHandle, global::System.Runtime.CompilerServices.QCallModule sourceModule);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_ConstructInstantiation", ExactSpelling = true)]
        private static extern partial void ConstructInstantiation(global::System.RuntimeMethodHandleInternal method, global::System.TypeNameFormatFlags format, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_GetMethodInstantiation", ExactSpelling = true)]
        private static extern partial void GetMethodInstantiation(global::System.RuntimeMethodHandleInternal method, global::System.Runtime.CompilerServices.ObjectHandleOnStack types, global::Interop.BOOL fAsRuntimeTypeArray);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_GetTypicalMethodDefinition", ExactSpelling = true)]
        private static extern partial void GetTypicalMethodDefinition(global::System.RuntimeMethodHandleInternal method, global::System.Runtime.CompilerServices.ObjectHandleOnStack outMethod);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_StripMethodInstantiation", ExactSpelling = true)]
        private static extern partial void StripMethodInstantiation(global::System.RuntimeMethodHandleInternal method, global::System.Runtime.CompilerServices.ObjectHandleOnStack outMethod);
    }
}
namespace System
{
    public unsafe partial struct RuntimeMethodHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "RuntimeMethodHandle_Destroy", ExactSpelling = true)]
        internal static extern partial void Destroy(global::System.RuntimeMethodHandleInternal method);
    }
}
namespace System
{
    public unsafe partial struct ModuleHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleHandle_ResolveType", ExactSpelling = true)]
        private static extern partial void ResolveType(global::System.Runtime.CompilerServices.QCallModule module, int typeToken, nint* typeInstArgs, int typeInstCount, nint* methodInstArgs, int methodInstCount, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct ModuleHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleHandle_ResolveMethod", ExactSpelling = true)]
        private static extern partial global::System.RuntimeMethodHandleInternal ResolveMethod(global::System.Runtime.CompilerServices.QCallModule module, int methodToken, nint* typeInstArgs, int typeInstCount, nint* methodInstArgs, int methodInstCount);
    }
}
namespace System
{
    public unsafe partial struct ModuleHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleHandle_ResolveField", ExactSpelling = true)]
        private static extern partial void ResolveField(global::System.Runtime.CompilerServices.QCallModule module, int fieldToken, nint* typeInstArgs, int typeInstCount, nint* methodInstArgs, int methodInstCount, global::System.Runtime.CompilerServices.ObjectHandleOnStack retField);
    }
}
namespace System
{
    public unsafe partial struct ModuleHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleHandle_GetModuleType", ExactSpelling = true)]
        internal static extern partial void GetModuleType(global::System.Runtime.CompilerServices.QCallModule handle, global::System.Runtime.CompilerServices.ObjectHandleOnStack type);
    }
}
namespace System
{
    public unsafe partial struct ModuleHandle
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ModuleHandle_GetPEKind", ExactSpelling = true)]
        private static extern partial void GetPEKind(global::System.Runtime.CompilerServices.QCallModule handle, int* peKind, int* machine);
    }
}
namespace System
{
    internal readonly unsafe partial struct MdUtf8String
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool EqualsCaseInsensitive(void* szLhs, void* szRhs, int cSz)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(szLhs, szRhs, cSz);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "MdUtf8String_EqualsCaseInsensitive", ExactSpelling = true)]
            static extern unsafe int __PInvoke(void* __szLhs_native, void* __szRhs_native, int __cSz_native);
        }
    }
}
namespace System.StubHelpers
{
    internal static unsafe partial class InterfaceMarshaler
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "InterfaceMarshaler__ClearNative", ExactSpelling = true)]
        internal static extern partial void ClearNative(nint pUnk);
    }
}
namespace System.Threading
{
    public static unsafe partial class Interlocked
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "Interlocked_MemoryBarrierProcessWide", ExactSpelling = true)]
        private static extern partial void _MemoryBarrierProcessWide();
    }
}
namespace System.Threading
{
    public static unsafe partial class Monitor
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ObjectNative_GetMonitorLockContentionCount", ExactSpelling = true)]
        private static extern partial long GetLockContentionCount();
    }
}
namespace System.Threading
{
    public sealed unsafe partial class Thread
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_Start", ExactSpelling = true)]
        private static unsafe extern partial void StartInternal(global::System.Threading.ThreadHandle t, int stackSize, int priority, char* pThreadName);
    }
}
namespace System.Threading
{
    public sealed unsafe partial class Thread
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_YieldThread", ExactSpelling = true)]
        private static extern partial global::Interop.BOOL YieldInternal();
    }
}
namespace System.Threading
{
    public sealed unsafe partial class Thread
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void InformThreadNameChange(global::System.Threading.ThreadHandle t, string name, int len)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                __PInvoke(t, (ushort*)__name_native, len);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_InformThreadNameChange", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::System.Threading.ThreadHandle __t_native, ushort* __name_native, int __len_native);
        }
    }
}
namespace System.Threading
{
    public sealed unsafe partial class Thread
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ThreadNative_GetCurrentOSThreadId", ExactSpelling = true)]
        private static extern partial ulong GetCurrentOSThreadId();
    }
}
namespace System
{
    public unsafe partial class TypeLoadException
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "GetTypeLoadExceptionMessage", ExactSpelling = true)]
        private static extern partial void GetTypeLoadExceptionMessage(int resourceId, global::System.Runtime.CompilerServices.StringHandleOnStack retString);
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool TryGetComInstanceInternal(global::System.Runtime.CompilerServices.ObjectHandleOnStack wrapperMaybe, out nint externalComObject)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out externalComObject);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __externalComObject_native = &externalComObject)
            {
                __retVal_native = __PInvoke(wrapperMaybe, __externalComObject_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_TryGetComInstance", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.ObjectHandleOnStack __wrapperMaybe_native, nint* __externalComObject_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool TryGetObjectInternal(nint wrapperMaybe, global::System.Runtime.CompilerServices.ObjectHandleOnStack instance)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(wrapperMaybe, instance);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_TryGetObject", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __wrapperMaybe_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __instance_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool TryGetOrCreateComInterfaceForObjectInternal(global::System.Runtime.CompilerServices.ObjectHandleOnStack comWrappersImpl, long wrapperId, global::System.Runtime.CompilerServices.ObjectHandleOnStack instance, global::System.Runtime.InteropServices.CreateComInterfaceFlags flags, out nint retValue)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out retValue);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __retValue_native = &retValue)
            {
                __retVal_native = __PInvoke(comWrappersImpl, wrapperId, instance, flags, __retValue_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_TryGetOrCreateComInterfaceForObject", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.ObjectHandleOnStack __comWrappersImpl_native, long __wrapperId_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __instance_native, global::System.Runtime.InteropServices.CreateComInterfaceFlags __flags_native, nint* __retValue_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool TryGetOrCreateObjectForComInstanceInternal(global::System.Runtime.CompilerServices.ObjectHandleOnStack comWrappersImpl, long wrapperId, nint externalComObject, nint innerMaybe, global::System.Runtime.InteropServices.CreateObjectFlags flags, global::System.Runtime.CompilerServices.ObjectHandleOnStack wrapper, global::System.Runtime.CompilerServices.ObjectHandleOnStack retValue)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(comWrappersImpl, wrapperId, externalComObject, innerMaybe, flags, wrapper, retValue);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_TryGetOrCreateObjectForComInstance", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Runtime.CompilerServices.ObjectHandleOnStack __comWrappersImpl_native, long __wrapperId_native, nint __externalComObject_native, nint __innerMaybe_native, global::System.Runtime.InteropServices.CreateObjectFlags __flags_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __wrapper_native, global::System.Runtime.CompilerServices.ObjectHandleOnStack __retValue_native);
        }
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_SetGlobalInstanceRegisteredForTrackerSupport", ExactSpelling = true)]
        private static extern partial void SetGlobalInstanceRegisteredForTrackerSupport(long id);
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_SetGlobalInstanceRegisteredForMarshalling", ExactSpelling = true)]
        private static extern partial void SetGlobalInstanceRegisteredForMarshalling(long id);
    }
}
namespace System.Runtime.InteropServices
{
    public abstract unsafe partial class ComWrappers
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial void GetIUnknownImplInternal(out nint fpQueryInterface, out nint fpAddRef, out nint fpRelease)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out fpQueryInterface);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out fpAddRef);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out fpRelease);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __fpRelease_native = &fpRelease)
            fixed (nint* __fpAddRef_native = &fpAddRef)
            fixed (nint* __fpQueryInterface_native = &fpQueryInterface)
            {
                __PInvoke(__fpQueryInterface_native, __fpAddRef_native, __fpRelease_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("QCall", EntryPoint = "ComWrappers_GetIUnknownImpl", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint* __fpQueryInterface_native, nint* __fpAddRef_native, nint* __fpRelease_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class OleAut32
    {
        [System.Runtime.InteropServices.DllImportAttribute("oleaut32.dll", EntryPoint = "VariantClear", ExactSpelling = true)]
        internal static extern partial void VariantClear(nint variant);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetCalendars(string localeName, global::System.Globalization.CalendarId[] calendars, int calendarsCapacity)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __calendars_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::System.Globalization.CalendarId, global::System.Globalization.CalendarId>.ManagedToUnmanagedIn.GetPinnableReference(calendars))
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal = __PInvoke((ushort*)__localeName_native, (global::System.Globalization.CalendarId*)__calendars_native, calendarsCapacity);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetCalendars", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, global::System.Globalization.CalendarId* __calendars_native, int __calendarsCapacity_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Interop.Globalization.ResultCode GetCalendarInfo(string localeName, global::System.Globalization.CalendarId calendarId, global::System.Globalization.CalendarDataType calendarDataType, char* result, int resultCapacity)
        {
            global::Interop.Globalization.ResultCode __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal = __PInvoke((ushort*)__localeName_native, calendarId, calendarDataType, result, resultCapacity);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetCalendarInfo", ExactSpelling = true)]
            static extern unsafe global::Interop.Globalization.ResultCode __PInvoke(ushort* __localeName_native, global::System.Globalization.CalendarId __calendarId_native, global::System.Globalization.CalendarDataType __calendarDataType_native, char* __result_native, int __resultCapacity_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial bool EnumCalendarInfo(nint callback, string localeName, global::System.Globalization.CalendarId calendarId, global::System.Globalization.CalendarDataType calendarDataType, nint context)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke(callback, (ushort*)__localeName_native, calendarId, calendarDataType, context);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_EnumCalendarInfo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __callback_native, ushort* __localeName_native, global::System.Globalization.CalendarId __calendarId_native, global::System.Globalization.CalendarDataType __calendarDataType_native, nint __context_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLatestJapaneseEra", ExactSpelling = true)]
        internal static extern partial int GetLatestJapaneseEra();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetJapaneseEraStartDate(int era, out int startYear, out int startMonth, out int startDay)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out startYear);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out startMonth);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out startDay);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __startDay_native = &startDay)
            fixed (int* __startMonth_native = &startMonth)
            fixed (int* __startYear_native = &startYear)
            {
                __retVal_native = __PInvoke(era, __startYear_native, __startMonth_native, __startDay_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetJapaneseEraStartDate", ExactSpelling = true)]
            static extern unsafe int __PInvoke(int __era_native, int* __startYear_native, int* __startMonth_native, int* __startDay_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial void ChangeCase(char* src, int srcLen, char* dstBuffer, int dstBufferCapacity, bool bToUpper)
        {
            int __bToUpper_native;
            // Marshal - Convert managed data to native data.
            __bToUpper_native = (int)(bToUpper ? 1 : 0);
            {
                __PInvoke(src, srcLen, dstBuffer, dstBufferCapacity, __bToUpper_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_ChangeCase", ExactSpelling = true)]
            [return: System.Runtime.InteropServices.MarshalAsAttribute((System.Runtime.InteropServices.UnmanagedType)2)]
            static extern unsafe void __PInvoke(char* __src_native, int __srcLen_native, char* __dstBuffer_native, int __dstBufferCapacity_native, int __bToUpper_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial void ChangeCaseInvariant(char* src, int srcLen, char* dstBuffer, int dstBufferCapacity, bool bToUpper)
        {
            int __bToUpper_native;
            // Marshal - Convert managed data to native data.
            __bToUpper_native = (int)(bToUpper ? 1 : 0);
            {
                __PInvoke(src, srcLen, dstBuffer, dstBufferCapacity, __bToUpper_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_ChangeCaseInvariant", ExactSpelling = true)]
            [return: System.Runtime.InteropServices.MarshalAsAttribute((System.Runtime.InteropServices.UnmanagedType)2)]
            static extern unsafe void __PInvoke(char* __src_native, int __srcLen_native, char* __dstBuffer_native, int __dstBufferCapacity_native, int __bToUpper_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial void ChangeCaseTurkish(char* src, int srcLen, char* dstBuffer, int dstBufferCapacity, bool bToUpper)
        {
            int __bToUpper_native;
            // Marshal - Convert managed data to native data.
            __bToUpper_native = (int)(bToUpper ? 1 : 0);
            {
                __PInvoke(src, srcLen, dstBuffer, dstBufferCapacity, __bToUpper_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_ChangeCaseTurkish", ExactSpelling = true)]
            [return: System.Runtime.InteropServices.MarshalAsAttribute((System.Runtime.InteropServices.UnmanagedType)2)]
            static extern unsafe void __PInvoke(char* __src_native, int __srcLen_native, char* __dstBuffer_native, int __dstBufferCapacity_native, int __bToUpper_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_InitOrdinalCasingPage", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial void InitOrdinalCasingPage(int pageNumber, char* pTarget);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Interop.Globalization.ResultCode GetSortHandle(string localeName, out nint sortHandle)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out sortHandle);
            byte* __localeName_native = default;
            global::Interop.Globalization.ResultCode __retVal = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __localeName_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __localeName_native__marshaller.FromManaged(localeName, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (nint* __sortHandle_native = &sortHandle)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __localeName_native = __localeName_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__localeName_native, __sortHandle_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __localeName_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetSortHandle", ExactSpelling = true)]
            static extern unsafe global::Interop.Globalization.ResultCode __PInvoke(byte* __localeName_native, nint* __sortHandle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_CloseSortHandle", ExactSpelling = true)]
        internal static extern partial void CloseSortHandle(nint handle);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_CompareString", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int CompareString(nint sortHandle, char* lpStr1, int cwStr1Len, char* lpStr2, int cwStr2Len, global::System.Globalization.CompareOptions options);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_IndexOf", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int IndexOf(nint sortHandle, char* target, int cwTargetLength, char* pSource, int cwSourceLength, global::System.Globalization.CompareOptions options, int* matchLengthPtr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_LastIndexOf", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int LastIndexOf(nint sortHandle, char* target, int cwTargetLength, char* pSource, int cwSourceLength, global::System.Globalization.CompareOptions options, int* matchLengthPtr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool StartsWith(nint sortHandle, char* target, int cwTargetLength, char* source, int cwSourceLength, global::System.Globalization.CompareOptions options, int* matchedLength)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sortHandle, target, cwTargetLength, source, cwSourceLength, options, matchedLength);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_StartsWith", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __sortHandle_native, char* __target_native, int __cwTargetLength_native, char* __source_native, int __cwSourceLength_native, global::System.Globalization.CompareOptions __options_native, int* __matchedLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool EndsWith(nint sortHandle, char* target, int cwTargetLength, char* source, int cwSourceLength, global::System.Globalization.CompareOptions options, int* matchedLength)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(sortHandle, target, cwTargetLength, source, cwSourceLength, options, matchedLength);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_EndsWith", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __sortHandle_native, char* __target_native, int __cwTargetLength_native, char* __source_native, int __cwSourceLength_native, global::System.Globalization.CompareOptions __options_native, int* __matchedLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool StartsWith(nint sortHandle, string target, int cwTargetLength, string source, int cwSourceLength, global::System.Globalization.CompareOptions options)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __source_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(source))
            fixed (void* __target_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(target))
            {
                __retVal_native = __PInvoke(sortHandle, (ushort*)__target_native, cwTargetLength, (ushort*)__source_native, cwSourceLength, options);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_StartsWith", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __sortHandle_native, ushort* __target_native, int __cwTargetLength_native, ushort* __source_native, int __cwSourceLength_native, global::System.Globalization.CompareOptions __options_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool EndsWith(nint sortHandle, string target, int cwTargetLength, string source, int cwSourceLength, global::System.Globalization.CompareOptions options)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __source_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(source))
            fixed (void* __target_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(target))
            {
                __retVal_native = __PInvoke(sortHandle, (ushort*)__target_native, cwTargetLength, (ushort*)__source_native, cwSourceLength, options);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_EndsWith", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __sortHandle_native, ushort* __target_native, int __cwTargetLength_native, ushort* __source_native, int __cwSourceLength_native, global::System.Globalization.CompareOptions __options_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetSortKey", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int GetSortKey(nint sortHandle, char* str, int strLength, byte* sortKey, int sortKeyLength, global::System.Globalization.CompareOptions options);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetSortVersion", ExactSpelling = true)]
        internal static extern partial int GetSortVersion(nint sortHandle);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_LoadICU", ExactSpelling = true)]
        internal static extern partial int LoadICU();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void InitICUFunctions(nint icuuc, nint icuin, string version, string suffix)
        {
            byte* __version_native = default;
            byte* __suffix_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __suffix_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __version_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __suffix_native__marshaller.FromManaged(suffix, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __version_native__marshaller.FromManaged(version, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __suffix_native = __suffix_native__marshaller.ToUnmanaged();
                    __version_native = __version_native__marshaller.ToUnmanaged();
                    __PInvoke(icuuc, icuin, __version_native, __suffix_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __suffix_native__marshaller.Free();
                __version_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_InitICUFunctions", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __icuuc_native, nint __icuin_native, byte* __version_native, byte* __suffix_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetICUVersion", ExactSpelling = true)]
        internal static extern partial int GetICUVersion();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_ToAscii", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int ToAscii(uint flags, char* src, int srcLen, char* dstBuffer, int dstBufferCapacity);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_ToUnicode", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int ToUnicode(uint flags, char* src, int srcLen, char* dstBuffer, int dstBufferCapacity);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetLocaleName(string localeName, char* value, int valueLength)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native, value, valueLength);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocaleName", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, char* __value_native, int __valueLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetLocaleInfoString(string localeName, uint localeStringData, char* value, int valueLength, string uiLocaleName)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __uiLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(uiLocaleName))
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native, localeStringData, value, valueLength, (ushort*)__uiLocaleName_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocaleInfoString", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, uint __localeStringData_native, char* __value_native, int __valueLength_native, ushort* __uiLocaleName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetDefaultLocaleName(char* value, int valueLength)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(value, valueLength);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetDefaultLocaleName", ExactSpelling = true)]
            static extern unsafe int __PInvoke(char* __value_native, int __valueLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool IsPredefinedLocale(string localeName)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_IsPredefinedLocale", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetLocaleTimeFormat(string localeName, bool shortFormat, char* value, int valueLength)
        {
            int __shortFormat_native;
            bool __retVal;
            int __retVal_native;
            // Marshal - Convert managed data to native data.
            __shortFormat_native = (int)(shortFormat ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native, __shortFormat_native, value, valueLength);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocaleTimeFormat", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, int __shortFormat_native, char* __value_native, int __valueLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetLocaleInfoInt(string localeName, uint localeNumberData, ref int value)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __value_native = &value)
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native, localeNumberData, __value_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocaleInfoInt", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, uint __localeNumberData_native, int* __value_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetLocaleInfoGroupingSizes(string localeName, uint localeGroupingData, ref int primaryGroupSize, ref int secondaryGroupSize)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __secondaryGroupSize_native = &secondaryGroupSize)
            fixed (int* __primaryGroupSize_native = &primaryGroupSize)
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke((ushort*)__localeName_native, localeGroupingData, __primaryGroupSize_native, __secondaryGroupSize_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocaleInfoGroupingSizes", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __localeName_native, uint __localeGroupingData_native, int* __primaryGroupSize_native, int* __secondaryGroupSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetLocales(char[] value, int valueLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __value_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(value))
            {
                __retVal = __PInvoke((char*)__value_native, valueLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetLocales", ExactSpelling = true)]
            static extern unsafe int __PInvoke(char* __value_native, int __valueLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_IsNormalized", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int IsNormalized(global::System.Text.NormalizationForm normalizationForm, char* src, int srcLen);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_NormalizeString", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int NormalizeString(global::System.Text.NormalizationForm normalizationForm, char* src, int srcLen, char* dstBuffer, int dstBufferCapacity);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Interop.Globalization.ResultCode GetTimeZoneDisplayName(string localeName, string timeZoneId, global::Interop.Globalization.TimeZoneDisplayNameType type, char* result, int resultLength)
        {
            global::Interop.Globalization.ResultCode __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __timeZoneId_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(timeZoneId))
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal = __PInvoke((ushort*)__localeName_native, (ushort*)__timeZoneId_native, type, result, resultLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_GetTimeZoneDisplayName", ExactSpelling = true)]
            static extern unsafe global::Interop.Globalization.ResultCode __PInvoke(ushort* __localeName_native, ushort* __timeZoneId_native, global::Interop.Globalization.TimeZoneDisplayNameType __type_native, char* __result_native, int __resultLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WindowsIdToIanaId(string windowsId, nint region, char* ianaId, int ianaIdLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __windowsId_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(windowsId))
            {
                __retVal = __PInvoke((ushort*)__windowsId_native, region, ianaId, ianaIdLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_WindowsIdToIanaId", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __windowsId_native, nint __region_native, char* __ianaId_native, int __ianaIdLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Globalization
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int IanaIdToWindowsId(string ianaId, char* windowsId, int windowsIdLength)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __ianaId_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(ianaId))
            {
                __retVal = __PInvoke((ushort*)__ianaId_native, windowsId, windowsIdLength);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("System.Globalization.Native", EntryPoint = "GlobalizationNative_IanaIdToWindowsId", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __ianaId_native, char* __windowsId_native, int __windowsIdLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LCIDToLocaleName", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static unsafe extern partial int LCIDToLocaleName(int locale, char* pLocaleName, int cchName, uint dwFlags);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int LocaleNameToLCID(string lpName, uint dwFlags)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpName))
            {
                __retVal = __PInvoke((ushort*)__lpName_native, dwFlags);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LocaleNameToLCID", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpName_native, uint __dwFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int LCMapStringEx(string lpLocaleName, uint dwMapFlags, char* lpSrcStr, int cchSrc, void* lpDestStr, int cchDest, void* lpVersionInformation, void* lpReserved, nint sortHandle)
        {
            int __lastError;
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__lpLocaleName_native, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LCMapStringEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpLocaleName_native, uint __dwMapFlags_native, char* __lpSrcStr_native, int __cchSrc_native, void* __lpDestStr_native, int __cchDest_native, void* __lpVersionInformation_native, void* __lpReserved_native, nint __sortHandle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int FindNLSStringEx(char* lpLocaleName, uint dwFindNLSStringFlags, char* lpStringSource, int cchSource, char* lpStringValue, int cchValue, int* pcchFound, void* lpVersionInformation, void* lpReserved, nint sortHandle)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FindNLSStringEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(char* __lpLocaleName_native, uint __dwFindNLSStringFlags_native, char* __lpStringSource_native, int __cchSource_native, char* __lpStringValue_native, int __cchValue_native, int* __pcchFound_native, void* __lpVersionInformation_native, void* __lpReserved_native, nint __sortHandle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CompareStringEx", ExactSpelling = true)]
        internal static unsafe extern partial int CompareStringEx(char* lpLocaleName, uint dwCmpFlags, char* lpString1, int cchCount1, char* lpString2, int cchCount2, void* lpVersionInformation, void* lpReserved, nint lParam);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int CompareStringOrdinal(char* lpString1, int cchCount1, char* lpString2, int cchCount2, bool bIgnoreCase)
        {
            int __bIgnoreCase_native;
            int __retVal;
            // Marshal - Convert managed data to native data.
            __bIgnoreCase_native = (int)(bIgnoreCase ? 1 : 0);
            {
                __retVal = __PInvoke(lpString1, cchCount1, lpString2, cchCount2, __bIgnoreCase_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CompareStringOrdinal", ExactSpelling = true)]
            static extern unsafe int __PInvoke(char* __lpString1_native, int __cchCount1_native, char* __lpString2_native, int __cchCount2_native, int __bIgnoreCase_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int FindStringOrdinal(uint dwFindStringOrdinalFlags, char* lpStringSource, int cchSource, char* lpStringValue, int cchValue, global::Interop.BOOL bIgnoreCase)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FindStringOrdinal", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __dwFindStringOrdinalFlags_native, char* __lpStringSource_native, int __cchSource_native, char* __lpStringValue_native, int __cchValue_native, global::Interop.BOOL __bIgnoreCase_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool IsNLSDefinedString(int Function, uint dwFlags, nint lpVersionInformation, char* lpString, int cchStr)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(Function, dwFlags, lpVersionInformation, lpString, cchStr);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "IsNLSDefinedString", ExactSpelling = true)]
            static extern unsafe int __PInvoke(int __Function_native, uint __dwFlags_native, nint __lpVersionInformation_native, char* __lpString_native, int __cchStr_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetUserPreferredUILanguages", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL GetUserPreferredUILanguages(uint dwFlags, uint* pulNumLanguages, char* pwszLanguagesBuffer, uint* pcchLanguagesBuffer);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int GetLocaleInfoEx(string lpLocaleName, uint LCType, void* lpLCData, int cchData)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                __retVal = __PInvoke((ushort*)__lpLocaleName_native, LCType, lpLCData, cchData);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetLocaleInfoEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpLocaleName_native, uint __LCType_native, void* __lpLCData_native, int __cchData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool EnumSystemLocalesEx(delegate* unmanaged<char*, uint, void*, global::Interop.BOOL> lpLocaleEnumProcEx, uint dwFlags, void* lParam, nint reserved)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(lpLocaleEnumProcEx, dwFlags, lParam, reserved);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "EnumSystemLocalesEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(delegate* unmanaged<char*, uint, void*, global::Interop.BOOL> __lpLocaleEnumProcEx_native, uint __dwFlags_native, void* __lParam_native, nint __reserved_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool EnumTimeFormatsEx(delegate* unmanaged<char*, void*, global::Interop.BOOL> lpTimeFmtEnumProcEx, string lpLocaleName, uint dwFlags, void* lParam)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                __retVal_native = __PInvoke(lpTimeFmtEnumProcEx, (ushort*)__lpLocaleName_native, dwFlags, lParam);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "EnumTimeFormatsEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(delegate* unmanaged<char*, void*, global::Interop.BOOL> __lpTimeFmtEnumProcEx_native, ushort* __lpLocaleName_native, uint __dwFlags_native, void* __lParam_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetCalendarInfoEx(string lpLocaleName, uint Calendar, nint lpReserved, uint CalType, nint lpCalData, int cchData, out int lpValue)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpValue);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __lpValue_native = &lpValue)
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                __retVal = __PInvoke((ushort*)__lpLocaleName_native, Calendar, lpReserved, CalType, lpCalData, cchData, __lpValue_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCalendarInfoEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpLocaleName_native, uint __Calendar_native, nint __lpReserved_native, uint __CalType_native, nint __lpCalData_native, int __cchData_native, int* __lpValue_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetCalendarInfoEx(string lpLocaleName, uint Calendar, nint lpReserved, uint CalType, nint lpCalData, int cchData, nint lpValue)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                __retVal = __PInvoke((ushort*)__lpLocaleName_native, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCalendarInfoEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpLocaleName_native, uint __Calendar_native, nint __lpReserved_native, uint __CalType_native, nint __lpCalData_native, int __cchData_native, nint __lpValue_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetUserGeoID", ExactSpelling = true)]
        internal static extern partial int GetUserGeoID(int geoClass);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetGeoInfoW", ExactSpelling = true)]
        internal static unsafe extern partial int GetGeoInfo(int location, int geoType, char* lpGeoData, int cchData, int LangId);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool EnumCalendarInfoExEx(delegate* unmanaged<char*, uint, nint, void*, global::Interop.BOOL> pCalInfoEnumProcExEx, string lpLocaleName, uint Calendar, string lpReserved, uint CalType, void* lParam)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpReserved_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpReserved))
            fixed (void* __lpLocaleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpLocaleName))
            {
                __retVal_native = __PInvoke(pCalInfoEnumProcExEx, (ushort*)__lpLocaleName_native, Calendar, (ushort*)__lpReserved_native, CalType, lParam);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "EnumCalendarInfoExEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(delegate* unmanaged<char*, uint, nint, void*, global::Interop.BOOL> __pCalInfoEnumProcExEx_native, ushort* __lpLocaleName_native, uint __Calendar_native, ushort* __lpReserved_native, uint __CalType_native, void* __lParam_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetNLSVersionEx(int function, string localeName, global::Interop.Kernel32.NlsVersionInfoEx* lpVersionInformation)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __localeName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(localeName))
            {
                __retVal_native = __PInvoke(function, (ushort*)__localeName_native, lpVersionInformation);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetNLSVersionEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(int __function_native, ushort* __localeName_native, global::Interop.Kernel32.NlsVersionInfoEx* __lpVersionInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int ResolveLocaleName(string lpNameToResolve, char* lpLocaleName, int cchLocaleName)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpNameToResolve_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpNameToResolve))
            {
                __retVal = __PInvoke((ushort*)__lpNameToResolve_native, lpLocaleName, cchLocaleName);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ResolveLocaleName", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpNameToResolve_native, char* __lpLocaleName_native, int __cchLocaleName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Normaliz
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int IdnToAscii(uint dwFlags, char* lpUnicodeCharStr, int cchUnicodeChar, char* lpASCIICharStr, int cchASCIIChar)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Normaliz.dll", EntryPoint = "IdnToAscii", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __dwFlags_native, char* __lpUnicodeCharStr_native, int __cchUnicodeChar_native, char* __lpASCIICharStr_native, int __cchASCIIChar_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Normaliz
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int IdnToUnicode(uint dwFlags, char* lpASCIICharStr, int cchASCIIChar, char* lpUnicodeCharStr, int cchUnicodeChar)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Normaliz.dll", EntryPoint = "IdnToUnicode", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __dwFlags_native, char* __lpASCIICharStr_native, int __cchASCIIChar_native, char* __lpUnicodeCharStr_native, int __cchUnicodeChar_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Normaliz
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Interop.BOOL IsNormalizedString(global::System.Text.NormalizationForm normForm, char* source, int length)
        {
            int __lastError;
            global::Interop.BOOL __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(normForm, source, length);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Normaliz.dll", EntryPoint = "IsNormalizedString", ExactSpelling = true)]
            static extern unsafe global::Interop.BOOL __PInvoke(global::System.Text.NormalizationForm __normForm_native, char* __source_native, int __length_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Normaliz
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int NormalizeString(global::System.Text.NormalizationForm normForm, char* source, int sourceLength, char* destination, int destinationLength)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(normForm, source, sourceLength, destination, destinationLength);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Normaliz.dll", EntryPoint = "NormalizeString", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Text.NormalizationForm __normForm_native, char* __source_native, int __sourceLength_native, char* __destination_native, int __destinationLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class HostPolicy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int corehost_resolve_component_dependencies(string componentMainAssemblyPath, global::Interop.HostPolicy.corehost_resolve_component_dependencies_result_fn result)
        {
            System.IntPtr __result_native;
            int __retVal;
            // Marshal - Convert managed data to native data.
            __result_native = result != null ? System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(result) : default;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __componentMainAssemblyPath_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(componentMainAssemblyPath))
            {
                __retVal = __PInvoke((ushort*)__componentMainAssemblyPath_native, __result_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.GC.KeepAlive(result);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("hostpolicy", EntryPoint = "corehost_resolve_component_dependencies", ExactSpelling = true)]
            [System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvCdecl) })]
            static extern unsafe int __PInvoke(ushort* __componentMainAssemblyPath_native, System.IntPtr __result_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class HostPolicy
    {
        [System.Runtime.InteropServices.DllImportAttribute("hostpolicy", EntryPoint = "corehost_set_error_writer", ExactSpelling = true)]
        internal static extern partial nint corehost_set_error_writer(nint errorWriter);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool EncryptFilePrivate(string lpFileName)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpFileName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__lpFileName_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EncryptFileW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpFileName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool DecryptFileFilePrivate(string lpFileName, int dwReserved)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpFileName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__lpFileName_native, dwReserved);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "DecryptFileW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpFileName_native, int __dwReserved_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int EventActivityIdControl(global::Interop.Advapi32.ActivityControl ControlCode, ref global::System.Guid ActivityId)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::System.Guid* __ActivityId_native = &ActivityId)
            {
                __retVal = __PInvoke(ControlCode, __ActivityId_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventActivityIdControl", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::Interop.Advapi32.ActivityControl __ControlCode_native, global::System.Guid* __ActivityId_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventRegister", ExactSpelling = true)]
        internal static unsafe extern partial uint EventRegister(global::System.Guid* providerId, delegate* unmanaged<global::System.Guid*, int, byte, long, long, global::Interop.Advapi32.EVENT_FILTER_DESCRIPTOR*, void*, void> enableCallback, void* callbackContext, long* registrationHandle);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventSetInformation", ExactSpelling = true)]
        internal static unsafe extern partial int EventSetInformation(long registrationHandle, global::Interop.Advapi32.EVENT_INFO_CLASS informationClass, void* eventInformation, uint informationLength);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int EnumerateTraceGuidsEx(global::Interop.Advapi32.TRACE_QUERY_INFO_CLASS TraceQueryInfoClass, void* InBuffer, int InBufferSize, void* OutBuffer, int OutBufferSize, out int ReturnLength)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ReturnLength);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __ReturnLength_native = &ReturnLength)
            {
                __retVal = __PInvoke(TraceQueryInfoClass, InBuffer, InBufferSize, OutBuffer, OutBufferSize, __ReturnLength_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EnumerateTraceGuidsEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::Interop.Advapi32.TRACE_QUERY_INFO_CLASS __TraceQueryInfoClass_native, void* __InBuffer_native, int __InBufferSize_native, void* __OutBuffer_native, int __OutBufferSize_native, int* __ReturnLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventUnregister", ExactSpelling = true)]
        internal static extern partial uint EventUnregister(long registrationHandle);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int EventWriteString(long registrationHandle, byte level, long keyword, string msg)
        {
            byte* __msg_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __msg_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __msg_native__marshaller.FromManaged(msg, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __msg_native = __msg_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(registrationHandle, level, keyword, __msg_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __msg_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventWriteString", ExactSpelling = true)]
            static extern unsafe int __PInvoke(long __registrationHandle_native, byte __level_native, long __keyword_native, byte* __msg_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial int EventWriteTransfer_PInvoke(long registrationHandle, in global::System.Diagnostics.Tracing.EventDescriptor eventDescriptor, global::System.Guid* activityId, global::System.Guid* relatedActivityId, int userDataCount, global::System.Diagnostics.Tracing.EventProvider.EventData* userData)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::System.Diagnostics.Tracing.EventDescriptor* __eventDescriptor_native = &eventDescriptor)
            {
                __retVal = __PInvoke(registrationHandle, __eventDescriptor_native, activityId, relatedActivityId, userDataCount, userData);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "EventWriteTransfer", ExactSpelling = true)]
            static extern unsafe int __PInvoke(long __registrationHandle_native, global::System.Diagnostics.Tracing.EventDescriptor* __eventDescriptor_native, global::System.Guid* __activityId_native, global::System.Guid* __relatedActivityId_native, int __userDataCount_native, global::System.Diagnostics.Tracing.EventProvider.EventData* __userData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetTokenInformation(global::Microsoft.Win32.SafeHandles.SafeTokenHandle TokenHandle, global::Interop.Advapi32.TOKEN_INFORMATION_CLASS TokenInformationClass, void* TokenInformation, uint TokenInformationLength, out uint ReturnLength)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ReturnLength);
            nint __TokenHandle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeTokenHandle>.ManagedToUnmanagedIn __TokenHandle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __TokenHandle_native__marshaller.FromManaged(TokenHandle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (uint* __ReturnLength_native = &ReturnLength)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __TokenHandle_native = __TokenHandle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__TokenHandle_native, TokenInformationClass, TokenInformation, TokenInformationLength, __ReturnLength_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __TokenHandle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "GetTokenInformation", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __TokenHandle_native, global::Interop.Advapi32.TOKEN_INFORMATION_CLASS __TokenInformationClass_native, void* __TokenInformation_native, uint __TokenInformationLength_native, uint* __ReturnLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool LookupAccountNameW(string lpSystemName, ref char lpAccountName, ref byte Sid, ref uint cbSid, ref char ReferencedDomainName, ref uint cchReferencedDomainName, out uint peUse)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out peUse);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (uint* __peUse_native = &peUse)
            fixed (uint* __cchReferencedDomainName_native = &cchReferencedDomainName)
            fixed (char* __ReferencedDomainName_native = &ReferencedDomainName)
            fixed (uint* __cbSid_native = &cbSid)
            fixed (byte* __Sid_native = &Sid)
            fixed (char* __lpAccountName_native = &lpAccountName)
            fixed (void* __lpSystemName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSystemName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__lpSystemName_native, __lpAccountName_native, __Sid_native, __cbSid_native, __ReferencedDomainName_native, __cchReferencedDomainName_native, __peUse_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "LookupAccountNameW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpSystemName_native, char* __lpAccountName_native, byte* __Sid_native, uint* __cbSid_native, char* __ReferencedDomainName_native, uint* __cchReferencedDomainName_native, uint* __peUse_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool OpenProcessToken(nint ProcessHandle, int DesiredAccess, out global::Microsoft.Win32.SafeHandles.SafeTokenHandle TokenHandle)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out TokenHandle);
            nint __TokenHandle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeTokenHandle>.ManagedToUnmanagedOut __TokenHandle_native__marshaller = new();
            try
            {
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(ProcessHandle, DesiredAccess, &__TokenHandle_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __TokenHandle_native__marshaller.FromUnmanaged(__TokenHandle_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
                TokenHandle = __TokenHandle_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __TokenHandle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "OpenProcessToken", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __ProcessHandle_native, int __DesiredAccess_native, nint* __TokenHandle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegCloseKey", ExactSpelling = true)]
        internal static extern partial int RegCloseKey(nint hKey);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegCreateKeyEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpSubKey, int Reserved, string lpClass, int dwOptions, int samDesired, ref global::Interop.Kernel32.SECURITY_ATTRIBUTES secAttrs, out global::Internal.Win32.SafeHandles.SafeRegistryHandle hkResult, out int lpdwDisposition)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out hkResult);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpdwDisposition);
            nint __hKey_native = default;
            nint __hkResult_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedOut __hkResult_native__marshaller = new();
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __lpdwDisposition_native = &lpdwDisposition)
                fixed (global::Interop.Kernel32.SECURITY_ATTRIBUTES* __secAttrs_native = &secAttrs)
                fixed (void* __lpClass_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpClass))
                fixed (void* __lpSubKey_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSubKey))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpSubKey_native, Reserved, (ushort*)__lpClass_native, dwOptions, samDesired, __secAttrs_native, &__hkResult_native, __lpdwDisposition_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __hkResult_native__marshaller.FromUnmanaged(__hkResult_native);
                // Unmarshal - Convert native data to managed data.
                hkResult = __hkResult_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hkResult_native__marshaller.Free();
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegCreateKeyExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpSubKey_native, int __Reserved_native, ushort* __lpClass_native, int __dwOptions_native, int __samDesired_native, global::Interop.Kernel32.SECURITY_ATTRIBUTES* __secAttrs_native, nint* __hkResult_native, int* __lpdwDisposition_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegDeleteKeyEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpSubKey, int samDesired, int Reserved)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpSubKey_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSubKey))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpSubKey_native, samDesired, Reserved);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegDeleteKeyExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpSubKey_native, int __samDesired_native, int __Reserved_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegDeleteValue(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegDeleteValueW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int RegEnumKeyEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, int dwIndex, ref char lpName, ref int lpcbName, int[] lpReserved, char[] lpClass, int[] lpcbClass, long[] lpftLastWriteTime)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpftLastWriteTime_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<long, long>.ManagedToUnmanagedIn.GetPinnableReference(lpftLastWriteTime))
                fixed (void* __lpcbClass_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(lpcbClass))
                fixed (void* __lpClass_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(lpClass))
                fixed (void* __lpReserved_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(lpReserved))
                fixed (int* __lpcbName_native = &lpcbName)
                fixed (char* __lpName_native = &lpName)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, dwIndex, __lpName_native, __lpcbName_native, (int*)__lpReserved_native, (char*)__lpClass_native, (int*)__lpcbClass_native, (long*)__lpftLastWriteTime_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegEnumKeyExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, int __dwIndex_native, char* __lpName_native, int* __lpcbName_native, int* __lpReserved_native, char* __lpClass_native, int* __lpcbClass_native, long* __lpftLastWriteTime_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegEnumValue(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, int dwIndex, char[] lpValueName, ref int lpcbValueName, nint lpReserved_MustBeZero, int[] lpType, byte[] lpData, int[] lpcbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpcbData_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(lpcbData))
                fixed (void* __lpData_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(lpData))
                fixed (void* __lpType_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(lpType))
                fixed (int* __lpcbValueName_native = &lpcbValueName)
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, dwIndex, (char*)__lpValueName_native, __lpcbValueName_native, lpReserved_MustBeZero, (int*)__lpType_native, (byte*)__lpData_native, (int*)__lpcbData_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegEnumValueW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, int __dwIndex_native, char* __lpValueName_native, int* __lpcbValueName_native, nint __lpReserved_MustBeZero_native, int* __lpType_native, byte* __lpData_native, int* __lpcbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegFlushKey(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegFlushKey", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegOpenKeyEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpSubKey, int ulOptions, int samDesired, out global::Internal.Win32.SafeHandles.SafeRegistryHandle hkResult)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out hkResult);
            nint __hKey_native = default;
            nint __hkResult_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedOut __hkResult_native__marshaller = new();
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpSubKey_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSubKey))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpSubKey_native, ulOptions, samDesired, &__hkResult_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __hkResult_native__marshaller.FromUnmanaged(__hkResult_native);
                // Unmarshal - Convert native data to managed data.
                hkResult = __hkResult_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hkResult_native__marshaller.Free();
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegOpenKeyExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpSubKey_native, int __ulOptions_native, int __samDesired_native, nint* __hkResult_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegOpenKeyEx(nint hKey, string lpSubKey, int ulOptions, int samDesired, out global::Internal.Win32.SafeHandles.SafeRegistryHandle hkResult)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out hkResult);
            nint __hkResult_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedOut __hkResult_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpSubKey_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSubKey))
                {
                    __retVal = __PInvoke(hKey, (ushort*)__lpSubKey_native, ulOptions, samDesired, &__hkResult_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __hkResult_native__marshaller.FromUnmanaged(__hkResult_native);
                // Unmarshal - Convert native data to managed data.
                hkResult = __hkResult_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hkResult_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegOpenKeyExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpSubKey_native, int __ulOptions_native, int __samDesired_native, nint* __hkResult_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegQueryValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int[] lpReserved, ref int lpType, byte[] lpData, ref int lpcbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __lpcbData_native = &lpcbData)
                fixed (void* __lpData_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(lpData))
                fixed (int* __lpType_native = &lpType)
                fixed (void* __lpReserved_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(lpReserved))
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, (int*)__lpReserved_native, __lpType_native, (byte*)__lpData_native, __lpcbData_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegQueryValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int* __lpReserved_native, int* __lpType_native, byte* __lpData_native, int* __lpcbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int RegQueryValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int* lpReserved, int* lpType, byte* lpData, uint* lpcbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, lpReserved, lpType, lpData, lpcbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegQueryValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int* __lpReserved_native, int* __lpType_native, byte* __lpData_native, uint* __lpcbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegSetValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int Reserved, int dwType, byte[] lpData, int cbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpData_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(lpData))
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, Reserved, dwType, (byte*)__lpData_native, cbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegSetValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int __Reserved_native, int __dwType_native, byte* __lpData_native, int __cbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegSetValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int Reserved, int dwType, char[] lpData, int cbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpData_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(lpData))
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, Reserved, dwType, (char*)__lpData_native, cbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegSetValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int __Reserved_native, int __dwType_native, char* __lpData_native, int __cbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegSetValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int Reserved, int dwType, ref int lpData, int cbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __lpData_native = &lpData)
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, Reserved, dwType, __lpData_native, cbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegSetValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int __Reserved_native, int __dwType_native, int* __lpData_native, int __cbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegSetValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int Reserved, int dwType, ref long lpData, int cbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (long* __lpData_native = &lpData)
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, Reserved, dwType, __lpData_native, cbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegSetValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int __Reserved_native, int __dwType_native, long* __lpData_native, int __cbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Advapi32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int RegSetValueEx(global::Internal.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int Reserved, int dwType, string lpData, int cbData)
        {
            nint __hKey_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Internal.Win32.SafeHandles.SafeRegistryHandle>.ManagedToUnmanagedIn __hKey_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hKey_native__marshaller.FromManaged(hKey);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpData_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpData))
                fixed (void* __lpValueName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValueName))
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hKey_native = __hKey_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hKey_native, (ushort*)__lpValueName_native, Reserved, dwType, (ushort*)__lpData_native, cbData);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hKey_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "RegSetValueExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hKey_native, ushort* __lpValueName_native, int __Reserved_native, int __dwType_native, ushort* __lpData_native, int __cbData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class BCrypt
    {
        [System.Runtime.InteropServices.DllImportAttribute("BCrypt.dll", EntryPoint = "BCryptGenRandom", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BCrypt.NTSTATUS BCryptGenRandom(nint hAlgorithm, byte* pbBuffer, int cbBuffer, int dwFlags);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Crypt32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool CryptProtectMemory(global::System.Runtime.InteropServices.SafeBuffer pData, uint cbData, uint dwFlags)
        {
            int __lastError;
            nint __pData_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeBuffer>.ManagedToUnmanagedIn __pData_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __pData_native__marshaller.FromManaged(pData);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __pData_native = __pData_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__pData_native, cbData, dwFlags);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __pData_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("crypt32.dll", EntryPoint = "CryptProtectMemory", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __pData_native, uint __cbData_native, uint __dwFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Crypt32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool CryptUnprotectMemory(global::System.Runtime.InteropServices.SafeBuffer pData, uint cbData, uint dwFlags)
        {
            int __lastError;
            nint __pData_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeBuffer>.ManagedToUnmanagedIn __pData_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __pData_native__marshaller.FromManaged(pData);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __pData_native = __pData_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__pData_native, cbData, dwFlags);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __pData_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("crypt32.dll", EntryPoint = "CryptUnprotectMemory", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __pData_native, uint __cbData_native, uint __dwFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool CancelIoEx(global::System.Runtime.InteropServices.SafeHandle handle, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CancelIoEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool CancelIoEx(nint handle, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(handle, lpOverlapped);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CancelIoEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool CancelSynchronousIo(global::Microsoft.Win32.SafeHandles.SafeThreadHandle hThread)
        {
            int __lastError;
            nint __hThread_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeThreadHandle>.ManagedToUnmanagedIn __hThread_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hThread_native__marshaller.FromManaged(hThread);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hThread_native = __hThread_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hThread_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hThread_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CancelSynchronousIo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hThread_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint CreateIoCompletionPort(nint FileHandle, nint ExistingCompletionPort, nuint CompletionKey, int NumberOfConcurrentThreads)
        {
            int __lastError;
            nint __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateIoCompletionPort", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __FileHandle_native, nint __ExistingCompletionPort_native, nuint __CompletionKey_native, int __NumberOfConcurrentThreads_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool PostQueuedCompletionStatus(nint CompletionPort, uint dwNumberOfBytesTransferred, nuint CompletionKey, nint lpOverlapped)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(CompletionPort, dwNumberOfBytesTransferred, CompletionKey, lpOverlapped);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "PostQueuedCompletionStatus", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __CompletionPort_native, uint __dwNumberOfBytesTransferred_native, nuint __CompletionKey_native, nint __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetQueuedCompletionStatus(nint CompletionPort, out uint lpNumberOfBytesTransferred, out nuint CompletionKey, out nint lpOverlapped, int dwMilliseconds)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpNumberOfBytesTransferred);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out CompletionKey);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpOverlapped);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __lpOverlapped_native = &lpOverlapped)
            fixed (nuint* __CompletionKey_native = &CompletionKey)
            fixed (uint* __lpNumberOfBytesTransferred_native = &lpNumberOfBytesTransferred)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(CompletionPort, __lpNumberOfBytesTransferred_native, __CompletionKey_native, __lpOverlapped_native, dwMilliseconds);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetQueuedCompletionStatus", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __CompletionPort_native, uint* __lpNumberOfBytesTransferred_native, nuint* __CompletionKey_native, nint* __lpOverlapped_native, int __dwMilliseconds_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetQueuedCompletionStatusEx(nint CompletionPort, global::Interop.Kernel32.OVERLAPPED_ENTRY* lpCompletionPortEntries, int ulCount, out int ulNumEntriesRemoved, int dwMilliseconds, bool fAlertable)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ulNumEntriesRemoved);
            int __fAlertable_native;
            bool __retVal;
            int __retVal_native;
            // Marshal - Convert managed data to native data.
            __fAlertable_native = (int)(fAlertable ? 1 : 0);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __ulNumEntriesRemoved_native = &ulNumEntriesRemoved)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(CompletionPort, lpCompletionPortEntries, ulCount, __ulNumEntriesRemoved_native, dwMilliseconds, __fAlertable_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetQueuedCompletionStatusEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __CompletionPort_native, global::Interop.Kernel32.OVERLAPPED_ENTRY* __lpCompletionPortEntries_native, int __ulCount_native, int* __ulNumEntriesRemoved_native, int __dwMilliseconds_native, int __fAlertable_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "InitializeConditionVariable", ExactSpelling = true)]
        internal static unsafe extern partial void InitializeConditionVariable(global::Interop.Kernel32.CONDITION_VARIABLE* ConditionVariable);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WakeConditionVariable", ExactSpelling = true)]
        internal static unsafe extern partial void WakeConditionVariable(global::Interop.Kernel32.CONDITION_VARIABLE* ConditionVariable);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool SleepConditionVariableCS(global::Interop.Kernel32.CONDITION_VARIABLE* ConditionVariable, global::Interop.Kernel32.CRITICAL_SECTION* CriticalSection, int dwMilliseconds)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(ConditionVariable, CriticalSection, dwMilliseconds);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SleepConditionVariableCS", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::Interop.Kernel32.CONDITION_VARIABLE* __ConditionVariable_native, global::Interop.Kernel32.CRITICAL_SECTION* __CriticalSection_native, int __dwMilliseconds_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool CopyFileExPrivate(string src, string dst, nint progressRoutine, nint progressData, ref int cancel, int flags)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __cancel_native = &cancel)
            fixed (void* __dst_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(dst))
            fixed (void* __src_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(src))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__src_native, (ushort*)__dst_native, progressRoutine, progressData, __cancel_native, flags);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CopyFileExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __src_native, ushort* __dst_native, nint __progressRoutine_native, nint __progressData_native, int* __cancel_native, int __flags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial bool CreateDirectoryPrivate(string path, global::Interop.Kernel32.SECURITY_ATTRIBUTES* lpSecurityAttributes)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __path_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(path))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__path_native, lpSecurityAttributes);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateDirectoryW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __path_native, global::Interop.Kernel32.SECURITY_ATTRIBUTES* __lpSecurityAttributes_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial global::Microsoft.Win32.SafeHandles.SafeFileHandle CreateFilePrivate(string lpFileName, int dwDesiredAccess, global::System.IO.FileShare dwShareMode, global::Interop.Kernel32.SECURITY_ATTRIBUTES* lpSecurityAttributes, global::System.IO.FileMode dwCreationDisposition, int dwFlagsAndAttributes, nint hTemplateFile)
        {
            int __lastError;
            global::Microsoft.Win32.SafeHandles.SafeFileHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __lpFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpFileName))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke((ushort*)__lpFileName_native, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateFileW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __lpFileName_native, int __dwDesiredAccess_native, global::System.IO.FileShare __dwShareMode_native, global::Interop.Kernel32.SECURITY_ATTRIBUTES* __lpSecurityAttributes_native, global::System.IO.FileMode __dwCreationDisposition_native, int __dwFlagsAndAttributes_native, nint __hTemplateFile_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateThreadpoolTimer", ExactSpelling = true)]
        internal static unsafe extern partial nint CreateThreadpoolTimer(delegate* unmanaged<void*, void*, void*, void> pfnti, nint pv, nint pcbe);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetThreadpoolTimer", ExactSpelling = true)]
        internal static unsafe extern partial nint SetThreadpoolTimer(nint pti, long* pftDueTime, uint msPeriod, uint msWindowLength);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle CreateThreadpoolIo(global::System.Runtime.InteropServices.SafeHandle fl, delegate* unmanaged<nint, nint, nint, uint, nuint, nint, void> pfnio, nint context, nint pcbe)
        {
            int __lastError;
            nint __fl_native = default;
            global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __fl_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __fl_native__marshaller.FromManaged(fl);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __fl_native = __fl_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__fl_native, pfnio, context, pcbe);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
                __fl_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateThreadpoolIo", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __fl_native, delegate* unmanaged<nint, nint, nint, uint, nuint, nint, void> __pfnio_native, nint __context_native, nint __pcbe_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CloseThreadpoolIo", ExactSpelling = true)]
        internal static unsafe extern partial void CloseThreadpoolIo(nint pio);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial void StartThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle pio)
        {
            nint __pio_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle>.ManagedToUnmanagedIn __pio_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __pio_native__marshaller.FromManaged(pio);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __pio_native = __pio_native__marshaller.ToUnmanaged();
                    __PInvoke(__pio_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __pio_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "StartThreadpoolIo", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __pio_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial void CancelThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle pio)
        {
            nint __pio_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle>.ManagedToUnmanagedIn __pio_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __pio_native__marshaller.FromManaged(pio);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __pio_native = __pio_native__marshaller.ToUnmanaged();
                    __PInvoke(__pio_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __pio_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CancelThreadpoolIo", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __pio_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateThreadpoolWork", ExactSpelling = true)]
        internal static unsafe extern partial nint CreateThreadpoolWork(delegate* unmanaged<nint, nint, nint, void> pfnwk, nint pv, nint pcbe);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SubmitThreadpoolWork", ExactSpelling = true)]
        internal static extern partial void SubmitThreadpoolWork(nint pwk);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CloseThreadpoolWork", ExactSpelling = true)]
        internal static extern partial void CloseThreadpoolWork(nint pwk);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateThreadpoolWait", ExactSpelling = true)]
        internal static unsafe extern partial nint CreateThreadpoolWait(delegate* unmanaged<nint, nint, nint, uint, void> pfnwa, nint pv, nint pcbe);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetThreadpoolWait", ExactSpelling = true)]
        internal static extern partial void SetThreadpoolWait(nint pwa, nint h, nint pftTimeout);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void WaitForThreadpoolWaitCallbacks(nint pwa, bool fCancelPendingCallbacks)
        {
            int __fCancelPendingCallbacks_native;
            // Marshal - Convert managed data to native data.
            __fCancelPendingCallbacks_native = (int)(fCancelPendingCallbacks ? 1 : 0);
            {
                __PInvoke(pwa, __fCancelPendingCallbacks_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WaitForThreadpoolWaitCallbacks", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint __pwa_native, int __fCancelPendingCallbacks_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CloseThreadpoolWait", ExactSpelling = true)]
        internal static extern partial void CloseThreadpoolWait(nint pwa);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "NtCreateFile", ExactSpelling = true)]
        private static unsafe extern partial uint NtCreateFile(nint* FileHandle, global::Interop.NtDll.DesiredAccess DesiredAccess, global::Interop.OBJECT_ATTRIBUTES* ObjectAttributes, global::Interop.NtDll.IO_STATUS_BLOCK* IoStatusBlock, long* AllocationSize, global::System.IO.FileAttributes FileAttributes, global::System.IO.FileShare ShareAccess, global::Interop.NtDll.CreateDisposition CreateDisposition, global::Interop.NtDll.CreateOptions CreateOptions, void* EaBuffer, uint EaLength);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "RtlNtStatusToDosError", ExactSpelling = true)]
        public static extern partial uint RtlNtStatusToDosError(int Status);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool DeleteFilePrivate(string path)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __path_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(path))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__path_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "DeleteFileW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __path_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool DeleteVolumeMountPointPrivate(string mountPoint)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __mountPoint_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(mountPoint))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__mountPoint_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "DeleteVolumeMountPointW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __mountPoint_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial nint CreateFilePrivate_IntPtr(string lpFileName, int dwDesiredAccess, global::System.IO.FileShare dwShareMode, global::Interop.Kernel32.SECURITY_ATTRIBUTES* lpSecurityAttributes, global::System.IO.FileMode dwCreationDisposition, int dwFlagsAndAttributes, nint hTemplateFile)
        {
            int __lastError;
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpFileName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__lpFileName_native, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateFileW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __lpFileName_native, int __dwDesiredAccess_native, global::System.IO.FileShare __dwShareMode_native, global::Interop.Kernel32.SECURITY_ATTRIBUTES* __lpSecurityAttributes_native, global::System.IO.FileMode __dwCreationDisposition_native, int __dwFlagsAndAttributes_native, nint __hTemplateFile_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool CreateSymbolicLinkPrivate(string lpSymlinkFileName, string lpTargetFileName, int dwFlags)
        {
            int __lastError;
            bool __retVal;
            byte __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpTargetFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpTargetFileName))
            fixed (void* __lpSymlinkFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSymlinkFileName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__lpSymlinkFileName_native, (ushort*)__lpTargetFileName_native, dwFlags);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateSymbolicLinkW", ExactSpelling = true)]
            static extern unsafe byte __PInvoke(ushort* __lpSymlinkFileName_native, ushort* __lpTargetFileName_native, int __dwFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "InitializeCriticalSection", ExactSpelling = true)]
        internal static unsafe extern partial void InitializeCriticalSection(global::Interop.Kernel32.CRITICAL_SECTION* lpCriticalSection);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "EnterCriticalSection", ExactSpelling = true)]
        internal static unsafe extern partial void EnterCriticalSection(global::Interop.Kernel32.CRITICAL_SECTION* lpCriticalSection);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LeaveCriticalSection", ExactSpelling = true)]
        internal static unsafe extern partial void LeaveCriticalSection(global::Interop.Kernel32.CRITICAL_SECTION* lpCriticalSection);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "DeleteCriticalSection", ExactSpelling = true)]
        internal static unsafe extern partial void DeleteCriticalSection(global::Interop.Kernel32.CRITICAL_SECTION* lpCriticalSection);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool DeviceIoControl(global::System.Runtime.InteropServices.SafeHandle hDevice, uint dwIoControlCode, void* lpInBuffer, uint nInBufferSize, void* lpOutBuffer, uint nOutBufferSize, out uint lpBytesReturned, nint lpOverlapped)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpBytesReturned);
            nint __hDevice_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __hDevice_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hDevice_native__marshaller.FromManaged(hDevice);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (uint* __lpBytesReturned_native = &lpBytesReturned)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hDevice_native = __hDevice_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hDevice_native, dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, __lpBytesReturned_native, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hDevice_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "DeviceIoControl", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hDevice_native, uint __dwIoControlCode_native, void* __lpInBuffer_native, uint __nInBufferSize_native, void* __lpOutBuffer_native, uint __nOutBufferSize_native, uint* __lpBytesReturned_native, nint __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint ExpandEnvironmentStrings(string lpSrc, ref char lpDst, uint nSize)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpDst_native = &lpDst)
            fixed (void* __lpSrc_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpSrc))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__lpSrc_native, __lpDst_native, nSize);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ExpandEnvironmentStringsW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(ushort* __lpSrc_native, char* __lpDst_native, uint __nSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool FindNextFile(global::Microsoft.Win32.SafeHandles.SafeFindHandle hndFindFile, ref global::Interop.Kernel32.WIN32_FIND_DATA lpFindFileData)
        {
            int __lastError;
            nint __hndFindFile_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFindHandle>.ManagedToUnmanagedIn __hndFindFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hndFindFile_native__marshaller.FromManaged(hndFindFile);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::Interop.Kernel32.WIN32_FIND_DATA* __lpFindFileData_native = &lpFindFileData)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hndFindFile_native = __hndFindFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hndFindFile_native, __lpFindFileData_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hndFindFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FindNextFileW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hndFindFile_native, global::Interop.Kernel32.WIN32_FIND_DATA* __lpFindFileData_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FileTimeToSystemTime", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL FileTimeToSystemTime(ulong* lpFileTime, global::Interop.Kernel32.SYSTEMTIME* lpSystemTime);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool FindClose(nint hFindFile)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(hFindFile);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FindClose", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFindFile_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial global::Microsoft.Win32.SafeHandles.SafeFindHandle FindFirstFileExPrivate(string lpFileName, global::Interop.Kernel32.FINDEX_INFO_LEVELS fInfoLevelId, ref global::Interop.Kernel32.WIN32_FIND_DATA lpFindFileData, global::Interop.Kernel32.FINDEX_SEARCH_OPS fSearchOp, nint lpSearchFilter, int dwAdditionalFlags)
        {
            int __lastError;
            global::Microsoft.Win32.SafeHandles.SafeFindHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFindHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::Interop.Kernel32.WIN32_FIND_DATA* __lpFindFileData_native = &lpFindFileData)
                fixed (void* __lpFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpFileName))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke((ushort*)__lpFileName_native, fInfoLevelId, __lpFindFileData_native, fSearchOp, lpSearchFilter, dwAdditionalFlags);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FindFirstFileExW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __lpFileName_native, global::Interop.Kernel32.FINDEX_INFO_LEVELS __fInfoLevelId_native, global::Interop.Kernel32.WIN32_FIND_DATA* __lpFindFileData_native, global::Interop.Kernel32.FINDEX_SEARCH_OPS __fSearchOp_native, nint __lpSearchFilter_native, int __dwAdditionalFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool FlushFileBuffers(global::System.Runtime.InteropServices.SafeHandle hHandle)
        {
            int __lastError;
            nint __hHandle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __hHandle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hHandle_native__marshaller.FromManaged(hHandle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hHandle_native = __hHandle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hHandle_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hHandle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FlushFileBuffers", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hHandle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool FreeLibrary(nint hModule)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(hModule);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FreeLibrary", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hModule_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetLastError", ExactSpelling = true)]
        internal static extern partial int GetLastError();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCommandLineW", ExactSpelling = true)]
        internal static extern partial char* GetCommandLine();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetComputerNameW", ExactSpelling = true)]
        private static unsafe extern partial int GetComputerName(char* lpBuffer, uint* nSize);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetConsoleOutputCP", ExactSpelling = true)]
        internal static extern partial uint GetConsoleOutputCP();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCPInfo", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL GetCPInfo(uint codePage, global::Interop.Kernel32.CPINFO* lpCpInfo);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetCurrentDirectory(uint nBufferLength, ref char lpBuffer)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpBuffer_native = &lpBuffer)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(nBufferLength, __lpBuffer_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentDirectoryW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(uint __nBufferLength_native, char* __lpBuffer_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentProcess", ExactSpelling = true)]
        internal static extern partial nint GetCurrentProcess();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentProcessId", ExactSpelling = true)]
        internal static extern partial uint GetCurrentProcessId();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentThreadId", ExactSpelling = true)]
        public static extern partial int GetCurrentThreadId();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool GetFileAttributesExPrivate(string name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* __lpFileInformation_native = &lpFileInformation)
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__name_native, fileInfoLevel, __lpFileInformation_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFileAttributesExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __name_native, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS __fileInfoLevel_native, global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* __lpFileInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetFileInformationByHandle(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, out global::Interop.Kernel32.BY_HANDLE_FILE_INFORMATION lpFileInformation)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpFileInformation);
            nint __hFile_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::Interop.Kernel32.BY_HANDLE_FILE_INFORMATION* __lpFileInformation_native = &lpFileInformation)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hFile_native, __lpFileInformation_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFileInformationByHandle", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, global::Interop.Kernel32.BY_HANDLE_FILE_INFORMATION* __lpFileInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetFileInformationByHandleEx(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, int FileInformationClass, void* lpFileInformation, uint dwBufferSize)
        {
            int __lastError;
            nint __hFile_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hFile_native, FileInformationClass, lpFileInformation, dwBufferSize);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFileInformationByHandleEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, int __FileInformationClass_native, void* __lpFileInformation_native, uint __dwBufferSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetFileType(global::System.Runtime.InteropServices.SafeHandle hFile)
        {
            int __lastError;
            nint __hFile_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__hFile_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFileType", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial uint GetFinalPathNameByHandle(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, char* lpszFilePath, uint cchFilePath, uint dwFlags)
        {
            int __lastError;
            nint __hFile_native = default;
            uint __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__hFile_native, lpszFilePath, cchFilePath, dwFlags);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFinalPathNameByHandleW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(nint __hFile_native, char* __lpszFilePath_native, uint __cchFilePath_native, uint __dwFlags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetFullPathNameW(ref char lpFileName, uint nBufferLength, ref char lpBuffer, nint lpFilePart)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpBuffer_native = &lpBuffer)
            fixed (char* __lpFileName_native = &lpFileName)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(__lpFileName_native, nBufferLength, __lpBuffer_native, lpFilePart);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetFullPathNameW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(char* __lpFileName_native, uint __nBufferLength_native, char* __lpBuffer_native, nint __lpFilePart_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int GetLogicalDrives()
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke();
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetLogicalDrives", ExactSpelling = true)]
            static extern unsafe int __PInvoke();
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetLongPathNameW(ref char lpszShortPath, ref char lpszLongPath, uint cchBuffer)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpszLongPath_native = &lpszLongPath)
            fixed (char* __lpszShortPath_native = &lpszShortPath)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(__lpszShortPath_native, __lpszLongPath_native, cchBuffer);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetLongPathNameW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(char* __lpszShortPath_native, char* __lpszLongPath_native, uint __cchBuffer_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetModuleFileName(nint hModule, ref char lpFilename, uint nSize)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpFilename_native = &lpFilename)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(hModule, __lpFilename_native, nSize);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetModuleFileNameW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(nint __hModule_native, char* __lpFilename_native, uint __nSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetNativeSystemInfo", ExactSpelling = true)]
        internal static unsafe extern partial void GetNativeSystemInfo(global::Interop.Kernel32.SYSTEM_INFO* lpSystemInfo);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetOverlappedResult(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, global::System.Threading.NativeOverlapped* lpOverlapped, ref int lpNumberOfBytesTransferred, bool bWait)
        {
            int __lastError;
            nint __hFile_native = default;
            int __bWait_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __bWait_native = (int)(bWait ? 1 : 0);
                __hFile_native__marshaller.FromManaged(hFile);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __lpNumberOfBytesTransferred_native = &lpNumberOfBytesTransferred)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hFile_native, lpOverlapped, __lpNumberOfBytesTransferred_native, __bWait_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetOverlappedResult", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native, int* __lpNumberOfBytesTransferred_native, int __bWait_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetProcessMemoryInfo(nint Process, ref global::Interop.Kernel32.PROCESS_MEMORY_COUNTERS ppsmemCounters, uint cb)
        {
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.PROCESS_MEMORY_COUNTERS* __ppsmemCounters_native = &ppsmemCounters)
            {
                __retVal_native = __PInvoke(Process, __ppsmemCounters_native, cb);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "K32GetProcessMemoryInfo", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __Process_native, global::Interop.Kernel32.PROCESS_MEMORY_COUNTERS* __ppsmemCounters_native, uint __cb_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetProcessTimes(nint handleProcess, out long creation, out long exit, out long kernel, out long user)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out creation);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out exit);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out kernel);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out user);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (long* __user_native = &user)
            fixed (long* __kernel_native = &kernel)
            fixed (long* __exit_native = &exit)
            fixed (long* __creation_native = &creation)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(handleProcess, __creation_native, __exit_native, __kernel_native, __user_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetProcessTimes", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handleProcess_native, long* __creation_native, long* __exit_native, long* __kernel_native, long* __user_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetStdHandle", ExactSpelling = true)]
        internal static extern partial nint GetStdHandle(int nStdHandle);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetSystemDirectoryW(ref char lpBuffer, uint uSize)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpBuffer_native = &lpBuffer)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(__lpBuffer_native, uSize);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetSystemDirectoryW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(char* __lpBuffer_native, uint __uSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetSystemInfo", ExactSpelling = true)]
        internal static unsafe extern partial void GetSystemInfo(global::Interop.Kernel32.SYSTEM_INFO* lpSystemInfo);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetSystemTime", ExactSpelling = true)]
        internal static unsafe extern partial void GetSystemTime(global::Interop.Kernel32.SYSTEMTIME* lpSystemTime);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetSystemTimes(out long idle, out long kernel, out long user)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out idle);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out kernel);
            System.Runtime.CompilerServices.Unsafe.SkipInit(out user);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (long* __user_native = &user)
            fixed (long* __kernel_native = &kernel)
            fixed (long* __idle_native = &idle)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(__idle_native, __kernel_native, __user_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetSystemTimes", ExactSpelling = true)]
            static extern unsafe int __PInvoke(long* __idle_native, long* __kernel_native, long* __user_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool GetVolumeInformation(string drive, char* volumeName, int volumeNameBufLen, int* volSerialNumber, int* maxFileNameLen, out int fileSystemFlags, char* fileSystemName, int fileSystemNameBufLen)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out fileSystemFlags);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __fileSystemFlags_native = &fileSystemFlags)
            fixed (void* __drive_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(drive))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__drive_native, volumeName, volumeNameBufLen, volSerialNumber, maxFileNameLen, __fileSystemFlags_native, fileSystemName, fileSystemNameBufLen);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetVolumeInformationW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __drive_native, char* __volumeName_native, int __volumeNameBufLen_native, int* __volSerialNumber_native, int* __maxFileNameLen_native, int* __fileSystemFlags_native, char* __fileSystemName_native, int __fileSystemNameBufLen_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GlobalMemoryStatusEx", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL GlobalMemoryStatusEx(global::Interop.Kernel32.MEMORYSTATUSEX* lpBuffer);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool IsWow64Process(nint hProcess, out bool Wow64Process)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out Wow64Process);
            int __Wow64Process_native;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(hProcess, &__Wow64Process_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            Wow64Process = __Wow64Process_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "IsWow64Process", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hProcess_native, int* __Wow64Process_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint LoadLibraryEx(string libFilename, nint reserved, int flags)
        {
            int __lastError;
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __libFilename_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(libFilename))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__libFilename_native, reserved, flags);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LoadLibraryExW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __libFilename_native, nint __reserved_native, int __flags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LocalAlloc", ExactSpelling = true)]
        private static extern partial nint LocalAlloc(uint uFlags, nuint uBytes);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LocalFree", ExactSpelling = true)]
        private static extern partial nint LocalFree(nint hMem);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LocalReAlloc", ExactSpelling = true)]
        private static extern partial nint LocalReAlloc(nint hMem, nuint uBytes, uint uFlags);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool LockFile(global::Microsoft.Win32.SafeHandles.SafeFileHandle handle, int offsetLow, int offsetHigh, int countLow, int countHigh)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native, offsetLow, offsetHigh, countLow, countHigh);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "LockFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, int __offsetLow_native, int __offsetHigh_native, int __countLow_native, int __countHigh_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool UnlockFile(global::Microsoft.Win32.SafeHandles.SafeFileHandle handle, int offsetLow, int offsetHigh, int countLow, int countHigh)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native, offsetLow, offsetHigh, countLow, countHigh);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "UnlockFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, int __offsetLow_native, int __offsetHigh_native, int __countLow_native, int __countHigh_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "MultiByteToWideChar", ExactSpelling = true)]
        internal static unsafe extern partial int MultiByteToWideChar(uint CodePage, uint dwFlags, byte* lpMultiByteStr, int cbMultiByte, char* lpWideCharStr, int cchWideChar);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool MoveFileExPrivate(string src, string dst, uint flags)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __dst_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(dst))
            fixed (void* __src_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(src))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__src_native, (ushort*)__dst_native, flags);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "MoveFileExW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __src_native, ushort* __dst_native, uint __flags_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeThreadHandle OpenThread(int dwDesiredAccess, bool bInheritHandle, int dwThreadId)
        {
            int __lastError;
            int __bInheritHandle_native = default;
            global::Microsoft.Win32.SafeHandles.SafeThreadHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeThreadHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __bInheritHandle_native = (int)(bInheritHandle ? 1 : 0);
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(dwDesiredAccess, __bInheritHandle_native, dwThreadId);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "OpenThread", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(int __dwDesiredAccess_native, int __bInheritHandle_native, int __dwThreadId_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial void OutputDebugString(string message)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __message_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(message))
            {
                __PInvoke((ushort*)__message_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "OutputDebugStringW", ExactSpelling = true)]
            static extern unsafe void __PInvoke(ushort* __message_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "QueryPerformanceCounter", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL QueryPerformanceCounter(long* lpPerformanceCount);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "QueryPerformanceFrequency", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL QueryPerformanceFrequency(long* lpFrequency);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool QueryUnbiasedInterruptTime(out ulong UnbiasedTime)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out UnbiasedTime);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (ulong* __UnbiasedTime_native = &UnbiasedTime)
            {
                __retVal_native = __PInvoke(__UnbiasedTime_native);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "QueryUnbiasedInterruptTime", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ulong* __UnbiasedTime_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int ReadFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToRead, out int numBytesRead, nint mustBeZero)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out numBytesRead);
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __numBytesRead_native = &numBytesRead)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToRead, __numBytesRead_native, mustBeZero);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReadFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToRead_native, int* __numBytesRead_native, nint __mustBeZero_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int ReadFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToRead, nint numBytesRead_mustBeZero, global::System.Threading.NativeOverlapped* overlapped)
        {
            int __lastError;
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToRead, numBytesRead_mustBeZero, overlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReadFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToRead_native, nint __numBytesRead_mustBeZero_native, global::System.Threading.NativeOverlapped* __overlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int ReadFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToRead, out int numBytesRead, global::System.Threading.NativeOverlapped* overlapped)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out numBytesRead);
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __numBytesRead_native = &numBytesRead)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToRead, __numBytesRead_native, overlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReadFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToRead_native, int* __numBytesRead_native, global::System.Threading.NativeOverlapped* __overlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int ReadFileScatter(global::System.Runtime.InteropServices.SafeHandle hFile, long* aSegmentArray, int nNumberOfBytesToRead, nint lpReserved, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            nint __hFile_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__hFile_native, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReadFileScatter", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, long* __aSegmentArray_native, int __nNumberOfBytesToRead_native, nint __lpReserved_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WriteFileGather(global::System.Runtime.InteropServices.SafeHandle hFile, long* aSegmentArray, int nNumberOfBytesToWrite, nint lpReserved, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            nint __hFile_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__hFile_native, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WriteFileGather", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, long* __aSegmentArray_native, int __nNumberOfBytesToWrite_native, nint __lpReserved_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool RemoveDirectoryPrivate(string path)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __path_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(path))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__path_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "RemoveDirectoryW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __path_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool ReplaceFilePrivate(string replacedFileName, string replacementFileName, string backupFileName, int dwReplaceFlags, nint lpExclude, nint lpReserved)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __backupFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(backupFileName))
            fixed (void* __replacementFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(replacementFileName))
            fixed (void* __replacedFileName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(replacedFileName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__replacedFileName_native, (ushort*)__replacementFileName_native, (ushort*)__backupFileName_native, dwReplaceFlags, lpExclude, lpReserved);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReplaceFileW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __replacedFileName_native, ushort* __replacementFileName_native, ushort* __backupFileName_native, int __dwReplaceFlags_native, nint __lpExclude_native, nint __lpReserved_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool SetConsoleCtrlHandler(delegate* unmanaged<int, global::Interop.BOOL> handler, bool Add)
        {
            int __lastError;
            int __Add_native;
            bool __retVal;
            int __retVal_native;
            // Marshal - Convert managed data to native data.
            __Add_native = (int)(Add ? 1 : 0);
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(handler, __Add_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetConsoleCtrlHandler", ExactSpelling = true)]
            static extern unsafe int __PInvoke(delegate* unmanaged<int, global::Interop.BOOL> __handler_native, int __Add_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetCurrentDirectory(string path)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __path_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(path))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__path_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetCurrentDirectoryW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __path_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial bool SetFileAttributesPrivate(string name, int attr)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__name_native, attr);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetFileAttributesW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __name_native, int __attr_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool SetFileInformationByHandle(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, int FileInformationClass, void* lpFileInformation, uint dwBufferSize)
        {
            int __lastError;
            nint __hFile_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hFile_native, FileInformationClass, lpFileInformation, dwBufferSize);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetFileInformationByHandle", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, int __FileInformationClass_native, void* __lpFileInformation_native, uint __dwBufferSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetFilePointerEx(global::Microsoft.Win32.SafeHandles.SafeFileHandle hFile, long liDistanceToMove, out long lpNewFilePointer, uint dwMoveMethod)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpNewFilePointer);
            nint __hFile_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __hFile_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hFile_native__marshaller.FromManaged(hFile);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (long* __lpNewFilePointer_native = &lpNewFilePointer)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hFile_native = __hFile_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__hFile_native, liDistanceToMove, __lpNewFilePointer_native, dwMoveMethod);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hFile_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetFilePointerEx", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hFile_native, long __liDistanceToMove_native, long* __lpNewFilePointer_native, uint __dwMoveMethod_native);
        }
    }
}
internal unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetLastError", ExactSpelling = true)]
        internal static extern partial void SetLastError(int errorCode);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetThreadErrorMode(uint dwNewMode, out uint lpOldMode)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpOldMode);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (uint* __lpOldMode_native = &lpOldMode)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(dwNewMode, __lpOldMode_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetThreadErrorMode", ExactSpelling = true)]
            [System.Runtime.InteropServices.SuppressGCTransitionAttribute]
            static extern unsafe int __PInvoke(uint __dwNewMode_native, uint* __lpOldMode_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SystemTimeToFileTime", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL SystemTimeToFileTime(global::Interop.Kernel32.SYSTEMTIME* lpSystemTime, ulong* lpFileTime);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WaitForMultipleObjectsEx", ExactSpelling = true)]
        internal static extern partial uint WaitForMultipleObjectsEx(uint nCount, nint lpHandles, global::Interop.BOOL bWaitAll, uint dwMilliseconds, global::Interop.BOOL bAlertable);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WaitForSingleObject", ExactSpelling = true)]
        internal static extern partial uint WaitForSingleObject(nint hHandle, uint dwMilliseconds);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SignalObjectAndWait", ExactSpelling = true)]
        internal static extern partial uint SignalObjectAndWait(nint hObjectToSignal, nint hObjectToWaitOn, uint dwMilliseconds, global::Interop.BOOL bAlertable);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle CreateThread(nint lpThreadAttributes, nint dwStackSize, delegate* unmanaged<nint, uint> lpStartAddress, nint lpParameter, uint dwCreationFlags, out uint lpThreadId)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpThreadId);
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (uint* __lpThreadId_native = &lpThreadId)
                {
                    __retVal_native = __PInvoke(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, __lpThreadId_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateThread", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __lpThreadAttributes_native, nint __dwStackSize_native, delegate* unmanaged<nint, uint> __lpStartAddress_native, nint __lpParameter_native, uint __dwCreationFlags_native, uint* __lpThreadId_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint ResumeThread(global::Microsoft.Win32.SafeHandles.SafeWaitHandle hThread)
        {
            nint __hThread_native = default;
            uint __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __hThread_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hThread_native__marshaller.FromManaged(hThread);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hThread_native = __hThread_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hThread_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hThread_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ResumeThread", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(nint __hThread_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentThread", ExactSpelling = true)]
        internal static extern partial nint GetCurrentThread();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool DuplicateHandle(nint hSourceProcessHandle, nint hSourceHandle, nint hTargetProcessHandle, out global::Microsoft.Win32.SafeHandles.SafeWaitHandle lpTargetHandle, uint dwDesiredAccess, bool bInheritHandle, uint dwOptions)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpTargetHandle);
            nint __lpTargetHandle_native = default;
            int __bInheritHandle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __lpTargetHandle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __bInheritHandle_native = (int)(bInheritHandle ? 1 : 0);
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, &__lpTargetHandle_native, dwDesiredAccess, __bInheritHandle_native, dwOptions);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __lpTargetHandle_native__marshaller.FromUnmanaged(__lpTargetHandle_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
                lpTargetHandle = __lpTargetHandle_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __lpTargetHandle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "DuplicateHandle", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hSourceProcessHandle_native, nint __hSourceHandle_native, nint __hTargetProcessHandle_native, nint* __lpTargetHandle_native, uint __dwDesiredAccess_native, int __bInheritHandle_native, uint __dwOptions_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Interop.Kernel32.ThreadPriority GetThreadPriority(global::Microsoft.Win32.SafeHandles.SafeWaitHandle hThread)
        {
            nint __hThread_native = default;
            global::Interop.Kernel32.ThreadPriority __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __hThread_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hThread_native__marshaller.FromManaged(hThread);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hThread_native = __hThread_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__hThread_native);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hThread_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetThreadPriority", ExactSpelling = true)]
            static extern unsafe global::Interop.Kernel32.ThreadPriority __PInvoke(nint __hThread_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetThreadPriority(global::Microsoft.Win32.SafeHandles.SafeWaitHandle hThread, int nPriority)
        {
            nint __hThread_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __hThread_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __hThread_native__marshaller.FromManaged(hThread);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __hThread_native = __hThread_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__hThread_native, nPriority);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __hThread_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetThreadPriority", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hThread_native, int __nPriority_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool GetThreadIOPendingFlag(nint hThread, out global::Interop.BOOL lpIOIsPending)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpIOIsPending);
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.BOOL* __lpIOIsPending_native = &lpIOIsPending)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(hThread, __lpIOIsPending_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetThreadIOPendingFlag", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hThread_native, global::Interop.BOOL* __lpIOIsPending_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetDynamicTimeZoneInformation(out global::Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION pTimeZoneInformation)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out pTimeZoneInformation);
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION* __pTimeZoneInformation_native = &pTimeZoneInformation)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(__pTimeZoneInformation_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetDynamicTimeZoneInformation", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(global::Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION* __pTimeZoneInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetTimeZoneInformation(out global::Interop.Kernel32.TIME_ZONE_INFORMATION lpTimeZoneInformation)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpTimeZoneInformation);
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.TIME_ZONE_INFORMATION* __lpTimeZoneInformation_native = &lpTimeZoneInformation)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(__lpTimeZoneInformation_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetTimeZoneInformation", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(global::Interop.Kernel32.TIME_ZONE_INFORMATION* __lpTimeZoneInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "TzSpecificLocalTimeToSystemTime", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL TzSpecificLocalTimeToSystemTime(nint lpTimeZoneInformation, global::Interop.Kernel32.SYSTEMTIME* lpLocalTime, global::Interop.Kernel32.SYSTEMTIME* lpUniversalTime);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "VirtualAlloc", ExactSpelling = true)]
        internal static unsafe extern partial void* VirtualAlloc(void* lpAddress, nuint dwSize, int flAllocationType, int flProtect);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial bool VirtualFree(void* lpAddress, nuint dwSize, int dwFreeType)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(lpAddress, dwSize, dwFreeType);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "VirtualFree", ExactSpelling = true)]
            static extern unsafe int __PInvoke(void* __lpAddress_native, nuint __dwSize_native, int __dwFreeType_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial nuint VirtualQuery(void* lpAddress, ref global::Interop.Kernel32.MEMORY_BASIC_INFORMATION lpBuffer, nuint dwLength)
        {
            int __lastError;
            nuint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.MEMORY_BASIC_INFORMATION* __lpBuffer_native = &lpBuffer)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(lpAddress, __lpBuffer_native, dwLength);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "VirtualQuery", ExactSpelling = true)]
            static extern unsafe nuint __PInvoke(void* __lpAddress_native, global::Interop.Kernel32.MEMORY_BASIC_INFORMATION* __lpBuffer_native, nuint __dwLength_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WideCharToMultiByte", ExactSpelling = true)]
        internal static unsafe extern partial int WideCharToMultiByte(uint CodePage, uint dwFlags, char* lpWideCharStr, int cchWideChar, byte* lpMultiByteStr, int cbMultiByte, byte* lpDefaultChar, global::Interop.BOOL* lpUsedDefaultChar);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WriteFile(nint handle, byte* bytes, int numBytesToWrite, out int numBytesWritten, nint mustBeZero)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out numBytesWritten);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (int* __numBytesWritten_native = &numBytesWritten)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(handle, bytes, numBytesToWrite, __numBytesWritten_native, mustBeZero);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WriteFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToWrite_native, int* __numBytesWritten_native, nint __mustBeZero_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WriteFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToWrite, out int numBytesWritten, nint mustBeZero)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out numBytesWritten);
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __numBytesWritten_native = &numBytesWritten)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToWrite, __numBytesWritten_native, mustBeZero);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WriteFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToWrite_native, int* __numBytesWritten_native, nint __mustBeZero_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WriteFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToWrite, nint numBytesWritten_mustBeZero, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToWrite, numBytesWritten_mustBeZero, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WriteFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToWrite_native, nint __numBytesWritten_mustBeZero_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int WriteFile(global::System.Runtime.InteropServices.SafeHandle handle, byte* bytes, int numBytesToWrite, out int numBytesWritten, global::System.Threading.NativeOverlapped* lpOverlapped)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out numBytesWritten);
            nint __handle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::System.Runtime.InteropServices.SafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __numBytesWritten_native = &numBytesWritten)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(__handle_native, bytes, numBytesToWrite, __numBytesWritten_native, lpOverlapped);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "WriteFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, byte* __bytes_native, int __numBytesToWrite_native, int* __numBytesWritten_native, global::System.Threading.NativeOverlapped* __lpOverlapped_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "NtQueryDirectoryFile", ExactSpelling = true)]
        public static unsafe extern partial int NtQueryDirectoryFile(nint FileHandle, nint Event, nint ApcRoutine, nint ApcContext, global::Interop.NtDll.IO_STATUS_BLOCK* IoStatusBlock, nint FileInformation, uint Length, global::Interop.NtDll.FILE_INFORMATION_CLASS FileInformationClass, global::Interop.BOOLEAN ReturnSingleEntry, global::Interop.UNICODE_STRING* FileName, global::Interop.BOOLEAN RestartScan);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int NtQueryInformationFile(global::Microsoft.Win32.SafeHandles.SafeFileHandle FileHandle, out global::Interop.NtDll.IO_STATUS_BLOCK IoStatusBlock, void* FileInformation, uint Length, uint FileInformationClass)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out IoStatusBlock);
            nint __FileHandle_native = default;
            int __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __FileHandle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __FileHandle_native__marshaller.FromManaged(FileHandle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::Interop.NtDll.IO_STATUS_BLOCK* __IoStatusBlock_native = &IoStatusBlock)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __FileHandle_native = __FileHandle_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__FileHandle_native, __IoStatusBlock_native, FileInformation, Length, FileInformationClass);
                }
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __FileHandle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "NtQueryInformationFile", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __FileHandle_native, global::Interop.NtDll.IO_STATUS_BLOCK* __IoStatusBlock_native, void* __FileInformation_native, uint __Length_native, uint __FileInformationClass_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "NtQuerySystemInformation", ExactSpelling = true)]
        internal static unsafe extern partial uint NtQuerySystemInformation(int SystemInformationClass, void* SystemInformation, uint SystemInformationLength, uint* ReturnLength);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class NtDll
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static partial int RtlGetVersion(ref global::Interop.NtDll.RTL_OSVERSIONINFOEX lpVersionInformation)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.NtDll.RTL_OSVERSIONINFOEX* __lpVersionInformation_native = &lpVersionInformation)
            {
                __retVal = __PInvoke(__lpVersionInformation_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ntdll.dll", EntryPoint = "RtlGetVersion", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::Interop.NtDll.RTL_OSVERSIONINFOEX* __lpVersionInformation_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class OleAut32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint SysAllocStringByteLen(byte[] str, uint len)
        {
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __str_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.ManagedToUnmanagedIn.GetPinnableReference(str))
            {
                __retVal = __PInvoke((byte*)__str_native, len);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("oleaut32.dll", EntryPoint = "SysAllocStringByteLen", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(byte* __str_native, uint __len_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class OleAut32
    {
        [System.Runtime.InteropServices.DllImportAttribute("oleaut32.dll", EntryPoint = "SysAllocStringLen", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal static extern partial nint SysAllocStringLen(nint src, uint len);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class OleAut32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint SysAllocStringLen(string src, uint len)
        {
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __src_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(src))
            {
                __retVal = __PInvoke((ushort*)__src_native, len);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("oleaut32.dll", EntryPoint = "SysAllocStringLen", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __src_native, uint __len_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class OleAut32
    {
        [System.Runtime.InteropServices.DllImportAttribute("oleaut32.dll", EntryPoint = "SysFreeString", ExactSpelling = true)]
        internal static extern partial void SysFreeString(nint bstr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int CLSIDFromProgID(string lpszProgID, out global::System.Guid lpclsid)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out lpclsid);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::System.Guid* __lpclsid_native = &lpclsid)
            fixed (void* __lpszProgID_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpszProgID))
            {
                __retVal = __PInvoke((ushort*)__lpszProgID_native, __lpclsid_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CLSIDFromProgID", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpszProgID_native, global::System.Guid* __lpclsid_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int CoCreateGuid(out global::System.Guid guid)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out guid);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::System.Guid* __guid_native = &guid)
            {
                __retVal = __PInvoke(__guid_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CoCreateGuid", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Guid* __guid_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int CoGetStandardMarshal(ref global::System.Guid riid, nint pv, int dwDestContext, nint pvDestContext, int mshlflags, out nint ppMarshal)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ppMarshal);
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (nint* __ppMarshal_native = &ppMarshal)
            fixed (global::System.Guid* __riid_native = &riid)
            {
                __retVal = __PInvoke(__riid_native, pv, dwDestContext, pvDestContext, mshlflags, __ppMarshal_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CoGetStandardMarshal", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Guid* __riid_native, nint __pv_native, int __dwDestContext_native, nint __pvDestContext_native, int __mshlflags_native, nint* __ppMarshal_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CoTaskMemAlloc", ExactSpelling = true)]
        internal static extern partial nint CoTaskMemAlloc(nuint cb);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CoTaskMemRealloc", ExactSpelling = true)]
        internal static extern partial nint CoTaskMemRealloc(nint pv, nuint cb);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ole32
    {
        [System.Runtime.InteropServices.DllImportAttribute("ole32.dll", EntryPoint = "CoTaskMemFree", ExactSpelling = true)]
        internal static extern partial void CoTaskMemFree(nint ptr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Secur32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Interop.BOOLEAN GetUserNameExW(int NameFormat, ref char lpNameBuffer, ref uint lpnSize)
        {
            int __lastError;
            global::Interop.BOOLEAN __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (uint* __lpnSize_native = &lpnSize)
            fixed (char* __lpNameBuffer_native = &lpNameBuffer)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(NameFormat, __lpNameBuffer_native, __lpnSize_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("secur32.dll", EntryPoint = "GetUserNameExW", ExactSpelling = true)]
            static extern unsafe global::Interop.BOOLEAN __PInvoke(int __NameFormat_native, char* __lpNameBuffer_native, uint* __lpnSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Shell32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial int SHGetKnownFolderPath(in global::System.Guid rfid, uint dwFlags, nint hToken, out string ppszPath)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ppszPath);
            ushort* __ppszPath_native = default;
            int __retVal = default;
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::System.Guid* __rfid_native = &rfid)
                {
                    __retVal = __PInvoke(__rfid_native, dwFlags, hToken, &__ppszPath_native);
                }

                // Unmarshal - Convert native data to managed data.
                ppszPath = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__ppszPath_native);
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__ppszPath_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("shell32.dll", EntryPoint = "SHGetKnownFolderPath", ExactSpelling = true)]
            static extern unsafe int __PInvoke(global::System.Guid* __rfid_native, uint __dwFlags_native, nint __hToken_native, ushort** __ppszPath_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "_aligned_malloc", ExactSpelling = true)]
        internal static extern partial void* _aligned_malloc(nuint size, nuint alignment);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "_aligned_free", ExactSpelling = true)]
        internal static extern partial void _aligned_free(void* ptr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "_aligned_realloc", ExactSpelling = true)]
        internal static extern partial void* _aligned_realloc(void* ptr, nuint size, nuint alignment);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "calloc", ExactSpelling = true)]
        internal static extern partial void* calloc(nuint num, nuint size);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "free", ExactSpelling = true)]
        internal static extern partial void free(void* ptr);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "malloc", ExactSpelling = true)]
        internal static extern partial void* malloc(nuint size);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Ucrtbase
    {
        [System.Runtime.InteropServices.DllImportAttribute("ucrtbase.dll", EntryPoint = "realloc", ExactSpelling = true)]
        internal static extern partial void* realloc(void* ptr, nuint new_size);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class User32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static unsafe partial int LoadString(nint hInstance, uint uID, char* lpBuffer, int cchBufferMax)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(hInstance, uID, lpBuffer, cchBufferMax);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "LoadStringW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hInstance_native, uint __uID_native, char* __lpBuffer_native, int __cchBufferMax_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class User32
    {
        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "SendMessageTimeoutW", ExactSpelling = true)]
        public static unsafe extern partial nint SendMessageTimeout(nint hWnd, int msg, nint wParam, nint lParam, int flags, int timeout, nint* pdwResult);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class User32
    {
        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetProcessWindowStation", ExactSpelling = true)]
        internal static extern partial nint GetProcessWindowStation();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class User32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        public static unsafe partial bool GetUserObjectInformationW(nint hObj, int nIndex, void* pvBuffer, uint nLength, ref uint lpnLengthNeeded)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (uint* __lpnLengthNeeded_native = &lpnLengthNeeded)
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(hObj, nIndex, pvBuffer, nLength, __lpnLengthNeeded_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetUserObjectInformationW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __hObj_native, int __nIndex_native, void* __pvBuffer_native, uint __nLength_native, uint* __lpnLengthNeeded_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial nint GetModuleHandle(string moduleName)
        {
            int __lastError;
            nint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __moduleName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(moduleName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__moduleName_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetModuleHandleW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(ushort* __moduleName_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetCurrentProcessorNumberEx(out global::Interop.Kernel32.PROCESSOR_NUMBER ProcNumber)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out ProcNumber);
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Interop.Kernel32.PROCESSOR_NUMBER* __ProcNumber_native = &ProcNumber)
            {
                __retVal = __PInvoke(__ProcNumber_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetCurrentProcessorNumberEx", ExactSpelling = true)]
            [System.Runtime.InteropServices.SuppressGCTransitionAttribute]
            static extern unsafe uint __PInvoke(global::Interop.Kernel32.PROCESSOR_NUMBER* __ProcNumber_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "Sleep", ExactSpelling = true)]
        internal static extern partial void Sleep(uint milliseconds);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool CloseHandle(nint handle)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke(handle);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CloseHandle", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetEvent(global::Microsoft.Win32.SafeHandles.SafeWaitHandle handle)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetEvent", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool ResetEvent(global::Microsoft.Win32.SafeHandles.SafeWaitHandle handle)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ResetEvent", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle CreateEventEx(nint lpSecurityAttributes, string name, uint flags, uint desiredAccess)
        {
            int __lastError;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(lpSecurityAttributes, (ushort*)__name_native, flags, desiredAccess);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateEventExW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __lpSecurityAttributes_native, ushort* __name_native, uint __flags_native, uint __desiredAccess_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle OpenEvent(uint desiredAccess, bool inheritHandle, string name)
        {
            int __lastError;
            int __inheritHandle_native = default;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __inheritHandle_native = (int)(inheritHandle ? 1 : 0);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(desiredAccess, __inheritHandle_native, (ushort*)__name_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "OpenEventW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(uint __desiredAccess_native, int __inheritHandle_native, ushort* __name_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial uint GetEnvironmentVariable(string lpName, ref char lpBuffer, uint nSize)
        {
            int __lastError;
            uint __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __lpBuffer_native = &lpBuffer)
            fixed (void* __lpName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke((ushort*)__lpName_native, __lpBuffer_native, nSize);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetEnvironmentVariableW", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(ushort* __lpName_native, char* __lpBuffer_native, uint __nSize_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "GetEnvironmentStringsW", ExactSpelling = true)]
        internal static unsafe extern partial char* GetEnvironmentStringsW();
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FreeEnvironmentStringsW", ExactSpelling = true)]
        internal static unsafe extern partial global::Interop.BOOL FreeEnvironmentStringsW(char* lpszEnvironmentBlock);
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        private static unsafe partial int FormatMessage(int dwFlags, nint lpSource, uint dwMessageId, int dwLanguageId, void* lpBuffer, int nSize, nint arguments)
        {
            int __lastError;
            int __retVal;
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal = __PInvoke(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, arguments);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "FormatMessageW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(int __dwFlags_native, nint __lpSource_native, uint __dwMessageId_native, int __dwLanguageId_native, void* __lpBuffer_native, int __nSize_native, nint __arguments_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle OpenMutex(uint desiredAccess, bool inheritHandle, string name)
        {
            int __lastError;
            int __inheritHandle_native = default;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __inheritHandle_native = (int)(inheritHandle ? 1 : 0);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(desiredAccess, __inheritHandle_native, (ushort*)__name_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "OpenMutexW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(uint __desiredAccess_native, int __inheritHandle_native, ushort* __name_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle CreateMutexEx(nint lpMutexAttributes, string name, uint flags, uint desiredAccess)
        {
            int __lastError;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(lpMutexAttributes, (ushort*)__name_native, flags, desiredAccess);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateMutexExW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __lpMutexAttributes_native, ushort* __name_native, uint __flags_native, uint __desiredAccess_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool ReleaseMutex(global::Microsoft.Win32.SafeHandles.SafeWaitHandle handle)
        {
            int __lastError;
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReleaseMutex", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle OpenSemaphore(uint desiredAccess, bool inheritHandle, string name)
        {
            int __lastError;
            int __inheritHandle_native = default;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __inheritHandle_native = (int)(inheritHandle ? 1 : 0);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(desiredAccess, __inheritHandle_native, (ushort*)__name_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "OpenSemaphoreW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(uint __desiredAccess_native, int __inheritHandle_native, ushort* __name_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial global::Microsoft.Win32.SafeHandles.SafeWaitHandle CreateSemaphoreEx(nint lpSecurityAttributes, int initialCount, int maximumCount, string name, uint flags, uint desiredAccess)
        {
            int __lastError;
            global::Microsoft.Win32.SafeHandles.SafeWaitHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __name_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(lpSecurityAttributes, initialCount, maximumCount, (ushort*)__name_native, flags, desiredAccess);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "CreateSemaphoreExW", ExactSpelling = true)]
            static extern unsafe nint __PInvoke(nint __lpSecurityAttributes_native, int __initialCount_native, int __maximumCount_native, ushort* __name_native, uint __flags_native, uint __desiredAccess_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool ReleaseSemaphore(global::Microsoft.Win32.SafeHandles.SafeWaitHandle handle, int releaseCount, out int previousCount)
        {
            int __lastError;
            System.Runtime.CompilerServices.Unsafe.SkipInit(out previousCount);
            nint __handle_native = default;
            bool __retVal = default;
            int __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeWaitHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __previousCount_native = &previousCount)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(__handle_native, releaseCount, __previousCount_native);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "ReleaseSemaphore", ExactSpelling = true)]
            static extern unsafe int __PInvoke(nint __handle_native, int __releaseCount_native, int* __previousCount_native);
        }
    }
}
internal static unsafe partial class Interop
{
    internal static unsafe partial class Kernel32
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        internal static partial bool SetEnvironmentVariable(string lpName, string lpValue)
        {
            int __lastError;
            bool __retVal;
            int __retVal_native;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __lpValue_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpValue))
            fixed (void* __lpName_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(lpName))
            {
                System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                __retVal_native = __PInvoke((ushort*)__lpName_native, (ushort*)__lpValue_native);
                __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("kernel32.dll", EntryPoint = "SetEnvironmentVariableW", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __lpName_native, ushort* __lpValue_native);
        }
    }
}
