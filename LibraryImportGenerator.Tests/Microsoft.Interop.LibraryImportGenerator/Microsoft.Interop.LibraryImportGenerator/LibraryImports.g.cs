// <auto-generated/>
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int Sum(int[] values, int numValues)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __values_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(values))
                {
                    __retVal = __PInvoke((int*)__values_native, numValues);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int Sum(ref int values, int numValues)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (int* __values_native = &values)
                {
                    __retVal = __PInvoke(__values_native, numValues);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SumInArray(in int[] values, int numValues)
            {
                int* __values_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn __values_native__marshaller = new();
                int __values_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native__marshaller.FromManaged(values, stackalloc int[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.BufferSize]);
                    __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __values_native__unused = __values_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __values_native = __values_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(&__values_native, numValues);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __values_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array_ref", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Duplicate(ref int[] values, int numValues)
            {
                int* __values_native = default;
                // Setup - Perform required setup.
                int __values_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                    {
                        __PInvoke(&__values_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __values_native__numElements = numValues;
                    values = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForManagedElements(__values_native, __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesSource(__values_native, __values_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesDestination(values));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free(__values_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "duplicate_int_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int[] CreateRange(int start, int end, out int numValues)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                int[] __retVal = default;
                int* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numValues_native = &numValues)
                    {
                        __retVal_native = __PInvoke(start, end, __numValues_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numValues;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesDestination(__retVal));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int __start_native, int __end_native, int* __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void CreateRange_Out(int start, int end, out int numValues, out int[] res)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
                int* __res_native = default;
                // Setup - Perform required setup.
                int __res_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __res_native__numElements);
                ;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numValues_native = &numValues)
                    {
                        __PInvoke(start, end, __numValues_native, &__res_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __res_native__numElements = numValues;
                    res = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForManagedElements(__res_native, __res_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesSource(__res_native, __res_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesDestination(res));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free(__res_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array_out", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int __start_native, int __end_native, int* __numValues_native, int** __res_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SumChars(char[] chars, int numElements)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __chars_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(chars))
                {
                    __retVal = __PInvoke((char*)__chars_native, numElements);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_char_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(char* __chars_native, int __numElements_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void FillChars(char[] chars, int length, ushort start)
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __chars_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.ManagedToUnmanagedIn.GetPinnableReference(chars))
                {
                    __PInvoke((char*)__chars_native, length, start);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "fill_char_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(char* __chars_native, int __length_native, ushort __start_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void ReverseChars(ref char[] chars, int numElements)
            {
                char* __chars_native = default;
                // Setup - Perform required setup.
                int __chars_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __chars_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __chars_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.AllocateContainerForUnmanagedElements(chars, out __chars_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.GetManagedValuesSource(chars).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.GetUnmanagedValuesDestination(__chars_native, __chars_native__numElements));
                    {
                        __PInvoke(&__chars_native, numElements);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __chars_native__numElements = numElements;
                    chars = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.AllocateContainerForManagedElements(__chars_native, __chars_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.GetUnmanagedValuesSource(__chars_native, __chars_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.GetManagedValuesDestination(chars));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<char, char>.Free(__chars_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_char_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(char** __chars_native, int __numElements_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SumStringLengths(string[] strArray)
            {
                System.IntPtr* __strArray_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __strArray_native__marshaller = new();
                int __strArray_native__numElements;
                int __strArray_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __strArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strArray_native__marshaller.FromManaged(strArray, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<string> __strArray_native__managedSpan = __strArray_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__managedSpan.Length; ++__i0, ++__strArray_native__lastIndexMarshalled)
                        {
                            __strArray_native__nativeSpan[__i0] = (System.IntPtr)(ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(__strArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __strArray_native__unused = __strArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __strArray_native = __strArray_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__strArray_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__strArray_native__nativeSpan[__i0]);
                        }
                    }

                    __strArray_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_string_lengths", ExactSpelling = true)]
                static extern unsafe int __PInvoke(System.IntPtr* __strArray_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void ReverseStrings_Ref(ref string[] strArray, out int numElements)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numElements);
                System.IntPtr* __strArray_native = default;
                // Setup - Perform required setup.
                int __strArray_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __strArray_native__numElements);
                int __strArray_native__lastIndexMarshalled = 0;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strArray_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.AllocateContainerForUnmanagedElements(strArray, out __strArray_native__numElements);
                    {
                        System.ReadOnlySpan<string> __strArray_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetManagedValuesSource(strArray);
                        System.Span<System.IntPtr> __strArray_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesDestination(__strArray_native, __strArray_native__numElements);
                        for (int __i0 = 0; __i0 < __strArray_native__managedSpan.Length; ++__i0, ++__strArray_native__lastIndexMarshalled)
                        {
                            __strArray_native__nativeSpan[__i0] = (System.IntPtr)(ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(__strArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numElements_native = &numElements)
                    {
                        __PInvoke(&__strArray_native, __numElements_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __strArray_native__numElements = numElements;
                    strArray = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.AllocateContainerForManagedElements(__strArray_native, __strArray_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __strArray_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesSource(__strArray_native, __strArray_native__numElements);
                        System.Span<string> __strArray_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetManagedValuesDestination(strArray);
                        for (int __i0 = 0; __i0 < __strArray_native__numElements; ++__i0)
                        {
                            __strArray_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged((ushort*)__strArray_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __strArray_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesDestination(__strArray_native, __strArray_native__numElements);
                        for (int __i0 = 0; __i0 < __strArray_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__strArray_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.Free(__strArray_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_strings_replace", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr** __strArray_native, int* __numElements_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string[] ReverseStrings_Return(string[] strArray, out int numElements)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numElements);
                System.IntPtr* __strArray_native = default;
                string[] __retVal = default;
                System.IntPtr* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __strArray_native__marshaller = new();
                int __strArray_native__numElements;
                int __strArray_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __strArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strArray_native__marshaller.FromManaged(strArray, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<string> __strArray_native__managedSpan = __strArray_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__managedSpan.Length; ++__i0, ++__strArray_native__lastIndexMarshalled)
                        {
                            __strArray_native__nativeSpan[__i0] = (System.IntPtr)(ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(__strArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numElements_native = &numElements)
                    fixed (void* __strArray_native__unused = __strArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __strArray_native = __strArray_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__strArray_native, __numElements_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numElements;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __retVal_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements);
                        System.Span<string> __retVal_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetManagedValuesDestination(__retVal);
                        for (int __i0 = 0; __i0 < __retVal_native__numElements; ++__i0)
                        {
                            __retVal_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged((ushort*)__retVal_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __retVal_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesDestination(__retVal_native, __retVal_native__numElements);
                        for (int __i0 = 0; __i0 < __retVal_native__nativeSpan.Length; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__retVal_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.Free(__retVal_native);
                    {
                        System.ReadOnlySpan<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__strArray_native__nativeSpan[__i0]);
                        }
                    }

                    __strArray_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_strings_return", ExactSpelling = true)]
                static extern unsafe System.IntPtr* __PInvoke(System.IntPtr* __strArray_native, int* __numElements_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void ReverseStrings_Out(string[] strArray, out int numElements, out string[] res)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numElements);
                System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
                System.IntPtr* __strArray_native = default;
                System.IntPtr* __res_native = default;
                // Setup - Perform required setup.
                int __res_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __res_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __strArray_native__marshaller = new();
                int __strArray_native__numElements;
                int __strArray_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __strArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strArray_native__marshaller.FromManaged(strArray, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<string> __strArray_native__managedSpan = __strArray_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__managedSpan.Length; ++__i0, ++__strArray_native__lastIndexMarshalled)
                        {
                            __strArray_native__nativeSpan[__i0] = (System.IntPtr)(ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(__strArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numElements_native = &numElements)
                    fixed (void* __strArray_native__unused = __strArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __strArray_native = __strArray_native__marshaller.ToUnmanaged();
                        __PInvoke(__strArray_native, __numElements_native, &__res_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __res_native__numElements = numElements;
                    res = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.AllocateContainerForManagedElements(__res_native, __res_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __res_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesSource(__res_native, __res_native__numElements);
                        System.Span<string> __res_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetManagedValuesDestination(res);
                        for (int __i0 = 0; __i0 < __res_native__numElements; ++__i0)
                        {
                            __res_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged((ushort*)__res_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __res_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.GetUnmanagedValuesDestination(__res_native, __res_native__numElements);
                        for (int __i0 = 0; __i0 < __res_native__nativeSpan.Length; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__res_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.Free(__res_native);
                    {
                        System.ReadOnlySpan<System.IntPtr> __strArray_native__nativeSpan = __strArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __strArray_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free((ushort*)__strArray_native__nativeSpan[__i0]);
                        }
                    }

                    __strArray_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_strings_out", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr* __strArray_native, int* __numElements_native, System.IntPtr** __res_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial byte[] GetLongBytes(long l)
            {
                byte[] __retVal = default;
                byte* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                try
                {
                    {
                        __retVal_native = __PInvoke(l);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = 8;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.GetManagedValuesDestination(__retVal));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<byte, byte>.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_long_bytes", ExactSpelling = true)]
                static extern unsafe byte* __PInvoke(long __l_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Append(ref int[] values, int numOriginalValues, int newValue)
            {
                int* __values_native = default;
                // Setup - Perform required setup.
                int __values_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                    {
                        __PInvoke(&__values_native, numOriginalValues, newValue);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __values_native__numElements = checked(1 + numOriginalValues);
                    values = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForManagedElements(__values_native, __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesSource(__values_native, __values_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesDestination(values));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free(__values_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "append_int_to_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int** __values_native, int __numOriginalValues_native, int __newValue_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool FillRangeArray(global::SharedTypes.IntStructWrapper[] array, int length, int start)
            {
                global::SharedTypes.IntStructWrapperNative* __array_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, global::SharedTypes.IntStructWrapperNative>.ManagedToUnmanagedIn __array_native__marshaller = new();
                int __array_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __array_native__marshaller.FromManaged(array, stackalloc global::SharedTypes.IntStructWrapperNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, global::SharedTypes.IntStructWrapperNative>.ManagedToUnmanagedIn.BufferSize]);
                    __array_native__marshaller.GetUnmanagedValuesDestination().Clear();
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __array_native__unused = __array_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __array_native = __array_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__array_native, length, start);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                    {
                        __array_native__numElements = __array_native__marshaller.GetManagedValuesSource().Length;
                        System.Span<global::SharedTypes.IntStructWrapper> __array_native__managedSpan = System.Runtime.InteropServices.MemoryMarshal.CreateSpan(ref System.Runtime.CompilerServices.Unsafe.AsRef(in __array_native__marshaller.GetManagedValuesSource().GetPinnableReference()), __array_native__numElements);
                        System.Span<global::SharedTypes.IntStructWrapperNative> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__numElements; ++__i0)
                        {
                            __array_native__managedSpan[__i0] = global::SharedTypes.IntStructWrapperMarshaller.ConvertToManaged(__array_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __array_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "fill_range_array", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.IntStructWrapperNative* __array_native, int __length_native, int __start_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void DoubleValues(global::SharedTypes.IntStructWrapper[] array, int length)
            {
                global::SharedTypes.IntStructWrapperNative* __array_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, global::SharedTypes.IntStructWrapperNative>.ManagedToUnmanagedIn __array_native__marshaller = new();
                int __array_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __array_native__marshaller.FromManaged(array, stackalloc global::SharedTypes.IntStructWrapperNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, global::SharedTypes.IntStructWrapperNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.IntStructWrapper> __array_native__managedSpan = __array_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.IntStructWrapperNative> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__managedSpan.Length; ++__i0)
                        {
                            __array_native__nativeSpan[__i0] = global::SharedTypes.IntStructWrapperMarshaller.ConvertToUnmanaged(__array_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __array_native__unused = __array_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __array_native = __array_native__marshaller.ToUnmanaged();
                        __PInvoke(__array_native, length);
                    }

                    // Unmarshal - Convert native data to managed data.
                    {
                        __array_native__numElements = __array_native__marshaller.GetManagedValuesSource().Length;
                        System.Span<global::SharedTypes.IntStructWrapper> __array_native__managedSpan = System.Runtime.InteropServices.MemoryMarshal.CreateSpan(ref System.Runtime.CompilerServices.Unsafe.AsRef(in __array_native__marshaller.GetManagedValuesSource().GetPinnableReference()), __array_native__numElements);
                        System.Span<global::SharedTypes.IntStructWrapperNative> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__numElements; ++__i0)
                        {
                            __array_native__managedSpan[__i0] = global::SharedTypes.IntStructWrapperMarshaller.ConvertToManaged(__array_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __array_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_values", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.IntStructWrapperNative* __array_native, int __length_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool AndAllMembers(global::SharedTypes.BoolStruct[] pArray, int length)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pArray_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __pArray_native__marshaller = new();
                int __pArray_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pArray_native__marshaller.FromManaged(pArray, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = __pArray_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = __pArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                        {
                            __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pArray_native__unused = __pArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __pArray_native = __pArray_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__pArray_native, length);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __pArray_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pArray_native, int __length_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool AndAllMembersIn(in global::SharedTypes.BoolStruct[] pArray, int length)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pArray_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __pArray_native__marshaller = new();
                int __pArray_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pArray_native__marshaller.FromManaged(pArray, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = __pArray_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = __pArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                        {
                            __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pArray_native__unused = __pArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __pArray_native = __pArray_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(&__pArray_native, length);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __pArray_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array_in", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative** __pArray_native, int __length_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBools(ref global::SharedTypes.BoolStruct[] boolStruct, int numValues)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native = default;
                // Setup - Perform required setup.
                int __boolStruct_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(boolStruct);
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    {
                        __PInvoke(&__boolStruct_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __boolStruct_native__numElements = numValues;
                    boolStruct = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__boolStruct_native, __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__boolStruct_native, __boolStruct_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(boolStruct);
                        for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                        {
                            __boolStruct_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__boolStruct_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__boolStruct_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_ref", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative** __boolStruct_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBools(global::SharedTypes.BoolStruct[] boolStruct, int numValues, out global::SharedTypes.BoolStruct[] pBoolStructOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native = default;
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pBoolStructOut_native = default;
                // Setup - Perform required setup.
                int __pBoolStructOut_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __boolStruct_native__marshaller = new();
                int __boolStruct_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                        __PInvoke(__boolStruct_native, numValues, &__pBoolStructOut_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __pBoolStructOut_native__numElements = numValues;
                    pBoolStructOut = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pBoolStructOut_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __pBoolStructOut_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(pBoolStructOut);
                        for (int __i0 = 0; __i0 < __pBoolStructOut_native__numElements; ++__i0)
                        {
                            __pBoolStructOut_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__pBoolStructOut_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__pBoolStructOut_native);
                    __boolStruct_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_out", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native, int __numValues_native, global::SharedTypes.BoolStructMarshaller.BoolStructNative** __pBoolStructOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.BoolStruct[] NegateBools(global::SharedTypes.BoolStruct[] boolStruct, int numValues)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native = default;
                global::SharedTypes.BoolStruct[] __retVal = default;
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __boolStruct_native__marshaller = new();
                int __boolStruct_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__boolStruct_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numValues;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __retVal_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __retVal_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(__retVal);
                        for (int __i0 = 0; __i0 < __retVal_native__numElements; ++__i0)
                        {
                            __retVal_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__retVal_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__retVal_native);
                    __boolStruct_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_return", ExactSpelling = true)]
                static extern unsafe global::SharedTypes.BoolStructMarshaller.BoolStructNative* __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int[][] TransposeMatrix(int[][] matrix, int[] numRows, int numColumns)
            {
                System.IntPtr* __matrix_native = default;
                int[][] __retVal = default;
                System.IntPtr* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.ManagedToUnmanagedIn __matrix_native__marshaller = new();
                int __matrix_native__numElements;
                int __matrix_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __matrix_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __matrix_native__marshaller.FromManaged(matrix, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<int[]> __matrix_native__managedSpan = __matrix_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __matrix_native__nativeSpan = __matrix_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __matrix_native__managedSpan.Length; ++__i0, ++__matrix_native__lastIndexMarshalled)
                        {
                            int __matrix_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __matrix_native__nativeSpan____i0__numElements);
                            ;
                            __matrix_native__nativeSpan[__i0] = (System.IntPtr)global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForUnmanagedElements(__matrix_native__managedSpan[__i0], out __matrix_native__nativeSpan____i0__numElements);
                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesSource(__matrix_native__managedSpan[__i0]).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesDestination((int*)__matrix_native__nativeSpan[__i0], __matrix_native__nativeSpan____i0__numElements));
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __numRows_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(numRows))
                    fixed (void* __matrix_native__unused = __matrix_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __matrix_native = __matrix_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__matrix_native, (int*)__numRows_native, numColumns);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numColumns;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __retVal_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements);
                        System.Span<int[]> __retVal_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.GetManagedValuesDestination(__retVal);
                        for (int __i0 = 0; __i0 < __retVal_native__numElements; ++__i0)
                        {
                            int __retVal_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__nativeSpan____i0__numElements);
                            ;
                            __retVal_native__nativeSpan____i0__numElements = numRows[__i0];
                            __retVal_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.AllocateContainerForManagedElements((int*)__retVal_native__nativeSpan[__i0], __retVal_native__nativeSpan____i0__numElements);
                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetUnmanagedValuesSource((int*)__retVal_native__nativeSpan[__i0], __retVal_native__nativeSpan____i0__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.GetManagedValuesDestination(__retVal_native__managedSpan[__i0]));
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __retVal_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.GetUnmanagedValuesDestination(__retVal_native, __retVal_native__numElements);
                        for (int __i0 = 0; __i0 < __retVal_native__nativeSpan.Length; ++__i0)
                        {
                            int __retVal_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__nativeSpan____i0__numElements);
                            ;
                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free((int*)__retVal_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int[], System.IntPtr>.Free(__retVal_native);
                    {
                        System.ReadOnlySpan<System.IntPtr> __matrix_native__nativeSpan = __matrix_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __matrix_native__lastIndexMarshalled; ++__i0)
                        {
                            int __matrix_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __matrix_native__nativeSpan____i0__numElements);
                            ;
                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.Free((int*)__matrix_native__nativeSpan[__i0]);
                        }
                    }

                    __matrix_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "transpose_matrix", ExactSpelling = true)]
                static extern unsafe System.IntPtr* __PInvoke(System.IntPtr* __matrix_native, int* __numRows_native, int __numColumns_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static unsafe partial int Sum(int*[] values, int numValues)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __values_native = &global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.ManagedToUnmanagedIn.GetPinnableReference(values))
                {
                    __retVal = __PInvoke((nint*)__values_native, numValues);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_ptr_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(nint* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static unsafe partial int SumInArray(in int*[] values, int numValues)
            {
                nint* __values_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.ManagedToUnmanagedIn __values_native__marshaller = new();
                int __values_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native__marshaller.FromManaged(values, stackalloc nint[global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.ManagedToUnmanagedIn.BufferSize]);
                    __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __values_native__unused = __values_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __values_native = __values_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(&__values_native, numValues);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __values_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_ptr_array_ref", ExactSpelling = true)]
                static extern unsafe int __PInvoke(nint** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static unsafe partial void Duplicate(ref int*[] values, int numValues)
            {
                nint* __values_native = default;
                // Setup - Perform required setup.
                int __values_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native = global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetManagedValuesSource(values).CopyTo(global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                    {
                        __PInvoke(&__values_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __values_native__numElements = numValues;
                    values = global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.AllocateContainerForManagedElements(__values_native, __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetUnmanagedValuesSource(__values_native, __values_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetManagedValuesDestination(values));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.Free(__values_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "duplicate_int_ptr_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Arrays
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static unsafe partial int*[] ReturnDuplicate(int*[] values, int numValues)
            {
                int*[] __retVal = default;
                nint* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __values_native = &global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.ManagedToUnmanagedIn.GetPinnableReference(values))
                    {
                        __retVal_native = __PInvoke((nint*)__values_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numValues;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.GetManagedValuesDestination(__retVal));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller<int, nint>.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_duplicate_int_ptr_array", ExactSpelling = true)]
                static extern unsafe nint* __PInvoke(nint* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_return_instance", ExactSpelling = true)]
        public static extern partial global::SharedTypes.IntFields DoubleIntFields(global::SharedTypes.IntFields result);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void DoubleIntFieldsByRef(ref global::SharedTypes.IntFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.IntFields* __result_native = &result)
            {
                __PInvoke(__result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_double_intfields_byref", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.IntFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void DoubleIntFieldsByRefIn(in global::SharedTypes.IntFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.IntFields* __result_native = &result)
            {
                __PInvoke(__result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_double_intfields_byref", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.IntFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void DoubleIntFieldsRefReturn(global::SharedTypes.IntFields input, ref global::SharedTypes.IntFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.IntFields* __result_native = &result)
            {
                __PInvoke(input, __result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_double_intfields_refreturn", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.IntFields __input_native, global::SharedTypes.IntFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void DoubleIntFieldsOutReturn(global::SharedTypes.IntFields input, out global::SharedTypes.IntFields result)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out result);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.IntFields* __result_native = &result)
            {
                __PInvoke(input, __result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_double_intfields_refreturn", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.IntFields __input_native, global::SharedTypes.IntFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void IncrementInvertPointerFieldsByRef(ref global::SharedTypes.PointerFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.PointerFields* __result_native = &result)
            {
                __PInvoke(__result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_increment_invert_ptrfields_byref", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.PointerFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void IncrementInvertPointerFieldsByRefIn(in global::SharedTypes.PointerFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.PointerFields* __result_native = &result)
            {
                __PInvoke(__result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_increment_invert_ptrfields_byref", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.PointerFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void IncrementInvertPointerFieldsRefReturn(global::SharedTypes.PointerFields input, ref global::SharedTypes.PointerFields result)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::SharedTypes.PointerFields* __result_native = &result)
            {
                __PInvoke(input, __result_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_increment_invert_ptrfields_refreturn", ExactSpelling = true)]
            static extern unsafe void __PInvoke(global::SharedTypes.PointerFields __input_native, global::SharedTypes.PointerFields* __result_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnByteBoolAsUInt(bool input)
        {
            byte __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (byte)(input ? 1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "bytebool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(byte __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnSByteBoolAsUInt(bool input)
        {
            sbyte __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (sbyte)(input ? 1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "bytebool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(sbyte __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnVariantBoolAsUInt(bool input)
        {
            short __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (short)(input ? -1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "variantbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(short __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnIntBoolAsUInt(bool input)
        {
            int __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (int)(input ? 1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(int __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnUIntBoolAsUInt(bool input)
        {
            uint __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (uint)(input ? 1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(uint __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial uint ReturnWinBoolAsUInt(bool input)
        {
            int __input_native;
            uint __retVal;
            // Marshal - Convert managed data to native data.
            __input_native = (int)(input ? 1 : 0);
            {
                __retVal = __PInvoke(__input_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe uint __PInvoke(int __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool ReturnUIntAsByteBool(uint input)
        {
            bool __retVal;
            byte __retVal_native;
            {
                __retVal_native = __PInvoke(input);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe byte __PInvoke(uint __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool ReturnUIntAsVariantBool(uint input)
        {
            bool __retVal;
            short __retVal_native;
            {
                __retVal_native = __PInvoke(input);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native == -1;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe short __PInvoke(uint __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool ReturnUIntAsWinBool(uint input)
        {
            bool __retVal;
            int __retVal_native;
            {
                __retVal_native = __PInvoke(input);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "winbool_return_as_uint", ExactSpelling = true)]
            static extern unsafe int __PInvoke(uint __input_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsByteBool_Ref(uint input, ref bool res)
        {
            byte __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (byte)(res ? 1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native != 0;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, byte* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsByteBool_Out(uint input, out bool res)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
            byte __res_native;
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native != 0;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, byte* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsByteBool_In(uint input, in bool res)
        {
            byte __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (byte)(res ? 1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, byte* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsVariantBool_Ref(uint input, ref bool res)
        {
            short __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (short)(res ? -1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native == -1;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refvariantbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, short* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsVariantBool_Out(uint input, out bool res)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
            short __res_native;
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native == -1;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refvariantbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, short* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsVariantBool_In(uint input, in bool res)
        {
            short __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (short)(res ? -1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refvariantbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, short* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsWinBool_Ref(uint input, ref bool res)
        {
            int __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (int)(res ? 1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native != 0;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refwinbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, int* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsWinBool_Out(uint input, out bool res)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
            int __res_native;
            {
                __PInvoke(input, &__res_native);
            }

            // Unmarshal - Convert native data to managed data.
            res = __res_native != 0;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refwinbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, int* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsWinBool_In(uint input, in bool res)
        {
            int __res_native;
            // Marshal - Convert managed data to native data.
            __res_native = (int)(res ? 1 : 0);
            {
                __PInvoke(input, &__res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "uint_return_as_refwinbool", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, int* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    internal unsafe partial class NativeExportsNE
    {
        internal unsafe partial class CallingConventions
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "add_integers_cdecl", ExactSpelling = true)]
            public static extern partial long AddLongsCdecl(long i, long j, long k, long l, long m, long n, long o, long p, long q);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    internal unsafe partial class NativeExportsNE
    {
        internal unsafe partial class CallingConventions
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "add_integers_stdcall", ExactSpelling = true)]
            public static extern partial long AddLongsStdcall(long i, long j, long k, long l, long m, long n, long o, long p, long q);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "ushort_return_as_uint", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        public static extern partial uint ReturnUnicodeAsUInt(char input);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_uint", ExactSpelling = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        public static extern partial char ReturnUIntAsUnicode(uint input);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsUnicode_Ref(uint input, ref char res)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __res_native = &res)
            {
                __PInvoke(input, __res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_refushort", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, char* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsUnicode_Out(uint input, out char res)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __res_native = &res)
            {
                __PInvoke(input, __res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_refushort", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, char* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReturnUIntAsUnicode_In(uint input, in char res)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __res_native = &res)
            {
                __PInvoke(input, __res_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_refushort", ExactSpelling = true)]
            static extern unsafe void __PInvoke(uint __input_native, char* __res_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_uint", ExactSpelling = true)]
        public static extern partial char ReturnU2AsU2IgnoreCharSet(char input);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_return_as_uint", ExactSpelling = true)]
        public static extern partial char ReturnI2AsI2IgnoreCharSet(char input);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReverseBuffer(ref char buffer, int len)
        {
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (char* __buffer_native = &buffer)
            {
                __PInvoke(__buffer_native, len);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "char_reverse_buffer_ref", ExactSpelling = true)]
            static extern unsafe void __PInvoke(char* __buffer_native, int __len_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Utf8StringSpan(global::System.ReadOnlySpan<string> s)
            {
                System.IntPtr* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __s_native__marshaller = new();
                int __s_native__numElements;
                int __s_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __s_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<string> __s_native__managedSpan = __s_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __s_native__nativeSpan = __s_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __s_native__managedSpan.Length; ++__i0, ++__s_native__lastIndexMarshalled)
                        {
                            __s_native__nativeSpan[__i0] = (System.IntPtr)(byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(__s_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native__unused = __s_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __s_native__nativeSpan = __s_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __s_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free((byte*)__s_native__nativeSpan[__i0]);
                        }
                    }

                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "Utf8StringSpan", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Utf8StringArray(string[] s)
            {
                System.IntPtr* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn __s_native__marshaller = new();
                int __s_native__numElements;
                int __s_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __s_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<string, System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<string> __s_native__managedSpan = __s_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __s_native__nativeSpan = __s_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __s_native__managedSpan.Length; ++__i0, ++__s_native__lastIndexMarshalled)
                        {
                            __s_native__nativeSpan[__i0] = (System.IntPtr)(byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(__s_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native__unused = __s_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __s_native__nativeSpan = __s_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __s_native__lastIndexMarshalled; ++__i0)
                        {
                            global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free((byte*)__s_native__nativeSpan[__i0]);
                        }
                    }

                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "Utf8StringArray", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void MarshalSingleDimensionalArray(global::SharedTypes.BoolStruct[] c)
            {
                nint* __c_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.ManagedToUnmanagedIn __c_native__marshaller = new();
                int __c_native__numElements;
                int __c_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __c_native__marshaller.FromManaged(c, stackalloc nint[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __c_native__managedSpan = __c_native__marshaller.GetManagedValuesSource();
                        System.Span<nint> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__managedSpan.Length; ++__i0, ++__c_native__lastIndexMarshalled)
                        {
                            __c_native__nativeSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.ConvertToUnmanaged(__c_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __c_native__unused = __c_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __c_native = __c_native__marshaller.ToUnmanaged();
                        __PInvoke(__c_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.Free(__c_native__nativeSpan[__i0]);
                        }
                    }

                    __c_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "MarshalSingleDimensionalArray", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint* __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void MarshalMultidimensionalArray_CheckOuterArrayIsIndexTracked(global::SharedTypes.BoolStruct[][] c)
            {
                nint* __c_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.ManagedToUnmanagedIn __c_native__marshaller = new();
                int __c_native__numElements;
                int __c_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __c_native__marshaller.FromManaged(c, stackalloc nint[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct[]> __c_native__managedSpan = __c_native__marshaller.GetManagedValuesSource();
                        System.Span<nint> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__managedSpan.Length; ++__i0, ++__c_native__lastIndexMarshalled)
                        {
                            __c_native__nativeSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStructArray.ConvertToUnmanaged(__c_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __c_native__unused = __c_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __c_native = __c_native__marshaller.ToUnmanaged();
                        __PInvoke(__c_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStructArray.Free(__c_native__nativeSpan[__i0]);
                        }
                    }

                    __c_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "MarshalMultidimensionalArray_CheckOuterArrayIsIndexTracked", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint* __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void MarshalMultidimensionalArray_CheckInnerArraysAreCleared(global::SharedTypes.BoolStruct[][] c)
            {
                System.IntPtr* __c_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.ManagedToUnmanagedIn __c_native__marshaller = new();
                int __c_native__numElements;
                int __c_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __c_native__marshaller.FromManaged(c, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct[]> __c_native__managedSpan = __c_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__managedSpan.Length; ++__i0, ++__c_native__lastIndexMarshalled)
                        {
                            int __c_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__nativeSpan____i0__numElements);
                            ;
                            __c_native__nativeSpan[__i0] = (System.IntPtr)global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForUnmanagedElements(__c_native__managedSpan[__i0], out __c_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<global::SharedTypes.BoolStruct> __c_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesSource(__c_native__managedSpan[__i0]);
                                System.Span<nint> __c_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination((nint*)__c_native__nativeSpan[__i0], __c_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __c_native__nativeSpan____i0__managedSpan.Length; ++__i1)
                                {
                                    __c_native__nativeSpan____i0__nativeSpan[__i1] = global::LibraryImportGenerator.IntegrationTests.EnforceClearedMemoryCleanup.ConvertToUnmanaged(__c_native__nativeSpan____i0__managedSpan[__i1]);
                                }
                            }
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __c_native__unused = __c_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __c_native = __c_native__marshaller.ToUnmanaged();
                        __PInvoke(__c_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __c_native__nativeSpan = __c_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __c_native__lastIndexMarshalled; ++__i0)
                        {
                            int __c_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__nativeSpan____i0__numElements);
                            ;
                            {
                                System.ReadOnlySpan<nint> __c_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination((nint*)__c_native__nativeSpan[__i0], __c_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __c_native__nativeSpan____i0__nativeSpan.Length; ++__i1)
                                {
                                    global::LibraryImportGenerator.IntegrationTests.EnforceClearedMemoryCleanup.Free(__c_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }

                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free((nint*)__c_native__nativeSpan[__i0]);
                        }
                    }

                    __c_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "MarshalMultidimensionalArray_CheckInnerArraysAreCleared", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr* __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void MarshalArray_Ref(ref global::SharedTypes.BoolStruct[] c)
            {
                nint* __c_native = default;
                // Setup - Perform required setup.
                int __c_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __c_native__numElements);
                int __c_native__lastIndexMarshalled = 0;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __c_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForUnmanagedElements(c, out __c_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __c_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesSource(c);
                        System.Span<nint> __c_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination(__c_native, __c_native__numElements);
                        for (int __i0 = 0; __i0 < __c_native__managedSpan.Length; ++__i0, ++__c_native__lastIndexMarshalled)
                        {
                            __c_native__nativeSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.ConvertToUnmanaged(__c_native__managedSpan[__i0]);
                        }
                    }

                    {
                        __PInvoke(&__c_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __c_native__numElements = 10;
                    c = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForManagedElements(__c_native, __c_native__numElements);
                    {
                        System.ReadOnlySpan<nint> __c_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesSource(__c_native, __c_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __c_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesDestination(c);
                        for (int __i0 = 0; __i0 < __c_native__numElements; ++__i0)
                        {
                            __c_native__managedSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.ConvertToManaged(__c_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __c_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination(__c_native, __c_native__numElements);
                        for (int __i0 = 0; __i0 < __c_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.Free(__c_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free(__c_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "MarshalArray_Ref", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint** __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBoolsOut(global::SharedTypes.BoolStruct[] boolStruct, int numValues, out global::SharedTypes.BoolStruct[] pBoolStructOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native = default;
                nint* __pBoolStructOut_native = default;
                // Setup - Perform required setup.
                int __pBoolStructOut_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __boolStruct_native__marshaller = new();
                int __boolStruct_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                        __PInvoke(__boolStruct_native, numValues, &__pBoolStructOut_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __pBoolStructOut_native__numElements = numValues;
                    pBoolStructOut = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForManagedElements(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                    {
                        System.ReadOnlySpan<nint> __pBoolStructOut_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesSource(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __pBoolStructOut_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesDestination(pBoolStructOut);
                        for (int __i0 = 0; __i0 < __pBoolStructOut_native__numElements; ++__i0)
                        {
                            __pBoolStructOut_native__managedSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpBoolStruct.ConvertToManaged(__pBoolStructOut_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __pBoolStructOut_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        for (int __i0 = 0; __i0 < __pBoolStructOut_native__nativeSpan.Length; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpBoolStruct.Free(__pBoolStructOut_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free(__pBoolStructOut_native);
                    __boolStruct_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_out", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native, int __numValues_native, nint** __pBoolStructOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBoolsOut2D(global::SharedTypes.BoolStruct[][] boolStruct, int length, int[] widths, out global::SharedTypes.BoolStruct[][] pBoolStructOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                System.IntPtr* __boolStruct_native = default;
                System.IntPtr* __pBoolStructOut_native = default;
                // Setup - Perform required setup.
                int __pBoolStructOut_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__numElements);
                ;
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.ManagedToUnmanagedIn __boolStruct_native__marshaller = new();
                int __boolStruct_native__numElements;
                int __boolStruct_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct[]> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                        System.Span<System.IntPtr> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0, ++__boolStruct_native__lastIndexMarshalled)
                        {
                            int __boolStruct_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__nativeSpan____i0__numElements);
                            ;
                            __boolStruct_native__nativeSpan[__i0] = (System.IntPtr)global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(__boolStruct_native__managedSpan[__i0], out __boolStruct_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(__boolStruct_native__managedSpan[__i0]);
                                System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination((global::SharedTypes.BoolStructMarshaller.BoolStructNative*)__boolStruct_native__nativeSpan[__i0], __boolStruct_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __boolStruct_native__nativeSpan____i0__managedSpan.Length; ++__i1)
                                {
                                    __boolStruct_native__nativeSpan____i0__nativeSpan[__i1] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__nativeSpan____i0__managedSpan[__i1]);
                                }
                            }
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __widths_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(widths))
                    fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                        __PInvoke(__boolStruct_native, length, (int*)__widths_native, &__pBoolStructOut_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __pBoolStructOut_native__numElements = length;
                    pBoolStructOut = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.AllocateContainerForManagedElements(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __pBoolStructOut_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetUnmanagedValuesSource(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct[]> __pBoolStructOut_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetManagedValuesDestination(pBoolStructOut);
                        for (int __i0 = 0; __i0 < __pBoolStructOut_native__numElements; ++__i0)
                        {
                            int __pBoolStructOut_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__nativeSpan____i0__numElements);
                            ;
                            __pBoolStructOut_native__nativeSpan____i0__numElements = widths[__i0];
                            __pBoolStructOut_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForManagedElements((nint*)__pBoolStructOut_native__nativeSpan[__i0], __pBoolStructOut_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<nint> __pBoolStructOut_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesSource((nint*)__pBoolStructOut_native__nativeSpan[__i0], __pBoolStructOut_native__nativeSpan____i0__numElements);
                                System.Span<global::SharedTypes.BoolStruct> __pBoolStructOut_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesDestination(__pBoolStructOut_native__managedSpan[__i0]);
                                for (int __i1 = 0; __i1 < __pBoolStructOut_native__nativeSpan____i0__numElements; ++__i1)
                                {
                                    __pBoolStructOut_native__nativeSpan____i0__managedSpan[__i1] = global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpBoolStruct.ConvertToManaged(__pBoolStructOut_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __pBoolStructOut_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetUnmanagedValuesDestination(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        for (int __i0 = 0; __i0 < __pBoolStructOut_native__nativeSpan.Length; ++__i0)
                        {
                            int __pBoolStructOut_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__nativeSpan____i0__numElements);
                            ;
                            {
                                System.ReadOnlySpan<nint> __pBoolStructOut_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination((nint*)__pBoolStructOut_native__nativeSpan[__i0], __pBoolStructOut_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __pBoolStructOut_native__nativeSpan____i0__nativeSpan.Length; ++__i1)
                                {
                                    global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpBoolStruct.Free(__pBoolStructOut_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }

                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free((nint*)__pBoolStructOut_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.Free(__pBoolStructOut_native);
                    {
                        System.ReadOnlySpan<System.IntPtr> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __boolStruct_native__lastIndexMarshalled; ++__i0)
                        {
                            int __boolStruct_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__nativeSpan____i0__numElements);
                            ;
                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free((global::SharedTypes.BoolStructMarshaller.BoolStructNative*)__boolStruct_native__nativeSpan[__i0]);
                        }
                    }

                    __boolStruct_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_out_2d", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr* __boolStruct_native, int __length_native, int* __widths_native, System.IntPtr** __pBoolStructOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool FillRangeArray(global::SharedTypes.IntStructWrapper[] array, int length, int start)
            {
                nint* __array_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.ManagedToUnmanagedIn __array_native__marshaller = new();
                int __array_native__numElements;
                int __array_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __array_native__marshaller.FromManaged(array, stackalloc nint[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.ManagedToUnmanagedIn.BufferSize]);
                    __array_native__marshaller.GetUnmanagedValuesDestination().Clear();
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __array_native__unused = __array_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __array_native = __array_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__array_native, length, start);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                    {
                        __array_native__numElements = __array_native__marshaller.GetManagedValuesSource().Length;
                        System.Span<global::SharedTypes.IntStructWrapper> __array_native__managedSpan = System.Runtime.InteropServices.MemoryMarshal.CreateSpan(ref System.Runtime.CompilerServices.Unsafe.AsRef(in __array_native__marshaller.GetManagedValuesSource().GetPinnableReference()), __array_native__numElements);
                        System.Span<nint> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__numElements; ++__i0)
                        {
                            __array_native__managedSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpIntStruct.ConvertToManaged(__array_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpIntStruct.Free(__array_native__nativeSpan[__i0]);
                        }
                    }

                    __array_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "fill_range_array", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(nint* __array_native, int __length_native, int __start_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool FillRangeArray2D(global::SharedTypes.IntStructWrapper[][] array, int length, int[] widths, int start)
            {
                System.IntPtr* __array_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper[], System.IntPtr>.ManagedToUnmanagedIn __array_native__marshaller = new();
                int __array_native__numElements;
                int __array_native__lastIndexMarshalled = 0;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __array_native__marshaller.FromManaged(array, stackalloc System.IntPtr[global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper[], System.IntPtr>.ManagedToUnmanagedIn.BufferSize]);
                    __array_native__marshaller.GetUnmanagedValuesDestination().Clear();
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __widths_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(widths))
                    fixed (void* __array_native__unused = __array_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __array_native = __array_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__array_native, length, (int*)__widths_native, start);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                    {
                        __array_native__numElements = __array_native__marshaller.GetManagedValuesSource().Length;
                        System.Span<global::SharedTypes.IntStructWrapper[]> __array_native__managedSpan = System.Runtime.InteropServices.MemoryMarshal.CreateSpan(ref System.Runtime.CompilerServices.Unsafe.AsRef(in __array_native__marshaller.GetManagedValuesSource().GetPinnableReference()), __array_native__numElements);
                        System.Span<System.IntPtr> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__numElements; ++__i0)
                        {
                            int __array_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__nativeSpan____i0__numElements);
                            ;
                            __array_native__nativeSpan____i0__numElements = widths[__i0];
                            __array_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.AllocateContainerForManagedElements((nint*)__array_native__nativeSpan[__i0], __array_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<nint> __array_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.GetUnmanagedValuesSource((nint*)__array_native__nativeSpan[__i0], __array_native__nativeSpan____i0__numElements);
                                System.Span<global::SharedTypes.IntStructWrapper> __array_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.GetManagedValuesDestination(__array_native__managedSpan[__i0]);
                                for (int __i1 = 0; __i1 < __array_native__nativeSpan____i0__numElements; ++__i1)
                                {
                                    __array_native__nativeSpan____i0__managedSpan[__i1] = global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpIntStruct.ConvertToManaged(__array_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __array_native__nativeSpan = __array_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __array_native__lastIndexMarshalled; ++__i0)
                        {
                            int __array_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __array_native__nativeSpan____i0__numElements);
                            ;
                            {
                                System.ReadOnlySpan<nint> __array_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.GetUnmanagedValuesDestination((nint*)__array_native__nativeSpan[__i0], __array_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __array_native__nativeSpan____i0__nativeSpan.Length; ++__i1)
                                {
                                    global::LibraryImportGenerator.IntegrationTests.EnforceAllElementsCleanedUpIntStruct.Free(__array_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }

                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.IntStructWrapper, nint>.Free((nint*)__array_native__nativeSpan[__i0]);
                        }
                    }

                    __array_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "fill_range_array_2d", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(System.IntPtr* __array_native, int __length_native, int* __widths_native, int __start_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBoolsRef(ref global::SharedTypes.BoolStruct[] boolStruct, int numValues)
            {
                nint* __boolStruct_native = default;
                // Setup - Perform required setup.
                int __boolStruct_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                int __boolStruct_native__lastIndexMarshalled = 0;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesSource(boolStruct);
                        System.Span<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0, ++__boolStruct_native__lastIndexMarshalled)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    {
                        __PInvoke(&__boolStruct_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __boolStruct_native__numElements = numValues;
                    boolStruct = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForManagedElements(__boolStruct_native, __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesSource(__boolStruct_native, __boolStruct_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesDestination(boolStruct);
                        for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                        {
                            __boolStruct_native__managedSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.ConvertToManaged(__boolStruct_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStruct.Free(__boolStruct_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free(__boolStruct_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_ref", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint** __boolStruct_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBoolsRef2D_LastElementMarshalling(ref global::SharedTypes.BoolStruct[][] boolStruct, int length)
            {
                nint* __boolStruct_native = default;
                // Setup - Perform required setup.
                int __boolStruct_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                int __boolStruct_native__lastIndexMarshalled = 0;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct[]> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.GetManagedValuesSource(boolStruct);
                        System.Span<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0, ++__boolStruct_native__lastIndexMarshalled)
                        {
                            __boolStruct_native__nativeSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStructArray.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                        }
                    }

                    {
                        __PInvoke(&__boolStruct_native, length);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __boolStruct_native__numElements = length;
                    boolStruct = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.AllocateContainerForManagedElements(__boolStruct_native, __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.GetUnmanagedValuesSource(__boolStruct_native, __boolStruct_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct[]> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.GetManagedValuesDestination(boolStruct);
                        for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                        {
                            __boolStruct_native__managedSpan[__i0] = global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStructArray.ConvertToManaged(__boolStruct_native__nativeSpan[__i0]);
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__lastIndexMarshalled; ++__i0)
                        {
                            global::LibraryImportGenerator.IntegrationTests.EnforceLastElementMarshalledCleanupBoolStructArray.Free(__boolStruct_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], nint>.Free(__boolStruct_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "negate_bool_struct_array_ref_2d", ExactSpelling = true)]
                static extern unsafe void __PInvoke(nint** __boolStruct_native, int __length_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class MarshallingFails
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBoolsRef2D_ClearMarshalling(ref global::SharedTypes.BoolStruct[][] boolStruct, int length, int[] widths)
            {
                System.IntPtr* __boolStruct_native = default;
                // Setup - Perform required setup.
                int __boolStruct_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                int __boolStruct_native__lastIndexMarshalled = 0;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __boolStruct_native = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct[]> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetManagedValuesSource(boolStruct);
                        System.Span<System.IntPtr> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0, ++__boolStruct_native__lastIndexMarshalled)
                        {
                            int __boolStruct_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__nativeSpan____i0__numElements);
                            ;
                            __boolStruct_native__nativeSpan[__i0] = (System.IntPtr)global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForUnmanagedElements(__boolStruct_native__managedSpan[__i0], out __boolStruct_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesSource(__boolStruct_native__managedSpan[__i0]);
                                System.Span<nint> __boolStruct_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination((nint*)__boolStruct_native__nativeSpan[__i0], __boolStruct_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __boolStruct_native__nativeSpan____i0__managedSpan.Length; ++__i1)
                                {
                                    __boolStruct_native__nativeSpan____i0__nativeSpan[__i1] = global::LibraryImportGenerator.IntegrationTests.EnforceClearedMemoryCleanup.ConvertToUnmanaged(__boolStruct_native__nativeSpan____i0__managedSpan[__i1]);
                                }
                            }
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __widths_native = &global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(widths))
                    {
                        __PInvoke(&__boolStruct_native, length, (int*)__widths_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __boolStruct_native__numElements = length;
                    boolStruct = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.AllocateContainerForManagedElements(__boolStruct_native, __boolStruct_native__numElements);
                    {
                        System.ReadOnlySpan<System.IntPtr> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetUnmanagedValuesSource(__boolStruct_native, __boolStruct_native__numElements);
                        System.Span<global::SharedTypes.BoolStruct[]> __boolStruct_native__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetManagedValuesDestination(boolStruct);
                        for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                        {
                            int __boolStruct_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__nativeSpan____i0__numElements);
                            ;
                            __boolStruct_native__nativeSpan____i0__numElements = widths[__i0];
                            __boolStruct_native__managedSpan[__i0] = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.AllocateContainerForManagedElements((nint*)__boolStruct_native__nativeSpan[__i0], __boolStruct_native__nativeSpan____i0__numElements);
                            {
                                System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesSource((nint*)__boolStruct_native__nativeSpan[__i0], __boolStruct_native__nativeSpan____i0__numElements);
                                System.Span<global::SharedTypes.BoolStruct> __boolStruct_native__nativeSpan____i0__managedSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetManagedValuesDestination(__boolStruct_native__managedSpan[__i0]);
                                for (int __i1 = 0; __i1 < __boolStruct_native__nativeSpan____i0__numElements; ++__i1)
                                {
                                    __boolStruct_native__nativeSpan____i0__managedSpan[__i1] = global::LibraryImportGenerator.IntegrationTests.EnforceClearedMemoryCleanup.ConvertToManaged(__boolStruct_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    {
                        System.ReadOnlySpan<System.IntPtr> __boolStruct_native__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                        for (int __i0 = 0; __i0 < __boolStruct_native__lastIndexMarshalled; ++__i0)
                        {
                            int __boolStruct_native__nativeSpan____i0__numElements;
                            System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__nativeSpan____i0__numElements);
                            ;
                            {
                                System.ReadOnlySpan<nint> __boolStruct_native__nativeSpan____i0__nativeSpan = global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.GetUnmanagedValuesDestination((nint*)__boolStruct_native__nativeSpan[__i0], __boolStruct_native__nativeSpan____i0__numElements);
                                for (int __i1 = 0; __i1 < __boolStruct_native__nativeSpan____i0__nativeSpan.Length; ++__i1)
                                {
                                    global::LibraryImportGenerator.IntegrationTests.EnforceClearedMemoryCleanup.Free(__boolStruct_native__nativeSpan____i0__nativeSpan[__i1]);
                                }
                            }

                            global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct, nint>.Free((nint*)__boolStruct_native__nativeSpan[__i0]);
                        }
                    }

                    global::System.Runtime.InteropServices.Marshalling.ArrayMarshaller<global::SharedTypes.BoolStruct[], System.IntPtr>.Free(__boolStruct_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("DoesNotExist", EntryPoint = "negate_bool_struct_array_ref_2d", ExactSpelling = true)]
                static extern unsafe void __PInvoke(System.IntPtr** __boolStruct_native, int __length_native, int* __widths_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int Sum(global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    int __values_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                        {
                            __retVal = __PInvoke(__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<int, int>.Free(__values_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int SumWithBuffer(global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native;
                    int __retVal;
                    // Setup - Perform required setup.
                    int __values_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    ;
                    // Marshal - Convert managed data to native data.
                    System.Span<byte> __values_native__buffer = stackalloc byte[global::SharedTypes.ListMarshallerWithBuffer<int, int>.BufferSize];
                    __values_native = global::SharedTypes.ListMarshallerWithBuffer<int, int>.AllocateContainerForUnmanagedElements(values, __values_native__buffer, out __values_native__numElements);
                    global::SharedTypes.ListMarshallerWithBuffer<int, int>.GetManagedValuesSource(values).CopyTo(global::SharedTypes.ListMarshallerWithBuffer<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                    {
                        __retVal = __PInvoke(__values_native, numValues);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static unsafe partial int SumWithFreeTracking(global::System.Collections.Generic.List<global::SharedTypes.IntWrapper> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    int __values_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    int __values_native__lastIndexMarshalled = 0;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native = global::SharedTypes.ListMarshaller<global::SharedTypes.IntWrapper, System.IntPtr>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.IntWrapper> __values_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.IntWrapper, System.IntPtr>.GetManagedValuesSource(values);
                            System.Span<System.IntPtr> __values_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.IntWrapper, System.IntPtr>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements);
                            for (int __i0 = 0; __i0 < __values_native__managedSpan.Length; ++__i0, ++__values_native__lastIndexMarshalled)
                            {
                                __values_native__nativeSpan[__i0] = (System.IntPtr)(int*)global::SharedTypes.IntWrapperMarshallerWithFreeCounts.ConvertToUnmanaged(__values_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __retVal = __PInvoke(__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        {
                            System.ReadOnlySpan<System.IntPtr> __values_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.IntWrapper, System.IntPtr>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements);
                            for (int __i0 = 0; __i0 < __values_native__lastIndexMarshalled; ++__i0)
                            {
                                global::SharedTypes.IntWrapperMarshallerWithFreeCounts.Free((int*)__values_native__nativeSpan[__i0]);
                            }
                        }

                        global::SharedTypes.ListMarshaller<global::SharedTypes.IntWrapper, System.IntPtr>.Free(__values_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_ptr_array", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int DoubleValues(global::System.Collections.Generic.List<global::SharedTypes.BlittableIntWrapper> values, int length)
                {
                    int __retVal;
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __values_native = &global::SharedTypes.ListMarshallerWithPinning<global::SharedTypes.BlittableIntWrapper, global::SharedTypes.BlittableIntWrapper>.GetPinnableReference(values))
                    {
                        __retVal = __PInvoke((byte*)__values_native, length);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_values", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __length_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int SumInArray(in global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    int __values_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                        {
                            __retVal = __PInvoke(&__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<int, int>.Free(__values_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array_ref", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Duplicate(ref global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    // Setup - Perform required setup.
                    int __values_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                        {
                            __PInvoke(&__values_native, numValues);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __values_native__numElements = numValues;
                        values = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForManagedElements(__values_native, __values_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesSource(__values_native, __values_native__numElements).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesDestination(values));
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<int, int>.Free(__values_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "duplicate_int_array", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<int> CreateRange(int start, int end, out int numValues)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                    global::System.Collections.Generic.List<int> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    int __retVal_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    ;
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (int* __numValues_native = &numValues)
                        {
                            __retVal_native = __PInvoke(start, end, __numValues_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = numValues;
                        __retVal = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesDestination(__retVal));
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<int, int>.Free(__retVal_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(int __start_native, int __end_native, int* __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void CreateRange_Out(int start, int end, out int numValues, out global::System.Collections.Generic.List<int> res)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
                    byte* __res_native = default;
                    // Setup - Perform required setup.
                    int __res_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __res_native__numElements);
                    ;
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (int* __numValues_native = &numValues)
                        {
                            __PInvoke(start, end, __numValues_native, &__res_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __res_native__numElements = numValues;
                        res = global::SharedTypes.ListMarshaller<int, int>.AllocateContainerForManagedElements(__res_native, __res_native__numElements);
                        global::SharedTypes.ListMarshaller<int, int>.GetUnmanagedValuesSource(__res_native, __res_native__numElements).CopyTo(global::SharedTypes.ListMarshaller<int, int>.GetManagedValuesDestination(res));
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<int, int>.Free(__res_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array_out", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(int __start_native, int __end_native, int* __numValues_native, byte** __res_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<byte> GetLongBytes(long l)
                {
                    global::System.Collections.Generic.List<byte> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    int __retVal_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    ;
                    try
                    {
                        {
                            __retVal_native = __PInvoke(l);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = 8;
                        __retVal = global::SharedTypes.ListMarshaller<byte, byte>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                        global::SharedTypes.ListMarshaller<byte, byte>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::SharedTypes.ListMarshaller<byte, byte>.GetManagedValuesDestination(__retVal));
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<byte, byte>.Free(__retVal_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_long_bytes", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(long __l_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial bool AndAllMembers(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pArray, int length)
                {
                    byte* __pArray_native = default;
                    bool __retVal = default;
                    byte __retVal_native = default;
                    // Setup - Perform required setup.
                    int __pArray_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __pArray_native = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(pArray, out __pArray_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(pArray);
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__pArray_native, __pArray_native__numElements);
                            for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                            {
                                __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __retVal_native = __PInvoke(__pArray_native, length);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = __retVal_native != 0;
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__pArray_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array", ExactSpelling = true)]
                    static extern unsafe byte __PInvoke(byte* __pArray_native, int __length_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial bool AndAllMembersIn(in global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pArray, int length)
                {
                    byte* __pArray_native = default;
                    bool __retVal = default;
                    byte __retVal_native = default;
                    // Setup - Perform required setup.
                    int __pArray_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __pArray_native = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(pArray, out __pArray_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(pArray);
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__pArray_native, __pArray_native__numElements);
                            for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                            {
                                __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __retVal_native = __PInvoke(&__pArray_native, length);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = __retVal_native != 0;
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__pArray_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array_in", ExactSpelling = true)]
                    static extern unsafe byte __PInvoke(byte** __pArray_native, int __length_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void NegateBools(ref global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues)
                {
                    byte* __boolStruct_native = default;
                    // Setup - Perform required setup.
                    int __boolStruct_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(boolStruct);
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __PInvoke(&__boolStruct_native, numValues);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __boolStruct_native__numElements = numValues;
                        boolStruct = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__boolStruct_native, __boolStruct_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__boolStruct_native, __boolStruct_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(boolStruct);
                            for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                            {
                                __boolStruct_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__boolStruct_native__nativeSpan[__i0]);
                            }
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__boolStruct_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_ref", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __boolStruct_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void NegateBools(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues, out global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pBoolStructOut)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                    byte* __boolStruct_native = default;
                    byte* __pBoolStructOut_native = default;
                    // Setup - Perform required setup.
                    int __pBoolStructOut_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__numElements);
                    ;
                    int __boolStruct_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(boolStruct);
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __PInvoke(__boolStruct_native, numValues, &__pBoolStructOut_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __pBoolStructOut_native__numElements = numValues;
                        pBoolStructOut = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pBoolStructOut_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__pBoolStructOut_native, __pBoolStructOut_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __pBoolStructOut_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(pBoolStructOut);
                            for (int __i0 = 0; __i0 < __pBoolStructOut_native__numElements; ++__i0)
                            {
                                __pBoolStructOut_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__pBoolStructOut_native__nativeSpan[__i0]);
                            }
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__pBoolStructOut_native);
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__boolStruct_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_out", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte* __boolStruct_native, int __numValues_native, byte** __pBoolStructOut_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> NegateBools(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues)
                {
                    byte* __boolStruct_native = default;
                    global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    int __retVal_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    ;
                    int __boolStruct_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    ;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForUnmanagedElements(boolStruct, out __boolStruct_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesSource(boolStruct);
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesDestination(__boolStruct_native, __boolStruct_native__numElements);
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        {
                            __retVal_native = __PInvoke(__boolStruct_native, numValues);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = numValues;
                        __retVal = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __retVal_native__nativeSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __retVal_native__managedSpan = global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.GetManagedValuesDestination(__retVal);
                            for (int __i0 = 0; __i0 < __retVal_native__numElements; ++__i0)
                            {
                                __retVal_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__retVal_native__nativeSpan[__i0]);
                            }
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__retVal_native);
                        global::SharedTypes.ListMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Free(__boolStruct_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_return", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(byte* __boolStruct_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int GuaranteedUnmarshal(out global::System.Collections.Generic.List<int> ret)
                {
                    bool __invokeSucceeded = default;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    byte* __ret_native = default;
                    int __retVal = default;
                    int __retVal_native = default;
                    // Setup - Perform required setup.
                    int __ret_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __ret_native__numElements);
                    ;
                    try
                    {
                        {
                            __retVal_native = __PInvoke(&__ret_native);
                        }

                        __invokeSucceeded = true;
                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        if (__invokeSucceeded)
                        {
                            // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                            __ret_native__numElements = 1;
                            ret = global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Collections.Stateless.ListGuaranteedUnmarshal<int, int>.AllocateContainerForManagedElementsFinally(__ret_native, __ret_native__numElements);
                        }
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateless
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int GuaranteedUnmarshal(out global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> ret)
                {
                    bool __invokeSucceeded = default;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    byte* __ret_native = default;
                    int __retVal = default;
                    int __retVal_native = default;
                    // Setup - Perform required setup.
                    int __ret_native__numElements;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __ret_native__numElements);
                    ;
                    try
                    {
                        {
                            __retVal_native = __PInvoke(&__ret_native);
                        }

                        __invokeSucceeded = true;
                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        if (__invokeSucceeded)
                        {
                            // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                            __ret_native__numElements = 1;
                            ret = global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Collections.Stateless.ListGuaranteedUnmarshal<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.AllocateContainerForManagedElementsFinally(__ret_native, __ret_native__numElements);
                        }
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int Sum(global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller __values_native__marshaller = new();
                    int __values_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native__marshaller.FromManaged(values, stackalloc int[global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller.BufferSize]);
                        __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __values_native__unused = __values_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __values_native = __values_native__marshaller.ToUnmanaged();
                            __retVal = __PInvoke(__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __values_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static unsafe partial int SumWithFreeTracking(global::System.Collections.Generic.List<global::SharedTypes.IntWrapper> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.IntWrapper, System.IntPtr>.Marshaller __values_native__marshaller = new();
                    int __values_native__numElements;
                    int __values_native__lastIndexMarshalled = 0;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native__marshaller.FromManaged(values, stackalloc System.IntPtr[global::SharedTypes.ListMarshallerStateful<global::SharedTypes.IntWrapper, System.IntPtr>.Marshaller.BufferSize]);
                        {
                            System.ReadOnlySpan<global::SharedTypes.IntWrapper> __values_native__managedSpan = __values_native__marshaller.GetManagedValuesSource();
                            System.Span<System.IntPtr> __values_native__nativeSpan = __values_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __values_native__managedSpan.Length; ++__i0, ++__values_native__lastIndexMarshalled)
                            {
                                __values_native__nativeSpan[__i0] = (System.IntPtr)(int*)global::SharedTypes.IntWrapperMarshallerWithFreeCounts.ConvertToUnmanaged(__values_native__managedSpan[__i0]);
                            }
                        }

                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __values_native__unused = __values_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __values_native = __values_native__marshaller.ToUnmanaged();
                            __retVal = __PInvoke(__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        {
                            System.ReadOnlySpan<System.IntPtr> __values_native__nativeSpan = __values_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __values_native__lastIndexMarshalled; ++__i0)
                            {
                                global::SharedTypes.IntWrapperMarshallerWithFreeCounts.Free((int*)__values_native__nativeSpan[__i0]);
                            }
                        }

                        __values_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_ptr_array", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int SumInArray(in global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller __values_native__marshaller = new();
                    int __values_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native__marshaller.FromManaged(values, stackalloc int[global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller.BufferSize]);
                        __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __values_native__unused = __values_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __values_native = __values_native__marshaller.ToUnmanaged();
                            __retVal = __PInvoke(&__values_native, numValues);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __values_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array_ref", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Duplicate(ref global::System.Collections.Generic.List<int> values, int numValues)
                {
                    byte* __values_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller __values_native__marshaller = new();
                    int __values_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __values_native__marshaller.FromManaged(values);
                        __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __values_native = __values_native__marshaller.ToUnmanaged();
                            __PInvoke(&__values_native, numValues);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __values_native__marshaller.FromUnmanaged(__values_native);
                        // Unmarshal - Convert native data to managed data.
                        __values_native__numElements = numValues;
                        __values_native__marshaller.GetUnmanagedValuesSource(__values_native__numElements).CopyTo(__values_native__marshaller.GetManagedValuesDestination(__values_native__numElements));
                        values = __values_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __values_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "duplicate_int_array", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __values_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<int> CreateRange(int start, int end, out int numValues)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                    global::System.Collections.Generic.List<int> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller __retVal_native__marshaller = new();
                    int __retVal_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (int* __numValues_native = &numValues)
                        {
                            __retVal_native = __PInvoke(start, end, __numValues_native);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = numValues;
                        __retVal_native__marshaller.GetUnmanagedValuesSource(__retVal_native__numElements).CopyTo(__retVal_native__marshaller.GetManagedValuesDestination(__retVal_native__numElements));
                        __retVal = __retVal_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __retVal_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(int __start_native, int __end_native, int* __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void CreateRange_Out(int start, int end, out int numValues, out global::System.Collections.Generic.List<int> res)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out res);
                    byte* __res_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<int, int>.Marshaller __res_native__marshaller = new();
                    int __res_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __res_native__numElements);
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (int* __numValues_native = &numValues)
                        {
                            __PInvoke(start, end, __numValues_native, &__res_native);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __res_native__marshaller.FromUnmanaged(__res_native);
                        // Unmarshal - Convert native data to managed data.
                        __res_native__numElements = numValues;
                        __res_native__marshaller.GetUnmanagedValuesSource(__res_native__numElements).CopyTo(__res_native__marshaller.GetManagedValuesDestination(__res_native__numElements));
                        res = __res_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __res_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array_out", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(int __start_native, int __end_native, int* __numValues_native, byte** __res_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<byte> GetLongBytes(long l)
                {
                    global::System.Collections.Generic.List<byte> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<byte, byte>.Marshaller __retVal_native__marshaller = new();
                    int __retVal_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    try
                    {
                        {
                            __retVal_native = __PInvoke(l);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = 8;
                        __retVal_native__marshaller.GetUnmanagedValuesSource(__retVal_native__numElements).CopyTo(__retVal_native__marshaller.GetManagedValuesDestination(__retVal_native__numElements));
                        __retVal = __retVal_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __retVal_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_long_bytes", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(long __l_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial bool AndAllMembers(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pArray, int length)
                {
                    byte* __pArray_native = default;
                    bool __retVal = default;
                    byte __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __pArray_native__marshaller = new();
                    int __pArray_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __pArray_native__marshaller.FromManaged(pArray, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller.BufferSize]);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = __pArray_native__marshaller.GetManagedValuesSource();
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = __pArray_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                            {
                                __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                            }
                        }

                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __pArray_native__unused = __pArray_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __pArray_native = __pArray_native__marshaller.ToUnmanaged();
                            __retVal_native = __PInvoke(__pArray_native, length);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = __retVal_native != 0;
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __pArray_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array", ExactSpelling = true)]
                    static extern unsafe byte __PInvoke(byte* __pArray_native, int __length_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial bool AndAllMembersIn(in global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pArray, int length)
                {
                    byte* __pArray_native = default;
                    bool __retVal = default;
                    byte __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __pArray_native__marshaller = new();
                    int __pArray_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __pArray_native__marshaller.FromManaged(pArray, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller.BufferSize]);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = __pArray_native__marshaller.GetManagedValuesSource();
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = __pArray_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                            {
                                __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                            }
                        }

                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __pArray_native__unused = __pArray_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __pArray_native = __pArray_native__marshaller.ToUnmanaged();
                            __retVal_native = __PInvoke(&__pArray_native, length);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = __retVal_native != 0;
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __pArray_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array_in", ExactSpelling = true)]
                    static extern unsafe byte __PInvoke(byte** __pArray_native, int __length_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void NegateBools(ref global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues)
                {
                    byte* __boolStruct_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __boolStruct_native__marshaller = new();
                    int __boolStruct_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native__marshaller.FromManaged(boolStruct);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                            __PInvoke(&__boolStruct_native, numValues);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __boolStruct_native__marshaller.FromUnmanaged(__boolStruct_native);
                        // Unmarshal - Convert native data to managed data.
                        __boolStruct_native__numElements = numValues;
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesSource(__boolStruct_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesDestination(__boolStruct_native__numElements);
                            for (int __i0 = 0; __i0 < __boolStruct_native__numElements; ++__i0)
                            {
                                __boolStruct_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__boolStruct_native__nativeSpan[__i0]);
                            }
                        }

                        boolStruct = __boolStruct_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __boolStruct_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_ref", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __boolStruct_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void NegateBools(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues, out global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> pBoolStructOut)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                    byte* __boolStruct_native = default;
                    byte* __pBoolStructOut_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __pBoolStructOut_native__marshaller = new();
                    int __pBoolStructOut_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __pBoolStructOut_native__numElements);
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __boolStruct_native__marshaller = new();
                    int __boolStruct_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller.BufferSize]);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                            __PInvoke(__boolStruct_native, numValues, &__pBoolStructOut_native);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __pBoolStructOut_native__marshaller.FromUnmanaged(__pBoolStructOut_native);
                        // Unmarshal - Convert native data to managed data.
                        __pBoolStructOut_native__numElements = numValues;
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pBoolStructOut_native__nativeSpan = __pBoolStructOut_native__marshaller.GetUnmanagedValuesSource(__pBoolStructOut_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __pBoolStructOut_native__managedSpan = __pBoolStructOut_native__marshaller.GetManagedValuesDestination(__pBoolStructOut_native__numElements);
                            for (int __i0 = 0; __i0 < __pBoolStructOut_native__numElements; ++__i0)
                            {
                                __pBoolStructOut_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__pBoolStructOut_native__nativeSpan[__i0]);
                            }
                        }

                        pBoolStructOut = __pBoolStructOut_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __pBoolStructOut_native__marshaller.Free();
                        __boolStruct_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_out", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte* __boolStruct_native, int __numValues_native, byte** __pBoolStructOut_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> NegateBools(global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> boolStruct, int numValues)
                {
                    byte* __boolStruct_native = default;
                    global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __retVal_native__marshaller = new();
                    int __retVal_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                    scoped global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __boolStruct_native__marshaller = new();
                    int __boolStruct_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __boolStruct_native__numElements);
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __boolStruct_native__marshaller.FromManaged(boolStruct, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::SharedTypes.ListMarshallerStateful<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller.BufferSize]);
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStruct> __boolStruct_native__managedSpan = __boolStruct_native__marshaller.GetManagedValuesSource();
                            System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __boolStruct_native__nativeSpan = __boolStruct_native__marshaller.GetUnmanagedValuesDestination();
                            for (int __i0 = 0; __i0 < __boolStruct_native__managedSpan.Length; ++__i0)
                            {
                                __boolStruct_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__boolStruct_native__managedSpan[__i0]);
                            }
                        }

                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __boolStruct_native__unused = __boolStruct_native__marshaller)
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                            __retVal_native = __PInvoke(__boolStruct_native, numValues);
                        }

                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                        // Unmarshal - Convert native data to managed data.
                        __retVal_native__numElements = numValues;
                        {
                            System.ReadOnlySpan<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __retVal_native__nativeSpan = __retVal_native__marshaller.GetUnmanagedValuesSource(__retVal_native__numElements);
                            System.Span<global::SharedTypes.BoolStruct> __retVal_native__managedSpan = __retVal_native__marshaller.GetManagedValuesDestination(__retVal_native__numElements);
                            for (int __i0 = 0; __i0 < __retVal_native__numElements; ++__i0)
                            {
                                __retVal_native__managedSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__retVal_native__nativeSpan[__i0]);
                            }
                        }

                        __retVal = __retVal_native__marshaller.ToManaged();
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __retVal_native__marshaller.Free();
                        __boolStruct_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bool_struct_array_return", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(byte* __boolStruct_native, int __numValues_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int GuaranteedUnmarshal(out global::System.Collections.Generic.List<int> ret)
                {
                    bool __invokeSucceeded = default;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    byte* __ret_native = default;
                    int __retVal = default;
                    int __retVal_native = default;
                    // Setup - Perform required setup.
                    global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Collections.Stateful.ListGuaranteedUnmarshal<int, int>.Marshaller __ret_native__marshaller = new();
                    int __ret_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __ret_native__numElements);
                    try
                    {
                        {
                            __retVal_native = __PInvoke(&__ret_native);
                        }

                        __invokeSucceeded = true;
                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __ret_native__marshaller.FromUnmanaged(__ret_native);
                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        if (__invokeSucceeded)
                        {
                            // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                            ret = __ret_native__marshaller.ToManagedFinally();
                        }

                        // Cleanup - Perform required cleanup.
                        __ret_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Collections
        {
            public unsafe partial class Stateful
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int GuaranteedUnmarshal(out global::System.Collections.Generic.List<global::SharedTypes.BoolStruct> ret)
                {
                    bool __invokeSucceeded = default;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    byte* __ret_native = default;
                    int __retVal = default;
                    int __retVal_native = default;
                    // Setup - Perform required setup.
                    global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Collections.Stateful.ListGuaranteedUnmarshal<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.Marshaller __ret_native__marshaller = new();
                    int __ret_native__numElements;
                    ;
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out __ret_native__numElements);
                    try
                    {
                        {
                            __retVal_native = __PInvoke(&__ret_native);
                        }

                        __invokeSucceeded = true;
                        // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                        __ret_native__marshaller.FromUnmanaged(__ret_native);
                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        if (__invokeSucceeded)
                        {
                            // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                            ret = __ret_native__marshaller.ToManagedFinally();
                        }

                        // Cleanup - Perform required cleanup.
                        __ret_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void DeepDuplicateStrings(global::SharedTypes.StringContainer strings, out global::SharedTypes.StringContainer pStringsOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pStringsOut);
                global::SharedTypes.StringContainerMarshaller.StringContainerNative __strings_native = default;
                global::SharedTypes.StringContainerMarshaller.StringContainerNative __pStringsOut_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strings_native = global::SharedTypes.StringContainerMarshaller.In.ConvertToUnmanaged(strings);
                    {
                        __PInvoke(__strings_native, &__pStringsOut_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    pStringsOut = global::SharedTypes.StringContainerMarshaller.Out.ConvertToManaged(__pStringsOut_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.StringContainerMarshaller.Out.Free(__pStringsOut_native);
                    global::SharedTypes.StringContainerMarshaller.In.Free(__strings_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "stringcontainer_deepduplicate", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.StringContainerMarshaller.StringContainerNative __strings_native, global::SharedTypes.StringContainerMarshaller.StringContainerNative* __pStringsOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void ReverseStrings(ref global::SharedTypes.StringContainer strings)
            {
                global::SharedTypes.StringContainerMarshaller.StringContainerNative __strings_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __strings_native = global::SharedTypes.StringContainerMarshaller.Ref.ConvertToUnmanaged(strings);
                    {
                        __PInvoke(&__strings_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    strings = global::SharedTypes.StringContainerMarshaller.Ref.ConvertToManaged(__strings_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.StringContainerMarshaller.Ref.Free(__strings_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "stringcontainer_reverse_strings", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.StringContainerMarshaller.StringContainerNative* __strings_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial double GetLongBytesAsDouble(double d)
            {
                long __d_native;
                double __retVal;
                // Marshal - Convert managed data to native data.
                __d_native = global::SharedTypes.DoubleToLongMarshaller.ConvertToUnmanaged(d);
                {
                    __retVal = __PInvoke(__d_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_long_bytes_as_double", ExactSpelling = true)]
                static extern unsafe double __PInvoke(long __d_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial double GetBytesAsDoubleBigEndian(double d)
            {
                byte* __d_native;
                double __retVal;
                // Marshal - Convert managed data to native data.
                System.Span<byte> __d_native__buffer = stackalloc byte[global::SharedTypes.DoubleToBytesBigEndianMarshaller.BufferSize];
                __d_native = global::SharedTypes.DoubleToBytesBigEndianMarshaller.ConvertToUnmanaged(d, __d_native__buffer);
                {
                    __retVal = __PInvoke(__d_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_bytes_as_double_big_endian", ExactSpelling = true)]
                static extern unsafe double __PInvoke(byte* __d_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBools(global::SharedTypes.BoolStruct boolStruct, out global::SharedTypes.BoolStruct pBoolStructOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                global::SharedTypes.BoolStructMarshaller.BoolStructNative __boolStruct_native;
                global::SharedTypes.BoolStructMarshaller.BoolStructNative __pBoolStructOut_native;
                // Marshal - Convert managed data to native data.
                __boolStruct_native = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(boolStruct);
                {
                    __PInvoke(__boolStruct_native, &__pBoolStructOut_native);
                }

                // Unmarshal - Convert native data to managed data.
                pBoolStructOut = global::SharedTypes.BoolStructMarshaller.ConvertToManaged(__pBoolStructOut_native);
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bools", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative __boolStruct_native, global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pBoolStructOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool AndBoolsRef(in global::SharedTypes.BoolStruct boolStruct)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative __boolStruct_native;
                bool __retVal;
                byte __retVal_native;
                // Marshal - Convert managed data to native data.
                __boolStruct_native = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(boolStruct);
                {
                    __retVal_native = __PInvoke(&__boolStruct_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bools_ref", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __boolStruct_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapper DoubleIntRef(global::SharedTypes.IntWrapper pInt)
            {
                int* __pInt_native = default;
                global::SharedTypes.IntWrapper __retVal = default;
                int* __retVal_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pInt_native = (int*)global::SharedTypes.IntWrapperMarshaller.ConvertToUnmanaged(pInt);
                    {
                        __retVal_native = __PInvoke(__pInt_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::SharedTypes.IntWrapperMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.IntWrapperMarshaller.Free(__retVal_native);
                    global::SharedTypes.IntWrapperMarshaller.Free(__pInt_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_int_ref", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int* __pInt_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapperWithoutGetPinnableReference DoubleIntRef(global::SharedTypes.IntWrapperWithoutGetPinnableReference pInt)
            {
                global::SharedTypes.IntWrapperWithoutGetPinnableReference __retVal = default;
                int* __retVal_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pInt_native = &global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.GetPinnableReference(pInt))
                    {
                        __retVal_native = __PInvoke((int*)__pInt_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_int_ref", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int* __pInt_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateless
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int GuaranteedUnmarshal(out int ret)
            {
                bool __invokeSucceeded = default;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                int __ret_native = default;
                int __retVal = default;
                int __retVal_native = default;
                try
                {
                    {
                        __retVal_native = __PInvoke(&__ret_native);
                    }

                    __invokeSucceeded = true;
                    // Unmarshal - Convert native data to managed data.
                    ret = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__ret_native);
                }
                finally
                {
                    if (__invokeSucceeded)
                    {
                        // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                        __retVal = global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Stateless.IntGuaranteedUnmarshal.ConvertToManagedFinally(__retVal_native);
                    }
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapperWithNotification SubtractInts(global::SharedTypes.IntWrapperWithNotification x, global::SharedTypes.IntWrapperWithNotification y)
            {
                int __x_native;
                int __y_native;
                global::SharedTypes.IntWrapperWithNotification __retVal;
                int __retVal_native;
                // Setup - Perform required setup.
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __retVal_native__marshaller = new();
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __y_native__marshaller = new();
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __x_native__marshaller = new();
                // Marshal - Convert managed data to native data.
                __y_native__marshaller.FromManaged(y);
                __x_native__marshaller.FromManaged(x);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __y_native = __y_native__marshaller.ToUnmanaged();
                    __x_native = __x_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__x_native, __y_native);
                }

                // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
                __y_native__marshaller.OnInvoked();
                __x_native__marshaller.OnInvoked();
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_return_int", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int __x_native, int __y_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void SubtractInts(global::SharedTypes.IntWrapperWithNotification x, global::SharedTypes.IntWrapperWithNotification y, out global::SharedTypes.IntWrapperWithNotification result)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out result);
                int __x_native;
                int __y_native;
                int __result_native;
                // Setup - Perform required setup.
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __result_native__marshaller = new();
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __y_native__marshaller = new();
                global::SharedTypes.IntWrapperWithNotificationMarshaller.Marshaller __x_native__marshaller = new();
                // Marshal - Convert managed data to native data.
                __y_native__marshaller.FromManaged(y);
                __x_native__marshaller.FromManaged(x);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __y_native = __y_native__marshaller.ToUnmanaged();
                    __x_native = __x_native__marshaller.ToUnmanaged();
                    __PInvoke(__x_native, __y_native, &__result_native);
                }

                // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
                __y_native__marshaller.OnInvoked();
                __x_native__marshaller.OnInvoked();
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __result_native__marshaller.FromUnmanaged(__result_native);
                // Unmarshal - Convert native data to managed data.
                result = __result_native__marshaller.ToManaged();
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_out_int", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int __x_native, int __y_native, int* __result_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void NegateBools(global::SharedTypes.BoolStruct boolStruct, out global::SharedTypes.BoolStruct pBoolStructOut)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out pBoolStructOut);
                global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative __boolStruct_native;
                global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative __pBoolStructOut_native;
                // Setup - Perform required setup.
                global::SharedTypes.BoolStructMarshallerStateful.Marshaller __pBoolStructOut_native__marshaller = new();
                global::SharedTypes.BoolStructMarshallerStateful.Marshaller __boolStruct_native__marshaller = new();
                // Marshal - Convert managed data to native data.
                __boolStruct_native__marshaller.FromManaged(boolStruct);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                    __PInvoke(__boolStruct_native, &__pBoolStructOut_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __pBoolStructOut_native__marshaller.FromUnmanaged(__pBoolStructOut_native);
                // Unmarshal - Convert native data to managed data.
                pBoolStructOut = __pBoolStructOut_native__marshaller.ToManaged();
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "negate_bools", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative __boolStruct_native, global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative* __pBoolStructOut_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool AndBoolsRef(in global::SharedTypes.BoolStruct boolStruct)
            {
                global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative __boolStruct_native;
                bool __retVal;
                byte __retVal_native;
                // Setup - Perform required setup.
                global::SharedTypes.BoolStructMarshallerStateful.Marshaller __boolStruct_native__marshaller = new();
                // Marshal - Convert managed data to native data.
                __boolStruct_native__marshaller.FromManaged(boolStruct);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __boolStruct_native = __boolStruct_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(&__boolStruct_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bools_ref", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.BoolStructMarshallerStateful.BoolStructNative* __boolStruct_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapperWithoutGetPinnableReference DoubleIntRef(global::SharedTypes.IntWrapperWithoutGetPinnableReference pInt)
            {
                global::SharedTypes.IntWrapperWithoutGetPinnableReference __retVal = default;
                int* __retVal_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pInt_native = &global::SharedTypes.IntWrapperWithoutGetPinnableReferenceStatefulMarshaller.StatelessGetPinnableReference.GetPinnableReference(pInt))
                    {
                        __retVal_native = __PInvoke((int*)__pInt_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_int_ref", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int* __pInt_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapperWithoutGetPinnableReference DoubleIntRefNoAlloc(global::SharedTypes.IntWrapperWithoutGetPinnableReference pInt)
            {
                int* __pInt_native = default;
                global::SharedTypes.IntWrapperWithoutGetPinnableReference __retVal = default;
                int* __retVal_native = default;
                // Setup - Perform required setup.
                global::SharedTypes.IntWrapperWithoutGetPinnableReferenceStatefulNoAllocMarshaller.StatefulGetPinnableReference __pInt_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pInt_native__marshaller.FromManaged(pInt);
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pInt_native__unused = __pInt_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __pInt_native = __pInt_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__pInt_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::SharedTypes.IntWrapperWithoutGetPinnableReferenceMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_int_ref", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int* __pInt_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::SharedTypes.IntWrapper DoubleIntRef(global::SharedTypes.IntWrapper pInt)
            {
                int* __pInt_native = default;
                global::SharedTypes.IntWrapper __retVal = default;
                int* __retVal_native = default;
                // Setup - Perform required setup.
                global::SharedTypes.IntWrapperMarshallerStateful.Marshaller __retVal_native__marshaller = new();
                global::SharedTypes.IntWrapperMarshallerStateful.Marshaller __pInt_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pInt_native__marshaller.FromManaged(pInt);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __pInt_native = __pInt_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__pInt_native);
                    }

                    // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                    __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native__marshaller.ToManaged();
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __retVal_native__marshaller.Free();
                    __pInt_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "double_int_ref", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int* __pInt_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        internal unsafe partial class Stateful
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int GuaranteedUnmarshal(out int ret)
            {
                bool __invokeSucceeded = default;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                int __ret_native = default;
                int __retVal = default;
                int __retVal_native = default;
                // Setup - Perform required setup.
                global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.Stateful.IntGuaranteedUnmarshal.Marshaller __retVal_native__marshaller = new();
                try
                {
                    {
                        __retVal_native = __PInvoke(&__ret_native);
                    }

                    __invokeSucceeded = true;
                    // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                    __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                    // Unmarshal - Convert native data to managed data.
                    ret = global::SharedTypes.ExceptionOnUnmarshal.ConvertToManaged(__ret_native);
                }
                finally
                {
                    if (__invokeSucceeded)
                    {
                        // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                        __retVal = __retVal_native__marshaller.ToManagedFinally();
                    }

                    // Cleanup - Perform required cleanup.
                    __retVal_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_zero", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ReverseReplaceString(ref string s)
        {
            ushort* __s_native = default;
            try
            {
                // Marshal - Convert managed data to native data.
                __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                {
                    __PInvoke(&__s_native);
                }

                // Unmarshal - Convert native data to managed data.
                s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_ushort", ExactSpelling = true)]
            static extern unsafe void __PInvoke(ushort** __s_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial int ReturnStringLength(string s)
        {
            int __retVal;
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
            {
                __retVal = __PInvoke((ushort*)__s_native);
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
            static extern unsafe int __PInvoke(ushort* __s_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void InvokeAfterGC(global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.VoidVoid cb)
        {
            System.IntPtr __cb_native;
            // Marshal - Convert managed data to native data.
            __cb_native = cb != null ? System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(cb) : default;
            {
                __PInvoke(__cb_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.GC.KeepAlive(cb);
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_after_gc", ExactSpelling = true)]
            static extern unsafe void __PInvoke(System.IntPtr __cb_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial int InvokeWithBlittableArgument(global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.IntIntInt cb, int a, int b)
        {
            System.IntPtr __cb_native;
            int __retVal;
            // Marshal - Convert managed data to native data.
            __cb_native = cb != null ? System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(cb) : default;
            {
                __retVal = __PInvoke(__cb_native, a, b);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.GC.KeepAlive(cb);
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_blittable_args", ExactSpelling = true)]
            static extern unsafe int __PInvoke(System.IntPtr __cb_native, int __a_native, int __b_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class IntEnum
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_return_int", ExactSpelling = true)]
            public static extern partial global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum Subtract_Return(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum a, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum b);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class IntEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_Out(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum a, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum b, out global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum c)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out c);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __c_native = &c)
                {
                    __PInvoke(a, b, __c_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_out_int", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum __b_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class IntEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_Ref(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum a, ref global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum b)
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __b_native = &b)
                {
                    __PInvoke(a, __b_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_int", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __b_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class IntEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_In(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum a, in global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum b)
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __b_native = &b)
                {
                    __PInvoke(a, __b_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_int", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.IntEnum* __b_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class ByteEnum
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_return_byte", ExactSpelling = true)]
            public static extern partial global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum Subtract_Return(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum a, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum b);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class ByteEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_Out(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum a, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum b, out global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum c)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out c);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __c_native = &c)
                {
                    __PInvoke(a, b, __c_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_out_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum __b_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __c_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class ByteEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_Ref(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum a, ref global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum b)
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __b_native = &b)
                {
                    __PInvoke(a, __b_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __b_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class ByteEnum
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Subtract_In(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum a, in global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum b)
            {
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __b_native = &b)
                {
                    __PInvoke(a, __b_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum __a_native, global::LibraryImportGenerator.IntegrationTests.EnumTests.ByteEnum* __b_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_managed_callback_after_gc", ExactSpelling = true)]
            public static unsafe extern partial void InvokeAfterGC(delegate*<void> cb);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_after_gc", ExactSpelling = true)]
            public static unsafe extern partial void InvokeAfterGC(delegate* unmanaged<void> cb);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_after_gc", ExactSpelling = true)]
            public static unsafe extern partial void InvokeAfterGC(delegate* unmanaged[Stdcall]<void> cb);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_managed_callback_blittable_args", ExactSpelling = true)]
            public static unsafe extern partial int InvokeWithBlittableArgument(delegate*<int, int, int> cb, int a, int b);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_blittable_args", ExactSpelling = true)]
            public static unsafe extern partial int InvokeWithBlittableArgument(delegate* unmanaged<int, int, int> cb, int a, int b);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class FunctionPointer
        {
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "invoke_callback_blittable_args", ExactSpelling = true)]
            public static unsafe extern partial int InvokeWithBlittableArgument(delegate* unmanaged[Stdcall]<int, int, int> cb, int a, int b);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_int", ExactSpelling = true)]
        public static unsafe extern partial void Subtract_Int_Ptr(int a, int* b);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "subtract_ref_byte", ExactSpelling = true)]
        public static unsafe extern partial void Subtract_Byte_Ptr(byte a, byte* b);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "blittablestructs_double_intfields_byref", ExactSpelling = true)]
        public static unsafe extern partial void DoubleIntFields_Ptr(global::SharedTypes.IntFields* result);
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class NativeExportsSafeHandle
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            private static partial global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle AllocateHandle()
            {
                global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle __retVal = default;
                nint __retVal_native = default;
                // Setup - Perform required setup.
                global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
                try
                {
                    {
                        __retVal_native = __PInvoke();
                    }

                    // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                    __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native__marshaller.ToManaged();
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __retVal_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "alloc_handle", ExactSpelling = true)]
                static extern unsafe nint __PInvoke();
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle AllocateHandle()
        {
            global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            try
            {
                {
                    __retVal_native = __PInvoke();
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __retVal_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "alloc_handle", ExactSpelling = true)]
            static extern unsafe nint __PInvoke();
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void AllocateHandle(out global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle handle)
        {
            System.Runtime.CompilerServices.Unsafe.SkipInit(out handle);
            nint __handle_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle>.ManagedToUnmanagedOut __handle_native__marshaller = new();
            try
            {
                {
                    __PInvoke(&__handle_native);
                }

                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __handle_native__marshaller.FromUnmanaged(__handle_native);
                // Unmarshal - Convert native data to managed data.
                handle = __handle_native__marshaller.ToManaged();
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "alloc_handle_out", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint* __handle_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        private static partial bool ReleaseHandle(nint handle)
        {
            bool __retVal;
            sbyte __retVal_native;
            {
                __retVal_native = __PInvoke(handle);
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "release_handle", ExactSpelling = true)]
            static extern unsafe sbyte __PInvoke(nint __handle_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool IsHandleAlive(global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle handle)
        {
            nint __handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__handle_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "is_handle_alive", ExactSpelling = true)]
            static extern unsafe sbyte __PInvoke(nint __handle_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void ModifyHandle(ref global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle handle, bool newHandle)
        {
            bool __invokeSucceeded = default;
            nint __handle_native = default;
            sbyte __newHandle_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::LibraryImportGenerator.IntegrationTests.NativeExportsNE.NativeExportsSafeHandle>.ManagedToUnmanagedRef __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __newHandle_native = (sbyte)(newHandle ? 1 : 0);
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __PInvoke(&__handle_native, __newHandle_native);
                }

                __invokeSucceeded = true;
                // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
                __handle_native__marshaller.OnInvoked();
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __handle_native__marshaller.FromUnmanaged(__handle_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                    handle = __handle_native__marshaller.ToManagedFinally();
                }

                // Cleanup - Perform required cleanup.
                __handle_native__marshaller.Free();
            }

            // Local P/Invoke
            [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "modify_handle", ExactSpelling = true)]
            static extern unsafe void __PInvoke(nint* __handle_native, sbyte __newHandle_native);
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class SetLastError
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SetError(int error, byte shouldSetError)
            {
                int __lastError;
                int __retVal;
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal = __PInvoke(error, shouldSetError);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "set_error", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int __error_native, byte __shouldSetError_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class SetLastError
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SetError_CustomMarshallingSetsError(int error, byte shouldSetError)
            {
                int __lastError;
                int __retVal;
                int __retVal_native;
                {
                    System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                    __retVal_native = __PInvoke(error, shouldSetError);
                    __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = global::LibraryImportGenerator.IntegrationTests.SetLastErrorMarshaller.ConvertToManaged(__retVal_native);
                System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "set_error", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int __error_native, byte __shouldSetError_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class SetLastError
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string SetError_NonBlittableSignature(int error, bool shouldSetError, string errorString)
            {
                int __lastError;
                byte __shouldSetError_native = default;
                string __retVal = default;
                ushort* __retVal_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __shouldSetError_native = (byte)(shouldSetError ? 1 : 0);
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __errorString_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(errorString))
                    {
                        System.Runtime.InteropServices.Marshal.SetLastSystemError(0);
                        __retVal_native = __PInvoke(error, __shouldSetError_native, (ushort*)__errorString_native);
                        __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__retVal_native);
                }

                System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);
                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "set_error_return_string", ExactSpelling = true)]
                static extern unsafe ushort* __PInvoke(int __error_native, byte __shouldSetError_native, ushort* __errorString_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int Sum(global::System.Span<int> values, int numValues)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __values_native = &global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(values))
                {
                    __retVal = __PInvoke((int*)__values_native, numValues);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int Sum(global::System.ReadOnlySpan<int> values, int numValues)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __values_native = &global::System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller<int, int>.ManagedToUnmanagedIn.GetPinnableReference(values))
                {
                    __retVal = __PInvoke((int*)__values_native, numValues);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int* __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int SumInArray(in global::System.Span<int> values, int numValues)
            {
                int* __values_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.ManagedToUnmanagedIn __values_native__marshaller = new();
                int __values_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native__marshaller.FromManaged(values, stackalloc int[global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.ManagedToUnmanagedIn.BufferSize]);
                    __values_native__marshaller.GetManagedValuesSource().CopyTo(__values_native__marshaller.GetUnmanagedValuesDestination());
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __values_native__unused = __values_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __values_native = __values_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(&__values_native, numValues);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __values_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "sum_int_array_ref", ExactSpelling = true)]
                static extern unsafe int __PInvoke(int** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Duplicate(ref global::System.Span<int> values, int numValues)
            {
                int* __values_native = default;
                // Setup - Perform required setup.
                int __values_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __values_native__numElements);
                ;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __values_native = global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.AllocateContainerForUnmanagedElements(values, out __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetManagedValuesSource(values).CopyTo(global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetUnmanagedValuesDestination(__values_native, __values_native__numElements));
                    {
                        __PInvoke(&__values_native, numValues);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __values_native__numElements = numValues;
                    values = global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.AllocateContainerForManagedElements(__values_native, __values_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetUnmanagedValuesSource(__values_native, __values_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetManagedValuesDestination(values));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.Free(__values_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "duplicate_int_array", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int** __values_native, int __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::System.Span<int> CreateRange(int start, int end, out int numValues)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                global::System.Span<int> __retVal = default;
                int* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numValues_native = &numValues)
                    {
                        __retVal_native = __PInvoke(start, end, __numValues_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = numValues;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetManagedValuesDestination(__retVal));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array", ExactSpelling = true)]
                static extern unsafe int* __PInvoke(int __start_native, int __end_native, int* __numValues_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void CreateRange_Out(int start, int end, out int numValues, out global::System.Span<int> res)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out numValues);
                res = default;
                int* __res_native = default;
                // Setup - Perform required setup.
                int __res_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __res_native__numElements);
                ;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (int* __numValues_native = &numValues)
                    {
                        __PInvoke(start, end, __numValues_native, &__res_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __res_native__numElements = numValues;
                    res = global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.AllocateContainerForManagedElements(__res_native, __res_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetUnmanagedValuesSource(__res_native, __res_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.GetManagedValuesDestination(res));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<int, int>.Free(__res_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "create_range_array_out", ExactSpelling = true)]
                static extern unsafe void __PInvoke(int __start_native, int __end_native, int* __numValues_native, int** __res_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial global::System.Span<byte> GetLongBytes(long l)
            {
                global::System.Span<byte> __retVal = default;
                byte* __retVal_native = default;
                // Setup - Perform required setup.
                int __retVal_native__numElements;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __retVal_native__numElements);
                ;
                try
                {
                    {
                        __retVal_native = __PInvoke(l);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal_native__numElements = 8;
                    __retVal = global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<byte, byte>.AllocateContainerForManagedElements(__retVal_native, __retVal_native__numElements);
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<byte, byte>.GetUnmanagedValuesSource(__retVal_native, __retVal_native__numElements).CopyTo(global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<byte, byte>.GetManagedValuesDestination(__retVal));
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<byte, byte>.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "get_long_bytes", ExactSpelling = true)]
                static extern unsafe byte* __PInvoke(long __l_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Span
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial bool AndAllMembers(global::System.Span<global::SharedTypes.BoolStruct> pArray, int length)
            {
                global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pArray_native = default;
                bool __retVal = default;
                byte __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn __pArray_native__marshaller = new();
                int __pArray_native__numElements;
                ;
                System.Runtime.CompilerServices.Unsafe.SkipInit(out __pArray_native__numElements);
                try
                {
                    // Marshal - Convert managed data to native data.
                    __pArray_native__marshaller.FromManaged(pArray, stackalloc global::SharedTypes.BoolStructMarshaller.BoolStructNative[global::System.Runtime.InteropServices.Marshalling.SpanMarshaller<global::SharedTypes.BoolStruct, global::SharedTypes.BoolStructMarshaller.BoolStructNative>.ManagedToUnmanagedIn.BufferSize]);
                    {
                        System.ReadOnlySpan<global::SharedTypes.BoolStruct> __pArray_native__managedSpan = __pArray_native__marshaller.GetManagedValuesSource();
                        System.Span<global::SharedTypes.BoolStructMarshaller.BoolStructNative> __pArray_native__nativeSpan = __pArray_native__marshaller.GetUnmanagedValuesDestination();
                        for (int __i0 = 0; __i0 < __pArray_native__managedSpan.Length; ++__i0)
                        {
                            __pArray_native__nativeSpan[__i0] = global::SharedTypes.BoolStructMarshaller.ConvertToUnmanaged(__pArray_native__managedSpan[__i0]);
                        }
                    }

                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __pArray_native__unused = __pArray_native__marshaller)
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __pArray_native = __pArray_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__pArray_native, length);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = __retVal_native != 0;
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __pArray_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "and_bool_struct_array", ExactSpelling = true)]
                static extern unsafe byte __PInvoke(global::SharedTypes.BoolStructMarshaller.BoolStructNative* __pArray_native, int __length_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                {
                    __retVal = __PInvoke((ushort*)__s_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                string __retVal = default;
                ushort* __retVal_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __retVal_native = __PInvoke((ushort*)__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_ushort", ExactSpelling = true)]
                static extern unsafe ushort* __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                ushort* __ret_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __PInvoke((ushort*)__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__ret_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort* __s_native, ushort** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf16
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                {
                    __retVal = __PInvoke((ushort*)__s_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength_IgnoreStringMarshalling(string s)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                {
                    __retVal = __PInvoke((ushort*)__s_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                string __retVal = default;
                ushort* __retVal_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __retVal_native = __PInvoke((ushort*)__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_ushort", ExactSpelling = true)]
                static extern unsafe ushort* __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                ushort* __ret_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __PInvoke((ushort*)__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__ret_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort* __s_native, ushort** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPTStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                {
                    __retVal = __PInvoke((ushort*)__s_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength_IgnoreStringMarshalling(string s)
            {
                int __retVal;
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                {
                    __retVal = __PInvoke((ushort*)__s_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                string __retVal = default;
                ushort* __retVal_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __retVal_native = __PInvoke((ushort*)__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__retVal_native);
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_ushort", ExactSpelling = true)]
                static extern unsafe ushort* __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                ushort* __ret_native = default;
                try
                {
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __PInvoke((ushort*)__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__ret_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort* __s_native, ushort** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPWStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_ushort", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                byte* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                static extern unsafe int __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength_IgnoreStringMarshalling(string s)
            {
                byte* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                static extern unsafe int __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                byte* __s_native = default;
                string __retVal = default;
                byte* __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__retVal_native);
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_byte", ExactSpelling = true)]
                static extern unsafe byte* __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                byte* __s_native = default;
                byte* __ret_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__ret_native);
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte* __s_native, byte** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                byte* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPUTF8Str
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                byte* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                static extern unsafe int __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                byte* __s_native = default;
                string __retVal = default;
                byte* __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__retVal_native);
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_byte", ExactSpelling = true)]
                static extern unsafe byte* __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                byte* __s_native = default;
                byte* __ret_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__ret_native);
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte* __s_native, byte** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                byte* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class Utf8
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                byte* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                static extern unsafe int __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength_IgnoreStringMarshalling(string s)
            {
                byte* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                static extern unsafe int __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                byte* __s_native = default;
                string __retVal = default;
                byte* __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.Free(__retVal_native);
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_byte", ExactSpelling = true)]
                static extern unsafe byte* __PInvoke(byte* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                byte* __s_native = default;
                byte* __ret_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.Free(__ret_native);
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte* __s_native, byte** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                byte* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class LPStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                byte* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_byte", ExactSpelling = true)]
                static extern unsafe void __PInvoke(byte** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength(string s)
            {
                ushort* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_bstr", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial int ReturnLength_IgnoreStringMarshalling(string s)
            {
                ushort* __s_native = default;
                int __retVal = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal = __PInvoke(__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_bstr", ExactSpelling = true)]
                static extern unsafe int __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial string Reverse_Return(string s)
            {
                ushort* __s_native = default;
                string __retVal = default;
                ushort* __retVal_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __retVal_native = __PInvoke(__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    __retVal = global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToManaged(__retVal_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.Free(__retVal_native);
                    __s_native__marshaller.Free();
                }

                return __retVal;
                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_bstr", ExactSpelling = true)]
                static extern unsafe ushort* __PInvoke(ushort* __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Out(string s, out string ret)
            {
                System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                ushort* __s_native = default;
                ushort* __ret_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(__s_native, &__ret_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    ret = global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToManaged(__ret_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.Free(__ret_native);
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_bstr", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort* __s_native, ushort** __ret_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_bstr", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_In(in string s)
            {
                ushort* __s_native = default;
                // Setup - Perform required setup.
                scoped global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                    {
                        // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                        __s_native = __s_native__marshaller.ToUnmanaged();
                        __PInvoke(&__s_native);
                    }
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    __s_native__marshaller.Free();
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_bstr", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class BStr
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
            [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
            public static partial void Reverse_Replace_Ref(ref string s)
            {
                ushort* __s_native = default;
                try
                {
                    // Marshal - Convert managed data to native data.
                    __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToUnmanaged(s);
                    {
                        __PInvoke(&__s_native);
                    }

                    // Unmarshal - Convert native data to managed data.
                    s = global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToManaged(__s_native);
                }
                finally
                {
                    // Cleanup - Perform required cleanup.
                    global::System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.Free(__s_native);
                }

                // Local P/Invoke
                [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_bstr", ExactSpelling = true)]
                static extern unsafe void __PInvoke(ushort** __s_native);
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int ReturnLength(string s)
                {
                    int __retVal;
                    // Pin - Pin data in preparation for calling the P/Invoke.
                    fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                    {
                        __retVal = __PInvoke((ushort*)__s_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_ushort", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(ushort* __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial string Reverse_Return(string s)
                {
                    string __retVal = default;
                    ushort* __retVal_native = default;
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                        {
                            __retVal_native = __PInvoke((ushort*)__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__retVal_native);
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_ushort", ExactSpelling = true)]
                    static extern unsafe ushort* __PInvoke(ushort* __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Out(string s, out string ret)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    ushort* __ret_native = default;
                    try
                    {
                        // Pin - Pin data in preparation for calling the P/Invoke.
                        fixed (void* __s_native = &global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(s))
                        {
                            __PInvoke((ushort*)__s_native, &__ret_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        ret = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__ret_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__ret_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_ushort", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(ushort* __s_native, ushort** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Ref(ref string s)
                {
                    ushort* __s_native = default;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                        {
                            __PInvoke(&__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(ushort** __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_In(in string s)
                {
                    ushort* __s_native = default;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                        {
                            __PInvoke(&__s_native);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_ushort", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(ushort** __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf16
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Replace_Ref(ref string s)
                {
                    ushort* __s_native = default;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native = (ushort*)global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(s);
                        {
                            __PInvoke(&__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        s = global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(__s_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(__s_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_ushort", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(ushort** __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial int ReturnLength(string s)
                {
                    byte* __s_native = default;
                    int __retVal = default;
                    // Setup - Perform required setup.
                    scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __s_native = __s_native__marshaller.ToUnmanaged();
                            __retVal = __PInvoke(__s_native);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __s_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "return_length_byte", ExactSpelling = true)]
                    static extern unsafe int __PInvoke(byte* __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial string Reverse_Return(string s)
                {
                    byte* __s_native = default;
                    string __retVal = default;
                    byte* __retVal_native = default;
                    // Setup - Perform required setup.
                    scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __s_native = __s_native__marshaller.ToUnmanaged();
                            __retVal_native = __PInvoke(__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__retVal_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__retVal_native);
                        __s_native__marshaller.Free();
                    }

                    return __retVal;
                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_return_byte", ExactSpelling = true)]
                    static extern unsafe byte* __PInvoke(byte* __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Out(string s, out string ret)
                {
                    System.Runtime.CompilerServices.Unsafe.SkipInit(out ret);
                    byte* __s_native = default;
                    byte* __ret_native = default;
                    // Setup - Perform required setup.
                    scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __s_native = __s_native__marshaller.ToUnmanaged();
                            __PInvoke(__s_native, &__ret_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        ret = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__ret_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__ret_native);
                        __s_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_out_byte", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte* __s_native, byte** __ret_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Ref(ref string s)
                {
                    byte* __s_native = default;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                        {
                            __PInvoke(&__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_In(in string s)
                {
                    byte* __s_native = default;
                    // Setup - Perform required setup.
                    scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __s_native__marshaller = new();
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native__marshaller.FromManaged(s, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                        {
                            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                            __s_native = __s_native__marshaller.ToUnmanaged();
                            __PInvoke(&__s_native);
                        }
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        __s_native__marshaller.Free();
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_inplace_ref_byte", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __s_native);
                }
            }
        }
    }
}
namespace LibraryImportGenerator.IntegrationTests
{
    unsafe partial class NativeExportsNE
    {
        public unsafe partial class StringMarshallingCustomType
        {
            public unsafe partial class Utf8
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "42.42.42.42")]
                [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
                public static partial void Reverse_Replace_Ref(ref string s)
                {
                    byte* __s_native = default;
                    try
                    {
                        // Marshal - Convert managed data to native data.
                        __s_native = (byte*)global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(s);
                        {
                            __PInvoke(&__s_native);
                        }

                        // Unmarshal - Convert native data to managed data.
                        s = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(__s_native);
                    }
                    finally
                    {
                        // Cleanup - Perform required cleanup.
                        global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(__s_native);
                    }

                    // Local P/Invoke
                    [System.Runtime.InteropServices.DllImportAttribute("Microsoft.Interop.Tests.NativeExportsNE", EntryPoint = "reverse_replace_ref_byte", ExactSpelling = true)]
                    static extern unsafe void __PInvoke(byte** __s_native);
                }
            }
        }
    }
}
