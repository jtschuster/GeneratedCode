// <auto-generated />
#pragma warning disable CS0612, CS0618
file unsafe class InterfaceInformation : global::System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType
{
    public static global::System.Guid Iid { get; } = new(new global::System.ReadOnlySpan<byte>(new byte[] { 93, 250, 49, 71, 3, 193, 34, 74, 135, 161, 88, 220, 237, 212, 169, 179 }));

    private static void** _vtable;
    public static void** ManagedVirtualMethodTable => _vtable != null ? _vtable : (_vtable = InterfaceImplementation.CreateManagedVirtualFunctionTable());
}

[global::System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute]
file unsafe partial interface InterfaceImplementation : global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.Method(global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param)
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        nint __param_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // Marshal - Convert managed data to native data.
            __param_native__marshaller.FromManaged(param, stackalloc byte[global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller.BufferSize]);
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __param_native = __param_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint, int> )__vtable_native[3])(__this, __param_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            global::System.GC.KeepAlive(this);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.MethodIn(in global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param)
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        nint __param_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // Marshal - Convert managed data to native data.
            __param_native__marshaller.FromManaged(param, stackalloc byte[global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller.BufferSize]);
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __param_native = __param_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[4])(__this, &__param_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            global::System.GC.KeepAlive(this);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.MethodOut(out global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param)
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        bool __invokeSucceeded = default;
        global::System.Runtime.CompilerServices.Unsafe.SkipInit(out param);
        nint __param_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            {
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[5])(__this, &__param_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            __invokeSucceeded = true;
            global::System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __param_native__marshaller.FromUnmanaged(__param_native);
            // Unmarshal - Convert native data to managed data.
            param = __param_native__marshaller.ToManaged();
        }
        finally
        {
            if (__invokeSucceeded)
            {
                // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                __param_native__marshaller.Free();
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.MethodRef(ref global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param)
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        nint __param_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __param_native = __param_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[6])(__this, &__param_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            global::System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __param_native__marshaller.FromUnmanaged(__param_native);
            // Unmarshal - Convert native data to managed data.
            param = __param_native__marshaller.ToManaged();
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.Return()
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        bool __invokeSucceeded = default;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType __retVal = default;
        nint __retVal_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __retVal_native__marshaller = new();
        try
        {
            {
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[7])(__this, &__retVal_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            global::System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            __invokeSucceeded = true;
            global::System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __retVal_native__marshaller.FromUnmanaged(__retVal_native);
            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native__marshaller.ToManaged();
        }
        finally
        {
            if (__invokeSucceeded)
            {
                // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                __retVal_native__marshaller.Free();
            }
        }

        return __retVal;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling.ReturnPreserveSig()
    {
        var(__this, __vtable_native) = ((global::System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling));
        bool __invokeSucceeded = default;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType __retVal = default;
        nint __retVal_native = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __retVal_native__marshaller = new();
        try
        {
            {
                __retVal_native = ((delegate* unmanaged[MemberFunction]<void*, nint> )__vtable_native[8])(__this);
            }

            __invokeSucceeded = true;
            global::System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __retVal_native__marshaller.FromUnmanaged(__retVal_native);
            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native__marshaller.ToManaged();
        }
        finally
        {
            if (__invokeSucceeded)
            {
                // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                __retVal_native__marshaller.Free();
            }
        }

        return __retVal;
    }
}

file unsafe partial interface InterfaceImplementation
{
    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static int ABI_Method(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint __param_native)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param = default;
        int __retVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __param_native__marshaller.FromUnmanaged(__param_native);
            // Unmarshal - Convert native data to managed data.
            param = __param_native__marshaller.ToManaged();
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            @this.Method(param);
            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            __retVal = 0; // S_OK
        }
        catch (global::System.Exception __exception)
        {
            __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller<int>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }

        return __retVal;
    }

    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static int ABI_MethodIn(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint* __param_native__param)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        ref nint __param_native = ref *__param_native__param;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param = default;
        int __retVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __param_native__marshaller.FromUnmanaged(__param_native);
            // Unmarshal - Convert native data to managed data.
            param = __param_native__marshaller.ToManaged();
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            @this.MethodIn(in param);
            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            __retVal = 0; // S_OK
        }
        catch (global::System.Exception __exception)
        {
            __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller<int>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }

        return __retVal;
    }

    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static int ABI_MethodOut(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint* __param_native__param)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        ref nint __param_native = ref *__param_native__param;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param = default;
        int __retVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // Unmarshal - Convert native data to managed data.
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            @this.MethodOut(out param);
            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            __retVal = 0; // S_OK
            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
            __param_native = __param_native__marshaller.ToUnmanaged();
        }
        catch (global::System.Exception __exception)
        {
            __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller<int>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }

        return __retVal;
    }

    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static int ABI_MethodRef(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint* __param_native__param)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        ref nint __param_native = ref *__param_native__param;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType param = default;
        int __retVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __param_native__marshaller = new();
        try
        {
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __param_native__marshaller.FromUnmanaged(__param_native);
            // Unmarshal - Convert native data to managed data.
            param = __param_native__marshaller.ToManaged();
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            @this.MethodRef(ref param);
            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            __retVal = 0; // S_OK
            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
            __param_native = __param_native__marshaller.ToUnmanaged();
        }
        catch (global::System.Exception __exception)
        {
            __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller<int>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __param_native__marshaller.Free();
        }

        return __retVal;
    }

    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static int ABI_Return(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native, nint* __invokeRetValUnmanaged__param)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        ref nint __invokeRetValUnmanaged = ref *__invokeRetValUnmanaged__param;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType __invokeRetVal = default;
        int __retVal = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __invokeRetValUnmanaged__marshaller = new();
        try
        {
            // Unmarshal - Convert native data to managed data.
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            __invokeRetVal = @this.Return();
            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            __retVal = 0; // S_OK
            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
            __invokeRetValUnmanaged = __invokeRetValUnmanaged__marshaller.ToUnmanaged();
        }
        catch (global::System.Exception __exception)
        {
            __retVal = global::System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller<int>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __invokeRetValUnmanaged__marshaller.Free();
        }

        return __retVal;
    }

    [global::System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(global::System.Runtime.CompilerServices.CallConvMemberFunction) })]
    internal static nint ABI_ReturnPreserveSig(global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch* __this_native)
    {
        global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling @this = default;
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferType __retVal = default;
        nint __retVal_native = default;
        // Setup - Perform required setup.
        global::SharedTypes.ComInterfaces.StatefulCallerAllocatedBufferTypeMarshaller __retVal_native__marshaller = new();
        try
        {
            // Unmarshal - Convert native data to managed data.
            @this = global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance<global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling>(__this_native);
            __retVal = @this.ReturnPreserveSig();
            // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
            __retVal_native = __retVal_native__marshaller.ToUnmanaged();
        }
        catch (global::System.Exception __exception)
        {
            __retVal_native = global::System.Runtime.InteropServices.Marshalling.ExceptionAsDefaultMarshaller<nint>.ConvertToUnmanaged(__exception);
        }
        finally
        {
            // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
            __retVal_native__marshaller.Free();
        }

        return __retVal_native;
    }
}

file unsafe partial interface InterfaceImplementation
{
    internal static void** CreateManagedVirtualFunctionTable()
    {
        void** vtable = (void**)global::System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(typeof(global::SharedTypes.ComInterfaces.IStatefulCallerAllocatedBufferMarshalling), sizeof(void*) * 9);
        {
            nint v0, v1, v2;
            global::System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(out v0, out v1, out v2);
            vtable[0] = (void*)v0;
            vtable[1] = (void*)v1;
            vtable[2] = (void*)v2;
        }

        {
            vtable[3] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint, int> )&ABI_Method;
            vtable[4] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint*, int> )&ABI_MethodIn;
            vtable[5] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint*, int> )&ABI_MethodOut;
            vtable[6] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint*, int> )&ABI_MethodRef;
            vtable[7] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint*, int> )&ABI_Return;
            vtable[8] = (void*)(delegate* unmanaged[MemberFunction]<global::System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*, nint> )&ABI_ReturnPreserveSig;
        }

        return vtable;
    }
}

namespace SharedTypes.ComInterfaces
{
    [global::System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute<InterfaceInformation, InterfaceImplementation>]
    internal partial interface IStatefulCallerAllocatedBufferMarshalling
    {
    }
}

namespace SharedTypes.ComInterfaces
{
    internal partial interface IStatefulCallerAllocatedBufferMarshalling
    {
    }
}