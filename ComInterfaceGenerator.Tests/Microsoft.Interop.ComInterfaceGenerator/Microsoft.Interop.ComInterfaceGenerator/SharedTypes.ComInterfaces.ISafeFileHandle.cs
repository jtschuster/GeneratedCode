// <auto-generated />
#pragma warning disable CS0612, CS0618
file unsafe class InterfaceInformation : System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType
{
    public static System.Guid Iid { get; } = new(new System.ReadOnlySpan<byte>(new byte[] { 124, 183, 82, 10, 139, 224, 116, 66, 161, 244, 26, 43, 242, 192, 126, 96 }));
    public static void** ManagedVirtualMethodTable => null;
}

[System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute]
file unsafe partial interface InterfaceImplementation : global::SharedTypes.ComInterfaces.ISafeFileHandle
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.ISafeFileHandle.Method(global::Microsoft.Win32.SafeHandles.SafeFileHandle p)
    {
        var(__this, __vtable_native) = ((System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.ISafeFileHandle));
        nint __p_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __p_native__marshaller = new();
        try
        {
            // Marshal - Convert managed data to native data.
            __p_native__marshaller.FromManaged(p);
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __p_native = __p_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint, int> )__vtable_native[3])(__this, __p_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            System.GC.KeepAlive(this);
        }
        finally
        {
            // Cleanup - Perform required cleanup.
            __p_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.ISafeFileHandle.MethodIn(in global::Microsoft.Win32.SafeHandles.SafeFileHandle p)
    {
        var(__this, __vtable_native) = ((System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.ISafeFileHandle));
        nint __p_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedIn __p_native__marshaller = new();
        try
        {
            // Marshal - Convert managed data to native data.
            __p_native__marshaller.FromManaged(p);
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __p_native = __p_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[4])(__this, &__p_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            System.GC.KeepAlive(this);
        }
        finally
        {
            // Cleanup - Perform required cleanup.
            __p_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.ISafeFileHandle.MethodOut(out global::Microsoft.Win32.SafeHandles.SafeFileHandle p)
    {
        var(__this, __vtable_native) = ((System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.ISafeFileHandle));
        System.Runtime.CompilerServices.Unsafe.SkipInit(out p);
        nint __p_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedOut __p_native__marshaller = new();
        try
        {
            {
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[5])(__this, &__p_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __p_native__marshaller.FromUnmanaged(__p_native);
            // Unmarshal - Convert native data to managed data.
            p = __p_native__marshaller.ToManaged();
        }
        finally
        {
            // Cleanup - Perform required cleanup.
            __p_native__marshaller.Free();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.ComInterfaceGenerator", "42.42.42.42")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    void global::SharedTypes.ComInterfaces.ISafeFileHandle.MethodRef(ref global::Microsoft.Win32.SafeHandles.SafeFileHandle p)
    {
        var(__this, __vtable_native) = ((System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider)this).GetVirtualMethodTableInfoForKey(typeof(global::SharedTypes.ComInterfaces.ISafeFileHandle));
        bool __invokeSucceeded = default;
        nint __p_native = default;
        int __invokeRetVal = default;
        // Setup - Perform required setup.
        global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Microsoft.Win32.SafeHandles.SafeFileHandle>.ManagedToUnmanagedRef __p_native__marshaller = new();
        try
        {
            // Marshal - Convert managed data to native data.
            __p_native__marshaller.FromManaged(p);
            {
                // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                __p_native = __p_native__marshaller.ToUnmanaged();
                __invokeRetVal = ((delegate* unmanaged[MemberFunction]<void*, nint*, int> )__vtable_native[6])(__this, &__p_native);
            }

            // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
            System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(__invokeRetVal);
            __p_native__marshaller.OnInvoked();
            __invokeSucceeded = true;
            System.GC.KeepAlive(this);
            // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
            __p_native__marshaller.FromUnmanaged(__p_native);
        }
        finally
        {
            if (__invokeSucceeded)
            {
                // GuaranteedUnmarshal - Convert native data to managed data even in the case of an exception during the non-cleanup phases.
                p = __p_native__marshaller.ToManagedFinally();
            }

            // Cleanup - Perform required cleanup.
            __p_native__marshaller.Free();
        }
    }
}

file unsafe partial interface InterfaceImplementation
{
}

file unsafe partial interface InterfaceImplementation
{
}

namespace SharedTypes.ComInterfaces
{
    [System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute<InterfaceInformation, InterfaceImplementation>]
    internal partial interface ISafeFileHandle
    {
    }
}

namespace SharedTypes.ComInterfaces
{
    internal partial interface ISafeFileHandle
    {
    }
}